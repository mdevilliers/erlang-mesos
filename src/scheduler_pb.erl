%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.18.8 on {{2015,11,2},{14,11,9}}
-module(scheduler_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_mesos.v1.scheduler.Event.Type'/1, 'enum_value_by_symbol_mesos.v1.scheduler.Event.Type'/1]).
-export(['enum_symbol_by_value_mesos.v1.scheduler.Call.Type'/1, 'enum_value_by_symbol_mesos.v1.scheduler.Call.Type'/1]).
-export(['enum_symbol_by_value_mesos.v1.Status'/1, 'enum_value_by_symbol_mesos.v1.Status'/1]).
-export(['enum_symbol_by_value_mesos.v1.FrameworkInfo.Capability.Type'/1, 'enum_value_by_symbol_mesos.v1.FrameworkInfo.Capability.Type'/1]).
-export(['enum_symbol_by_value_mesos.v1.Value.Type'/1, 'enum_value_by_symbol_mesos.v1.Value.Type'/1]).
-export(['enum_symbol_by_value_mesos.v1.Offer.Operation.Type'/1, 'enum_value_by_symbol_mesos.v1.Offer.Operation.Type'/1]).
-export(['enum_symbol_by_value_mesos.v1.TaskState'/1, 'enum_value_by_symbol_mesos.v1.TaskState'/1]).
-export(['enum_symbol_by_value_mesos.v1.TaskStatus.Source'/1, 'enum_value_by_symbol_mesos.v1.TaskStatus.Source'/1]).
-export(['enum_symbol_by_value_mesos.v1.TaskStatus.Reason'/1, 'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'/1]).
-export(['enum_symbol_by_value_mesos.v1.ACL.Entity.Type'/1, 'enum_value_by_symbol_mesos.v1.ACL.Entity.Type'/1]).
-export(['enum_symbol_by_value_mesos.v1.Image.Type'/1, 'enum_value_by_symbol_mesos.v1.Image.Type'/1]).
-export(['enum_symbol_by_value_mesos.v1.Volume.Mode'/1, 'enum_value_by_symbol_mesos.v1.Volume.Mode'/1]).
-export(['enum_symbol_by_value_mesos.v1.ContainerInfo.Type'/1, 'enum_value_by_symbol_mesos.v1.ContainerInfo.Type'/1]).
-export(['enum_symbol_by_value_mesos.v1.ContainerInfo.DockerInfo.Network'/1, 'enum_value_by_symbol_mesos.v1.ContainerInfo.DockerInfo.Network'/1]).
-export(['enum_symbol_by_value_mesos.v1.DiscoveryInfo.Visibility'/1, 'enum_value_by_symbol_mesos.v1.DiscoveryInfo.Visibility'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("scheduler_pb.hrl").
-include_lib("gpb/include/gpb.hrl").


encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #'mesos.v1.Label'{} -> 'e_msg_mesos.v1.Label'(Msg);
      #'mesos.v1.Labels'{} -> 'e_msg_mesos.v1.Labels'(Msg);
      #'mesos.v1.Image.AppC'{} ->
	  'e_msg_mesos.v1.Image.AppC'(Msg);
      #'mesos.v1.Image'{} -> 'e_msg_mesos.v1.Image'(Msg);
      #'mesos.v1.ContainerInfo.MesosInfo'{} ->
	  'e_msg_mesos.v1.ContainerInfo.MesosInfo'(Msg);
      #'mesos.v1.Parameter'{} ->
	  'e_msg_mesos.v1.Parameter'(Msg);
      #'mesos.v1.ContainerInfo.DockerInfo.PortMapping'{} ->
	  'e_msg_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Msg);
      #'mesos.v1.ContainerInfo.DockerInfo'{} ->
	  'e_msg_mesos.v1.ContainerInfo.DockerInfo'(Msg);
      #'mesos.v1.Volume'{} -> 'e_msg_mesos.v1.Volume'(Msg);
      #'mesos.v1.ContainerInfo'{} ->
	  'e_msg_mesos.v1.ContainerInfo'(Msg);
      #'mesos.v1.AgentID'{} -> 'e_msg_mesos.v1.AgentID'(Msg);
      #'mesos.v1.Value.Text'{} ->
	  'e_msg_mesos.v1.Value.Text'(Msg);
      #'mesos.v1.Value.Set'{} ->
	  'e_msg_mesos.v1.Value.Set'(Msg);
      #'mesos.v1.Value.Range'{} ->
	  'e_msg_mesos.v1.Value.Range'(Msg);
      #'mesos.v1.Value.Ranges'{} ->
	  'e_msg_mesos.v1.Value.Ranges'(Msg);
      #'mesos.v1.Value.Scalar'{} ->
	  'e_msg_mesos.v1.Value.Scalar'(Msg);
      #'mesos.v1.Attribute'{} ->
	  'e_msg_mesos.v1.Attribute'(Msg);
      #'mesos.v1.Resource.RevocableInfo'{} ->
	  'e_msg_mesos.v1.Resource.RevocableInfo'(Msg);
      #'mesos.v1.Resource.DiskInfo.Persistence'{} ->
	  'e_msg_mesos.v1.Resource.DiskInfo.Persistence'(Msg);
      #'mesos.v1.Resource.DiskInfo'{} ->
	  'e_msg_mesos.v1.Resource.DiskInfo'(Msg);
      #'mesos.v1.Resource.ReservationInfo'{} ->
	  'e_msg_mesos.v1.Resource.ReservationInfo'(Msg);
      #'mesos.v1.Resource'{} ->
	  'e_msg_mesos.v1.Resource'(Msg);
      #'mesos.v1.AgentInfo'{} ->
	  'e_msg_mesos.v1.AgentInfo'(Msg);
      #'mesos.v1.Request'{} -> 'e_msg_mesos.v1.Request'(Msg);
      #'mesos.v1.scheduler.Call.Request'{} ->
	  'e_msg_mesos.v1.scheduler.Call.Request'(Msg);
      #'mesos.v1.ExecutorID'{} ->
	  'e_msg_mesos.v1.ExecutorID'(Msg);
      #'mesos.v1.scheduler.Call.Message'{} ->
	  'e_msg_mesos.v1.scheduler.Call.Message'(Msg);
      #'mesos.v1.TaskID'{} -> 'e_msg_mesos.v1.TaskID'(Msg);
      #'mesos.v1.scheduler.Call.Reconcile.Task'{} ->
	  'e_msg_mesos.v1.scheduler.Call.Reconcile.Task'(Msg);
      #'mesos.v1.scheduler.Call.Reconcile'{} ->
	  'e_msg_mesos.v1.scheduler.Call.Reconcile'(Msg);
      #'mesos.v1.scheduler.Call.Acknowledge'{} ->
	  'e_msg_mesos.v1.scheduler.Call.Acknowledge'(Msg);
      #'mesos.v1.scheduler.Call.Shutdown'{} ->
	  'e_msg_mesos.v1.scheduler.Call.Shutdown'(Msg);
      #'mesos.v1.scheduler.Call.Kill'{} ->
	  'e_msg_mesos.v1.scheduler.Call.Kill'(Msg);
      #'mesos.v1.Filters'{} -> 'e_msg_mesos.v1.Filters'(Msg);
      #'mesos.v1.OfferID'{} -> 'e_msg_mesos.v1.OfferID'(Msg);
      #'mesos.v1.scheduler.Call.Decline'{} ->
	  'e_msg_mesos.v1.scheduler.Call.Decline'(Msg);
      #'mesos.v1.Offer.Operation.Destroy'{} ->
	  'e_msg_mesos.v1.Offer.Operation.Destroy'(Msg);
      #'mesos.v1.Offer.Operation.Create'{} ->
	  'e_msg_mesos.v1.Offer.Operation.Create'(Msg);
      #'mesos.v1.Offer.Operation.Unreserve'{} ->
	  'e_msg_mesos.v1.Offer.Operation.Unreserve'(Msg);
      #'mesos.v1.Offer.Operation.Reserve'{} ->
	  'e_msg_mesos.v1.Offer.Operation.Reserve'(Msg);
      #'mesos.v1.Port'{} -> 'e_msg_mesos.v1.Port'(Msg);
      #'mesos.v1.Ports'{} -> 'e_msg_mesos.v1.Ports'(Msg);
      #'mesos.v1.DiscoveryInfo'{} ->
	  'e_msg_mesos.v1.DiscoveryInfo'(Msg);
      #'mesos.v1.Environment.Variable'{} ->
	  'e_msg_mesos.v1.Environment.Variable'(Msg);
      #'mesos.v1.Environment'{} ->
	  'e_msg_mesos.v1.Environment'(Msg);
      #'mesos.v1.CommandInfo.URI'{} ->
	  'e_msg_mesos.v1.CommandInfo.URI'(Msg);
      #'mesos.v1.CommandInfo.ContainerInfo'{} ->
	  'e_msg_mesos.v1.CommandInfo.ContainerInfo'(Msg);
      #'mesos.v1.CommandInfo'{} ->
	  'e_msg_mesos.v1.CommandInfo'(Msg);
      #'mesos.v1.HealthCheck.HTTP'{} ->
	  'e_msg_mesos.v1.HealthCheck.HTTP'(Msg);
      #'mesos.v1.HealthCheck'{} ->
	  'e_msg_mesos.v1.HealthCheck'(Msg);
      #'mesos.v1.FrameworkID'{} ->
	  'e_msg_mesos.v1.FrameworkID'(Msg);
      #'mesos.v1.ExecutorInfo'{} ->
	  'e_msg_mesos.v1.ExecutorInfo'(Msg);
      #'mesos.v1.TaskInfo'{} ->
	  'e_msg_mesos.v1.TaskInfo'(Msg);
      #'mesos.v1.Offer.Operation.Launch'{} ->
	  'e_msg_mesos.v1.Offer.Operation.Launch'(Msg);
      #'mesos.v1.Offer.Operation'{} ->
	  'e_msg_mesos.v1.Offer.Operation'(Msg);
      #'mesos.v1.scheduler.Call.Accept'{} ->
	  'e_msg_mesos.v1.scheduler.Call.Accept'(Msg);
      #'mesos.v1.FrameworkInfo.Capability'{} ->
	  'e_msg_mesos.v1.FrameworkInfo.Capability'(Msg);
      #'mesos.v1.FrameworkInfo'{} ->
	  'e_msg_mesos.v1.FrameworkInfo'(Msg);
      #'mesos.v1.scheduler.Call.Subscribe'{} ->
	  'e_msg_mesos.v1.scheduler.Call.Subscribe'(Msg);
      #'mesos.v1.scheduler.Call'{} ->
	  'e_msg_mesos.v1.scheduler.Call'(Msg);
      #'mesos.v1.RateLimit'{} ->
	  'e_msg_mesos.v1.RateLimit'(Msg);
      #'mesos.v1.RateLimits'{} ->
	  'e_msg_mesos.v1.RateLimits'(Msg);
      #'mesos.v1.Parameters'{} ->
	  'e_msg_mesos.v1.Parameters'(Msg);
      #'mesos.v1.Address'{} -> 'e_msg_mesos.v1.Address'(Msg);
      #'mesos.v1.URL'{} -> 'e_msg_mesos.v1.URL'(Msg);
      #'mesos.v1.Offer'{} -> 'e_msg_mesos.v1.Offer'(Msg);
      #'mesos.v1.Credential'{} ->
	  'e_msg_mesos.v1.Credential'(Msg);
      #'mesos.v1.ACL.Entity'{} ->
	  'e_msg_mesos.v1.ACL.Entity'(Msg);
      #'mesos.v1.TaskStatus'{} ->
	  'e_msg_mesos.v1.TaskStatus'(Msg);
      #'mesos.v1.scheduler.Event.Update'{} ->
	  'e_msg_mesos.v1.scheduler.Event.Update'(Msg);
      #'mesos.v1.scheduler.Event.Error'{} ->
	  'e_msg_mesos.v1.scheduler.Event.Error'(Msg);
      #'mesos.v1.scheduler.Event.Failure'{} ->
	  'e_msg_mesos.v1.scheduler.Event.Failure'(Msg);
      #'mesos.v1.scheduler.Event.Message'{} ->
	  'e_msg_mesos.v1.scheduler.Event.Message'(Msg);
      #'mesos.v1.scheduler.Event.Rescind'{} ->
	  'e_msg_mesos.v1.scheduler.Event.Rescind'(Msg);
      #'mesos.v1.scheduler.Event.Offers'{} ->
	  'e_msg_mesos.v1.scheduler.Event.Offers'(Msg);
      #'mesos.v1.scheduler.Event.Subscribed'{} ->
	  'e_msg_mesos.v1.scheduler.Event.Subscribed'(Msg);
      #'mesos.v1.scheduler.Event'{} ->
	  'e_msg_mesos.v1.scheduler.Event'(Msg);
      #'mesos.v1.TrafficControlStatistics'{} ->
	  'e_msg_mesos.v1.TrafficControlStatistics'(Msg);
      #'mesos.v1.PerfStatistics'{} ->
	  'e_msg_mesos.v1.PerfStatistics'(Msg);
      #'mesos.v1.ResourceStatistics'{} ->
	  'e_msg_mesos.v1.ResourceStatistics'(Msg);
      #'mesos.v1.Credentials'{} ->
	  'e_msg_mesos.v1.Credentials'(Msg);
      #'mesos.v1.ResourceUsage.Executor'{} ->
	  'e_msg_mesos.v1.ResourceUsage.Executor'(Msg);
      #'mesos.v1.ACL'{} -> 'e_msg_mesos.v1.ACL'(Msg);
      #'mesos.v1.ACL.RunTask'{} ->
	  'e_msg_mesos.v1.ACL.RunTask'(Msg);
      #'mesos.v1.ACL.RegisterFramework'{} ->
	  'e_msg_mesos.v1.ACL.RegisterFramework'(Msg);
      #'mesos.v1.ACL.ShutdownFramework'{} ->
	  'e_msg_mesos.v1.ACL.ShutdownFramework'(Msg);
      #'mesos.v1.ACLs'{} -> 'e_msg_mesos.v1.ACLs'(Msg);
      #'mesos.v1.MasterInfo'{} ->
	  'e_msg_mesos.v1.MasterInfo'(Msg);
      #'mesos.v1.ResourceUsage'{} ->
	  'e_msg_mesos.v1.ResourceUsage'(Msg);
      #'mesos.v1.Value'{} -> 'e_msg_mesos.v1.Value'(Msg);
      #'mesos.v1.ContainerID'{} ->
	  'e_msg_mesos.v1.ContainerID'(Msg)
    end.


'e_enum_mesos.v1.scheduler.Event.Type'('SUBSCRIBED',
				       Bin) ->
    <<Bin/binary, 1>>;
'e_enum_mesos.v1.scheduler.Event.Type'('OFFERS', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_mesos.v1.scheduler.Event.Type'('RESCIND',
				       Bin) ->
    <<Bin/binary, 3>>;
'e_enum_mesos.v1.scheduler.Event.Type'('UPDATE', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_mesos.v1.scheduler.Event.Type'('MESSAGE',
				       Bin) ->
    <<Bin/binary, 5>>;
'e_enum_mesos.v1.scheduler.Event.Type'('FAILURE',
				       Bin) ->
    <<Bin/binary, 6>>;
'e_enum_mesos.v1.scheduler.Event.Type'('ERROR', Bin) ->
    <<Bin/binary, 7>>;
'e_enum_mesos.v1.scheduler.Event.Type'('HEARTBEAT',
				       Bin) ->
    <<Bin/binary, 8>>.

'e_enum_mesos.v1.scheduler.Call.Type'('SUBSCRIBE',
				      Bin) ->
    <<Bin/binary, 1>>;
'e_enum_mesos.v1.scheduler.Call.Type'('TEARDOWN',
				      Bin) ->
    <<Bin/binary, 2>>;
'e_enum_mesos.v1.scheduler.Call.Type'('ACCEPT', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_mesos.v1.scheduler.Call.Type'('DECLINE', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_mesos.v1.scheduler.Call.Type'('REVIVE', Bin) ->
    <<Bin/binary, 5>>;
'e_enum_mesos.v1.scheduler.Call.Type'('KILL', Bin) ->
    <<Bin/binary, 6>>;
'e_enum_mesos.v1.scheduler.Call.Type'('SHUTDOWN',
				      Bin) ->
    <<Bin/binary, 7>>;
'e_enum_mesos.v1.scheduler.Call.Type'('ACKNOWLEDGE',
				      Bin) ->
    <<Bin/binary, 8>>;
'e_enum_mesos.v1.scheduler.Call.Type'('RECONCILE',
				      Bin) ->
    <<Bin/binary, 9>>;
'e_enum_mesos.v1.scheduler.Call.Type'('MESSAGE', Bin) ->
    <<Bin/binary, 10>>;
'e_enum_mesos.v1.scheduler.Call.Type'('REQUEST', Bin) ->
    <<Bin/binary, 11>>.

'e_enum_mesos.v1.FrameworkInfo.Capability.Type'('REVOCABLE_RESOURCES',
						Bin) ->
    <<Bin/binary, 1>>.

'e_enum_mesos.v1.Value.Type'('SCALAR', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_mesos.v1.Value.Type'('RANGES', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_mesos.v1.Value.Type'('SET', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_mesos.v1.Value.Type'('TEXT', Bin) ->
    <<Bin/binary, 3>>.

'e_enum_mesos.v1.Offer.Operation.Type'('LAUNCH', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_mesos.v1.Offer.Operation.Type'('RESERVE',
				       Bin) ->
    <<Bin/binary, 2>>;
'e_enum_mesos.v1.Offer.Operation.Type'('UNRESERVE',
				       Bin) ->
    <<Bin/binary, 3>>;
'e_enum_mesos.v1.Offer.Operation.Type'('CREATE', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_mesos.v1.Offer.Operation.Type'('DESTROY',
				       Bin) ->
    <<Bin/binary, 5>>.

'e_enum_mesos.v1.TaskState'('TASK_STAGING', Bin) ->
    <<Bin/binary, 6>>;
'e_enum_mesos.v1.TaskState'('TASK_STARTING', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_mesos.v1.TaskState'('TASK_RUNNING', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_mesos.v1.TaskState'('TASK_FINISHED', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_mesos.v1.TaskState'('TASK_FAILED', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_mesos.v1.TaskState'('TASK_KILLED', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_mesos.v1.TaskState'('TASK_LOST', Bin) ->
    <<Bin/binary, 5>>;
'e_enum_mesos.v1.TaskState'('TASK_ERROR', Bin) ->
    <<Bin/binary, 7>>.

'e_enum_mesos.v1.TaskStatus.Source'('SOURCE_MASTER',
				    Bin) ->
    <<Bin/binary, 0>>;
'e_enum_mesos.v1.TaskStatus.Source'('SOURCE_AGENT',
				    Bin) ->
    <<Bin/binary, 1>>;
'e_enum_mesos.v1.TaskStatus.Source'('SOURCE_EXECUTOR',
				    Bin) ->
    <<Bin/binary, 2>>.

'e_enum_mesos.v1.TaskStatus.Reason'('REASON_COMMAND_EXECUTOR_FAILED',
				    Bin) ->
    <<Bin/binary, 0>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_EXECUTOR_PREEMPTED',
				    Bin) ->
    <<Bin/binary, 17>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_EXECUTOR_TERMINATED',
				    Bin) ->
    <<Bin/binary, 1>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_EXECUTOR_UNREGISTERED',
				    Bin) ->
    <<Bin/binary, 2>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_FRAMEWORK_REMOVED',
				    Bin) ->
    <<Bin/binary, 3>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_GC_ERROR',
				    Bin) ->
    <<Bin/binary, 4>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_INVALID_FRAMEWORKID',
				    Bin) ->
    <<Bin/binary, 5>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_INVALID_OFFERS',
				    Bin) ->
    <<Bin/binary, 6>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_MASTER_DISCONNECTED',
				    Bin) ->
    <<Bin/binary, 7>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_MEMORY_LIMIT',
				    Bin) ->
    <<Bin/binary, 8>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_RECONCILIATION',
				    Bin) ->
    <<Bin/binary, 9>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_RESOURCES_UNKNOWN',
				    Bin) ->
    <<Bin/binary, 18>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_AGENT_DISCONNECTED',
				    Bin) ->
    <<Bin/binary, 10>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_AGENT_REMOVED',
				    Bin) ->
    <<Bin/binary, 11>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_AGENT_RESTARTED',
				    Bin) ->
    <<Bin/binary, 12>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_AGENT_UNKNOWN',
				    Bin) ->
    <<Bin/binary, 13>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_TASK_INVALID',
				    Bin) ->
    <<Bin/binary, 14>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_TASK_UNAUTHORIZED',
				    Bin) ->
    <<Bin/binary, 15>>;
'e_enum_mesos.v1.TaskStatus.Reason'('REASON_TASK_UNKNOWN',
				    Bin) ->
    <<Bin/binary, 16>>.

'e_enum_mesos.v1.ACL.Entity.Type'('SOME', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_mesos.v1.ACL.Entity.Type'('ANY', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_mesos.v1.ACL.Entity.Type'('NONE', Bin) ->
    <<Bin/binary, 2>>.

'e_enum_mesos.v1.Image.Type'('APPC', Bin) ->
    <<Bin/binary, 1>>.

'e_enum_mesos.v1.Volume.Mode'('RW', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_mesos.v1.Volume.Mode'('RO', Bin) ->
    <<Bin/binary, 2>>.

'e_enum_mesos.v1.ContainerInfo.Type'('DOCKER', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_mesos.v1.ContainerInfo.Type'('MESOS', Bin) ->
    <<Bin/binary, 2>>.

'e_enum_mesos.v1.ContainerInfo.DockerInfo.Network'('HOST',
						   Bin) ->
    <<Bin/binary, 1>>;
'e_enum_mesos.v1.ContainerInfo.DockerInfo.Network'('BRIDGE',
						   Bin) ->
    <<Bin/binary, 2>>;
'e_enum_mesos.v1.ContainerInfo.DockerInfo.Network'('NONE',
						   Bin) ->
    <<Bin/binary, 3>>.

'e_enum_mesos.v1.DiscoveryInfo.Visibility'('FRAMEWORK',
					   Bin) ->
    <<Bin/binary, 0>>;
'e_enum_mesos.v1.DiscoveryInfo.Visibility'('CLUSTER',
					   Bin) ->
    <<Bin/binary, 1>>;
'e_enum_mesos.v1.DiscoveryInfo.Visibility'('EXTERNAL',
					   Bin) ->
    <<Bin/binary, 2>>.

'e_msg_mesos.v1.Label'(Msg) ->
    'e_msg_mesos.v1.Label'(Msg, <<>>).


'e_msg_mesos.v1.Label'(#'mesos.v1.Label'{key = F1,
					 value = F2},
		       Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_type_string(F2, <<B1/binary, 18>>)
    end.

'e_msg_mesos.v1.Labels'(Msg) ->
    'e_msg_mesos.v1.Labels'(Msg, <<>>).


'e_msg_mesos.v1.Labels'(#'mesos.v1.Labels'{labels = F1},
			Bin) ->
    if F1 == [] -> Bin;
       true -> 'e_field_mesos.v1.Labels_labels'(F1, Bin)
    end.

'e_msg_mesos.v1.Image.AppC'(Msg) ->
    'e_msg_mesos.v1.Image.AppC'(Msg, <<>>).


'e_msg_mesos.v1.Image.AppC'(#'mesos.v1.Image.AppC'{name
						       = F1,
						   id = F2, labels = F3},
			    Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_type_string(F2, <<B1/binary, 18>>),
    if F3 == undefined -> B2;
       true ->
	   'e_mfield_mesos.v1.Image.AppC_labels'(F3,
						 <<B2/binary, 26>>)
    end.

'e_msg_mesos.v1.Image'(Msg) ->
    'e_msg_mesos.v1.Image'(Msg, <<>>).


'e_msg_mesos.v1.Image'(#'mesos.v1.Image'{type = F1,
					 appc = F2},
		       Bin) ->
    B1 = 'e_enum_mesos.v1.Image.Type'(F1,
				      <<Bin/binary, 8>>),
    if F2 == undefined -> B1;
       true ->
	   'e_mfield_mesos.v1.Image_appc'(F2, <<B1/binary, 18>>)
    end.

'e_msg_mesos.v1.ContainerInfo.MesosInfo'(Msg) ->
    'e_msg_mesos.v1.ContainerInfo.MesosInfo'(Msg, <<>>).


'e_msg_mesos.v1.ContainerInfo.MesosInfo'(#'mesos.v1.ContainerInfo.MesosInfo'{image
										 =
										 F1},
					 Bin) ->
    if F1 == undefined -> Bin;
       true ->
	   'e_mfield_mesos.v1.ContainerInfo.MesosInfo_image'(F1,
							     <<Bin/binary, 10>>)
    end.

'e_msg_mesos.v1.Parameter'(Msg) ->
    'e_msg_mesos.v1.Parameter'(Msg, <<>>).


'e_msg_mesos.v1.Parameter'(#'mesos.v1.Parameter'{key =
						     F1,
						 value = F2},
			   Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    e_type_string(F2, <<B1/binary, 18>>).

'e_msg_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Msg) ->
    'e_msg_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Msg,
							  <<>>).


'e_msg_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(#'mesos.v1.ContainerInfo.DockerInfo.PortMapping'{host_port
													   =
													   F1,
												       container_port
													   =
													   F2,
												       protocol
													   =
													   F3},
						      Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    B2 = e_varint(F2, <<B1/binary, 16>>),
    if F3 == undefined -> B2;
       true -> e_type_string(F3, <<B2/binary, 26>>)
    end.

'e_msg_mesos.v1.ContainerInfo.DockerInfo'(Msg) ->
    'e_msg_mesos.v1.ContainerInfo.DockerInfo'(Msg, <<>>).


'e_msg_mesos.v1.ContainerInfo.DockerInfo'(#'mesos.v1.ContainerInfo.DockerInfo'{image
										   =
										   F1,
									       network
										   =
										   F2,
									       port_mappings
										   =
										   F3,
									       privileged
										   =
										   F4,
									       parameters
										   =
										   F5,
									       force_pull_image
										   =
										   F6},
					  Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true ->
		'e_enum_mesos.v1.ContainerInfo.DockerInfo.Network'(F2,
								   <<B1/binary,
								     16>>)
	 end,
    B3 = if F3 == [] -> B2;
	    true ->
		'e_field_mesos.v1.ContainerInfo.DockerInfo_port_mappings'(F3,
									  B2)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_bool(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == [] -> B4;
	    true ->
		'e_field_mesos.v1.ContainerInfo.DockerInfo_parameters'(F5,
								       B4)
	 end,
    if F6 == undefined -> B5;
       true -> e_type_bool(F6, <<B5/binary, 48>>)
    end.

'e_msg_mesos.v1.Volume'(Msg) ->
    'e_msg_mesos.v1.Volume'(Msg, <<>>).


'e_msg_mesos.v1.Volume'(#'mesos.v1.Volume'{mode = F1,
					   container_path = F2, host_path = F3,
					   image = F4},
			Bin) ->
    B1 = 'e_enum_mesos.v1.Volume.Mode'(F1,
				       <<Bin/binary, 24>>),
    B2 = e_type_string(F2, <<B1/binary, 10>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_type_string(F3, <<B2/binary, 18>>)
	 end,
    if F4 == undefined -> B3;
       true ->
	   'e_mfield_mesos.v1.Volume_image'(F4, <<B3/binary, 34>>)
    end.

'e_msg_mesos.v1.ContainerInfo'(Msg) ->
    'e_msg_mesos.v1.ContainerInfo'(Msg, <<>>).


'e_msg_mesos.v1.ContainerInfo'(#'mesos.v1.ContainerInfo'{type
							     = F1,
							 volumes = F2,
							 hostname = F3,
							 docker = F4,
							 mesos = F5},
			       Bin) ->
    B1 = 'e_enum_mesos.v1.ContainerInfo.Type'(F1,
					      <<Bin/binary, 8>>),
    B2 = if F2 == [] -> B1;
	    true -> 'e_field_mesos.v1.ContainerInfo_volumes'(F2, B1)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_string(F3, <<B2/binary, 34>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		'e_mfield_mesos.v1.ContainerInfo_docker'(F4,
							 <<B3/binary, 26>>)
	 end,
    if F5 == undefined -> B4;
       true ->
	   'e_mfield_mesos.v1.ContainerInfo_mesos'(F5,
						   <<B4/binary, 42>>)
    end.

'e_msg_mesos.v1.AgentID'(Msg) ->
    'e_msg_mesos.v1.AgentID'(Msg, <<>>).


'e_msg_mesos.v1.AgentID'(#'mesos.v1.AgentID'{value =
						 F1},
			 Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

'e_msg_mesos.v1.Value.Text'(Msg) ->
    'e_msg_mesos.v1.Value.Text'(Msg, <<>>).


'e_msg_mesos.v1.Value.Text'(#'mesos.v1.Value.Text'{value
						       = F1},
			    Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

'e_msg_mesos.v1.Value.Set'(Msg) ->
    'e_msg_mesos.v1.Value.Set'(Msg, <<>>).


'e_msg_mesos.v1.Value.Set'(#'mesos.v1.Value.Set'{item =
						     F1},
			   Bin) ->
    if F1 == [] -> Bin;
       true -> 'e_field_mesos.v1.Value.Set_item'(F1, Bin)
    end.

'e_msg_mesos.v1.Value.Range'(Msg) ->
    'e_msg_mesos.v1.Value.Range'(Msg, <<>>).


'e_msg_mesos.v1.Value.Range'(#'mesos.v1.Value.Range'{'begin'
							 = F1,
						     'end' = F2},
			     Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    e_varint(F2, <<B1/binary, 16>>).

'e_msg_mesos.v1.Value.Ranges'(Msg) ->
    'e_msg_mesos.v1.Value.Ranges'(Msg, <<>>).


'e_msg_mesos.v1.Value.Ranges'(#'mesos.v1.Value.Ranges'{range
							   = F1},
			      Bin) ->
    if F1 == [] -> Bin;
       true -> 'e_field_mesos.v1.Value.Ranges_range'(F1, Bin)
    end.

'e_msg_mesos.v1.Value.Scalar'(Msg) ->
    'e_msg_mesos.v1.Value.Scalar'(Msg, <<>>).


'e_msg_mesos.v1.Value.Scalar'(#'mesos.v1.Value.Scalar'{value
							   = F1},
			      Bin) ->
    e_type_double(F1, <<Bin/binary, 9>>).

'e_msg_mesos.v1.Attribute'(Msg) ->
    'e_msg_mesos.v1.Attribute'(Msg, <<>>).


'e_msg_mesos.v1.Attribute'(#'mesos.v1.Attribute'{name =
						     F1,
						 type = F2, scalar = F3,
						 ranges = F4, set = F5,
						 text = F6},
			   Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = 'e_enum_mesos.v1.Value.Type'(F2,
				      <<B1/binary, 16>>),
    B3 = if F3 == undefined -> B2;
	    true ->
		'e_mfield_mesos.v1.Attribute_scalar'(F3,
						     <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		'e_mfield_mesos.v1.Attribute_ranges'(F4,
						     <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		'e_mfield_mesos.v1.Attribute_set'(F5, <<B4/binary, 50>>)
	 end,
    if F6 == undefined -> B5;
       true ->
	   'e_mfield_mesos.v1.Attribute_text'(F6,
					      <<B5/binary, 42>>)
    end.

'e_msg_mesos.v1.Resource.RevocableInfo'(_Msg) -> <<>>.

'e_msg_mesos.v1.Resource.DiskInfo.Persistence'(Msg) ->
    'e_msg_mesos.v1.Resource.DiskInfo.Persistence'(Msg,
						   <<>>).


'e_msg_mesos.v1.Resource.DiskInfo.Persistence'(#'mesos.v1.Resource.DiskInfo.Persistence'{id
											     =
											     F1},
					       Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

'e_msg_mesos.v1.Resource.DiskInfo'(Msg) ->
    'e_msg_mesos.v1.Resource.DiskInfo'(Msg, <<>>).


'e_msg_mesos.v1.Resource.DiskInfo'(#'mesos.v1.Resource.DiskInfo'{persistence
								     = F1,
								 volume = F2},
				   Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		'e_mfield_mesos.v1.Resource.DiskInfo_persistence'(F1,
								  <<Bin/binary,
								    10>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   'e_mfield_mesos.v1.Resource.DiskInfo_volume'(F2,
							<<B1/binary, 18>>)
    end.

'e_msg_mesos.v1.Resource.ReservationInfo'(Msg) ->
    'e_msg_mesos.v1.Resource.ReservationInfo'(Msg, <<>>).


'e_msg_mesos.v1.Resource.ReservationInfo'(#'mesos.v1.Resource.ReservationInfo'{principal
										   =
										   F1},
					  Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

'e_msg_mesos.v1.Resource'(Msg) ->
    'e_msg_mesos.v1.Resource'(Msg, <<>>).


'e_msg_mesos.v1.Resource'(#'mesos.v1.Resource'{name =
						   F1,
					       type = F2, scalar = F3,
					       ranges = F4, set = F5, role = F6,
					       reservation = F7, disk = F8,
					       revocable = F9},
			  Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = 'e_enum_mesos.v1.Value.Type'(F2,
				      <<B1/binary, 16>>),
    B3 = if F3 == undefined -> B2;
	    true ->
		'e_mfield_mesos.v1.Resource_scalar'(F3,
						    <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		'e_mfield_mesos.v1.Resource_ranges'(F4,
						    <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		'e_mfield_mesos.v1.Resource_set'(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_string(F6, <<B5/binary, 50>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		'e_mfield_mesos.v1.Resource_reservation'(F7,
							 <<B6/binary, 66>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		'e_mfield_mesos.v1.Resource_disk'(F8, <<B7/binary, 58>>)
	 end,
    if F9 == undefined -> B8;
       true ->
	   'e_mfield_mesos.v1.Resource_revocable'(F9,
						  <<B8/binary, 74>>)
    end.

'e_msg_mesos.v1.AgentInfo'(Msg) ->
    'e_msg_mesos.v1.AgentInfo'(Msg, <<>>).


'e_msg_mesos.v1.AgentInfo'(#'mesos.v1.AgentInfo'{hostname
						     = F1,
						 port = F2, resources = F3,
						 attributes = F4, id = F5},
			   Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int32(F2, <<B1/binary, 64>>)
	 end,
    B3 = if F3 == [] -> B2;
	    true -> 'e_field_mesos.v1.AgentInfo_resources'(F3, B2)
	 end,
    B4 = if F4 == [] -> B3;
	    true -> 'e_field_mesos.v1.AgentInfo_attributes'(F4, B3)
	 end,
    if F5 == undefined -> B4;
       true ->
	   'e_mfield_mesos.v1.AgentInfo_id'(F5, <<B4/binary, 50>>)
    end.

'e_msg_mesos.v1.Request'(Msg) ->
    'e_msg_mesos.v1.Request'(Msg, <<>>).


'e_msg_mesos.v1.Request'(#'mesos.v1.Request'{agent_id =
						 F1,
					     resources = F2},
			 Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		'e_mfield_mesos.v1.Request_agent_id'(F1,
						     <<Bin/binary, 10>>)
	 end,
    if F2 == [] -> B1;
       true -> 'e_field_mesos.v1.Request_resources'(F2, B1)
    end.

'e_msg_mesos.v1.scheduler.Call.Request'(Msg) ->
    'e_msg_mesos.v1.scheduler.Call.Request'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Call.Request'(#'mesos.v1.scheduler.Call.Request'{requests
									       =
									       F1},
					Bin) ->
    if F1 == [] -> Bin;
       true ->
	   'e_field_mesos.v1.scheduler.Call.Request_requests'(F1,
							      Bin)
    end.

'e_msg_mesos.v1.ExecutorID'(Msg) ->
    'e_msg_mesos.v1.ExecutorID'(Msg, <<>>).


'e_msg_mesos.v1.ExecutorID'(#'mesos.v1.ExecutorID'{value
						       = F1},
			    Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

'e_msg_mesos.v1.scheduler.Call.Message'(Msg) ->
    'e_msg_mesos.v1.scheduler.Call.Message'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Call.Message'(#'mesos.v1.scheduler.Call.Message'{agent_id
									       =
									       F1,
									   executor_id
									       =
									       F2,
									   data
									       =
									       F3},
					Bin) ->
    B1 =
	'e_mfield_mesos.v1.scheduler.Call.Message_agent_id'(F1,
							    <<Bin/binary, 10>>),
    B2 =
	'e_mfield_mesos.v1.scheduler.Call.Message_executor_id'(F2,
							       <<B1/binary,
								 18>>),
    e_type_bytes(F3, <<B2/binary, 26>>).

'e_msg_mesos.v1.TaskID'(Msg) ->
    'e_msg_mesos.v1.TaskID'(Msg, <<>>).


'e_msg_mesos.v1.TaskID'(#'mesos.v1.TaskID'{value = F1},
			Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

'e_msg_mesos.v1.scheduler.Call.Reconcile.Task'(Msg) ->
    'e_msg_mesos.v1.scheduler.Call.Reconcile.Task'(Msg,
						   <<>>).


'e_msg_mesos.v1.scheduler.Call.Reconcile.Task'(#'mesos.v1.scheduler.Call.Reconcile.Task'{task_id
											     =
											     F1,
											 agent_id
											     =
											     F2},
					       Bin) ->
    B1 =
	'e_mfield_mesos.v1.scheduler.Call.Reconcile.Task_task_id'(F1,
								  <<Bin/binary,
								    10>>),
    if F2 == undefined -> B1;
       true ->
	   'e_mfield_mesos.v1.scheduler.Call.Reconcile.Task_agent_id'(F2,
								      <<B1/binary,
									18>>)
    end.

'e_msg_mesos.v1.scheduler.Call.Reconcile'(Msg) ->
    'e_msg_mesos.v1.scheduler.Call.Reconcile'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Call.Reconcile'(#'mesos.v1.scheduler.Call.Reconcile'{tasks
										   =
										   F1},
					  Bin) ->
    if F1 == [] -> Bin;
       true ->
	   'e_field_mesos.v1.scheduler.Call.Reconcile_tasks'(F1,
							     Bin)
    end.

'e_msg_mesos.v1.scheduler.Call.Acknowledge'(Msg) ->
    'e_msg_mesos.v1.scheduler.Call.Acknowledge'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Call.Acknowledge'(#'mesos.v1.scheduler.Call.Acknowledge'{agent_id
										       =
										       F1,
										   task_id
										       =
										       F2,
										   uuid
										       =
										       F3},
					    Bin) ->
    B1 =
	'e_mfield_mesos.v1.scheduler.Call.Acknowledge_agent_id'(F1,
								<<Bin/binary,
								  10>>),
    B2 =
	'e_mfield_mesos.v1.scheduler.Call.Acknowledge_task_id'(F2,
							       <<B1/binary,
								 18>>),
    e_type_bytes(F3, <<B2/binary, 26>>).

'e_msg_mesos.v1.scheduler.Call.Shutdown'(Msg) ->
    'e_msg_mesos.v1.scheduler.Call.Shutdown'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Call.Shutdown'(#'mesos.v1.scheduler.Call.Shutdown'{executor_id
										 =
										 F1,
									     agent_id
										 =
										 F2},
					 Bin) ->
    B1 =
	'e_mfield_mesos.v1.scheduler.Call.Shutdown_executor_id'(F1,
								<<Bin/binary,
								  10>>),
    'e_mfield_mesos.v1.scheduler.Call.Shutdown_agent_id'(F2,
							 <<B1/binary, 18>>).

'e_msg_mesos.v1.scheduler.Call.Kill'(Msg) ->
    'e_msg_mesos.v1.scheduler.Call.Kill'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Call.Kill'(#'mesos.v1.scheduler.Call.Kill'{task_id
									 = F1,
								     agent_id =
									 F2},
				     Bin) ->
    B1 = 'e_mfield_mesos.v1.scheduler.Call.Kill_task_id'(F1,
							 <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true ->
	   'e_mfield_mesos.v1.scheduler.Call.Kill_agent_id'(F2,
							    <<B1/binary, 18>>)
    end.

'e_msg_mesos.v1.Filters'(Msg) ->
    'e_msg_mesos.v1.Filters'(Msg, <<>>).


'e_msg_mesos.v1.Filters'(#'mesos.v1.Filters'{refuse_seconds
						 = F1},
			 Bin) ->
    if F1 == undefined -> Bin;
       true -> e_type_double(F1, <<Bin/binary, 9>>)
    end.

'e_msg_mesos.v1.OfferID'(Msg) ->
    'e_msg_mesos.v1.OfferID'(Msg, <<>>).


'e_msg_mesos.v1.OfferID'(#'mesos.v1.OfferID'{value =
						 F1},
			 Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

'e_msg_mesos.v1.scheduler.Call.Decline'(Msg) ->
    'e_msg_mesos.v1.scheduler.Call.Decline'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Call.Decline'(#'mesos.v1.scheduler.Call.Decline'{offer_ids
									       =
									       F1,
									   filters
									       =
									       F2},
					Bin) ->
    B1 = if F1 == [] -> Bin;
	    true ->
		'e_field_mesos.v1.scheduler.Call.Decline_offer_ids'(F1,
								    Bin)
	 end,
    if F2 == undefined -> B1;
       true ->
	   'e_mfield_mesos.v1.scheduler.Call.Decline_filters'(F2,
							      <<B1/binary, 18>>)
    end.

'e_msg_mesos.v1.Offer.Operation.Destroy'(Msg) ->
    'e_msg_mesos.v1.Offer.Operation.Destroy'(Msg, <<>>).


'e_msg_mesos.v1.Offer.Operation.Destroy'(#'mesos.v1.Offer.Operation.Destroy'{volumes
										 =
										 F1},
					 Bin) ->
    if F1 == [] -> Bin;
       true ->
	   'e_field_mesos.v1.Offer.Operation.Destroy_volumes'(F1,
							      Bin)
    end.

'e_msg_mesos.v1.Offer.Operation.Create'(Msg) ->
    'e_msg_mesos.v1.Offer.Operation.Create'(Msg, <<>>).


'e_msg_mesos.v1.Offer.Operation.Create'(#'mesos.v1.Offer.Operation.Create'{volumes
									       =
									       F1},
					Bin) ->
    if F1 == [] -> Bin;
       true ->
	   'e_field_mesos.v1.Offer.Operation.Create_volumes'(F1,
							     Bin)
    end.

'e_msg_mesos.v1.Offer.Operation.Unreserve'(Msg) ->
    'e_msg_mesos.v1.Offer.Operation.Unreserve'(Msg, <<>>).


'e_msg_mesos.v1.Offer.Operation.Unreserve'(#'mesos.v1.Offer.Operation.Unreserve'{resources
										     =
										     F1},
					   Bin) ->
    if F1 == [] -> Bin;
       true ->
	   'e_field_mesos.v1.Offer.Operation.Unreserve_resources'(F1,
								  Bin)
    end.

'e_msg_mesos.v1.Offer.Operation.Reserve'(Msg) ->
    'e_msg_mesos.v1.Offer.Operation.Reserve'(Msg, <<>>).


'e_msg_mesos.v1.Offer.Operation.Reserve'(#'mesos.v1.Offer.Operation.Reserve'{resources
										 =
										 F1},
					 Bin) ->
    if F1 == [] -> Bin;
       true ->
	   'e_field_mesos.v1.Offer.Operation.Reserve_resources'(F1,
								Bin)
    end.

'e_msg_mesos.v1.Port'(Msg) ->
    'e_msg_mesos.v1.Port'(Msg, <<>>).


'e_msg_mesos.v1.Port'(#'mesos.v1.Port'{number = F1,
				       name = F2, protocol = F3},
		      Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    if F3 == undefined -> B2;
       true -> e_type_string(F3, <<B2/binary, 26>>)
    end.

'e_msg_mesos.v1.Ports'(Msg) ->
    'e_msg_mesos.v1.Ports'(Msg, <<>>).


'e_msg_mesos.v1.Ports'(#'mesos.v1.Ports'{ports = F1},
		       Bin) ->
    if F1 == [] -> Bin;
       true -> 'e_field_mesos.v1.Ports_ports'(F1, Bin)
    end.

'e_msg_mesos.v1.DiscoveryInfo'(Msg) ->
    'e_msg_mesos.v1.DiscoveryInfo'(Msg, <<>>).


'e_msg_mesos.v1.DiscoveryInfo'(#'mesos.v1.DiscoveryInfo'{visibility
							     = F1,
							 name = F2,
							 environment = F3,
							 location = F4,
							 version = F5,
							 ports = F6,
							 labels = F7},
			       Bin) ->
    B1 = 'e_enum_mesos.v1.DiscoveryInfo.Visibility'(F1,
						    <<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_string(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_string(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_string(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		'e_mfield_mesos.v1.DiscoveryInfo_ports'(F6,
							<<B5/binary, 50>>)
	 end,
    if F7 == undefined -> B6;
       true ->
	   'e_mfield_mesos.v1.DiscoveryInfo_labels'(F7,
						    <<B6/binary, 58>>)
    end.

'e_msg_mesos.v1.Environment.Variable'(Msg) ->
    'e_msg_mesos.v1.Environment.Variable'(Msg, <<>>).


'e_msg_mesos.v1.Environment.Variable'(#'mesos.v1.Environment.Variable'{name
									   = F1,
								       value =
									   F2},
				      Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    e_type_string(F2, <<B1/binary, 18>>).

'e_msg_mesos.v1.Environment'(Msg) ->
    'e_msg_mesos.v1.Environment'(Msg, <<>>).


'e_msg_mesos.v1.Environment'(#'mesos.v1.Environment'{variables
							 = F1},
			     Bin) ->
    if F1 == [] -> Bin;
       true ->
	   'e_field_mesos.v1.Environment_variables'(F1, Bin)
    end.

'e_msg_mesos.v1.CommandInfo.URI'(Msg) ->
    'e_msg_mesos.v1.CommandInfo.URI'(Msg, <<>>).


'e_msg_mesos.v1.CommandInfo.URI'(#'mesos.v1.CommandInfo.URI'{value
								 = F1,
							     executable = F2,
							     extract = F3,
							     cache = F4},
				 Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_bool(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_bool(F3, <<B2/binary, 24>>)
	 end,
    if F4 == undefined -> B3;
       true -> e_type_bool(F4, <<B3/binary, 32>>)
    end.

'e_msg_mesos.v1.CommandInfo.ContainerInfo'(Msg) ->
    'e_msg_mesos.v1.CommandInfo.ContainerInfo'(Msg, <<>>).


'e_msg_mesos.v1.CommandInfo.ContainerInfo'(#'mesos.v1.CommandInfo.ContainerInfo'{image
										     =
										     F1,
										 options
										     =
										     F2},
					   Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    if F2 == [] -> B1;
       true ->
	   'e_field_mesos.v1.CommandInfo.ContainerInfo_options'(F2,
								B1)
    end.

'e_msg_mesos.v1.CommandInfo'(Msg) ->
    'e_msg_mesos.v1.CommandInfo'(Msg, <<>>).


'e_msg_mesos.v1.CommandInfo'(#'mesos.v1.CommandInfo'{container
							 = F1,
						     uris = F2,
						     environment = F3,
						     shell = F4, value = F5,
						     arguments = F6, user = F7},
			     Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		'e_mfield_mesos.v1.CommandInfo_container'(F1,
							  <<Bin/binary, 34>>)
	 end,
    B2 = if F2 == [] -> B1;
	    true -> 'e_field_mesos.v1.CommandInfo_uris'(F2, B1)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		'e_mfield_mesos.v1.CommandInfo_environment'(F3,
							    <<B2/binary, 18>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_bool(F4, <<B3/binary, 48>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_string(F5, <<B4/binary, 26>>)
	 end,
    B6 = if F6 == [] -> B5;
	    true -> 'e_field_mesos.v1.CommandInfo_arguments'(F6, B5)
	 end,
    if F7 == undefined -> B6;
       true -> e_type_string(F7, <<B6/binary, 42>>)
    end.

'e_msg_mesos.v1.HealthCheck.HTTP'(Msg) ->
    'e_msg_mesos.v1.HealthCheck.HTTP'(Msg, <<>>).


'e_msg_mesos.v1.HealthCheck.HTTP'(#'mesos.v1.HealthCheck.HTTP'{port
								   = F1,
							       path = F2,
							       statuses = F3},
				  Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    if F3 == [] -> B2;
       true ->
	   'e_field_mesos.v1.HealthCheck.HTTP_statuses'(F3, B2)
    end.

'e_msg_mesos.v1.HealthCheck'(Msg) ->
    'e_msg_mesos.v1.HealthCheck'(Msg, <<>>).


'e_msg_mesos.v1.HealthCheck'(#'mesos.v1.HealthCheck'{http
							 = F1,
						     delay_seconds = F2,
						     interval_seconds = F3,
						     timeout_seconds = F4,
						     consecutive_failures = F5,
						     grace_period_seconds = F6,
						     command = F7},
			     Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		'e_mfield_mesos.v1.HealthCheck_http'(F1,
						     <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_double(F2, <<B1/binary, 17>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_double(F3, <<B2/binary, 25>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_double(F4, <<B3/binary, 33>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_varint(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_double(F6, <<B5/binary, 49>>)
	 end,
    if F7 == undefined -> B6;
       true ->
	   'e_mfield_mesos.v1.HealthCheck_command'(F7,
						   <<B6/binary, 58>>)
    end.

'e_msg_mesos.v1.FrameworkID'(Msg) ->
    'e_msg_mesos.v1.FrameworkID'(Msg, <<>>).


'e_msg_mesos.v1.FrameworkID'(#'mesos.v1.FrameworkID'{value
							 = F1},
			     Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

'e_msg_mesos.v1.ExecutorInfo'(Msg) ->
    'e_msg_mesos.v1.ExecutorInfo'(Msg, <<>>).


'e_msg_mesos.v1.ExecutorInfo'(#'mesos.v1.ExecutorInfo'{executor_id
							   = F1,
						       framework_id = F2,
						       command = F3,
						       container = F4,
						       resources = F5,
						       name = F6, source = F7,
						       data = F8,
						       discovery = F9},
			      Bin) ->
    B1 = 'e_mfield_mesos.v1.ExecutorInfo_executor_id'(F1,
						      <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true ->
		'e_mfield_mesos.v1.ExecutorInfo_framework_id'(F2,
							      <<B1/binary, 66>>)
	 end,
    B3 = 'e_mfield_mesos.v1.ExecutorInfo_command'(F3,
						  <<B2/binary, 58>>),
    B4 = if F4 == undefined -> B3;
	    true ->
		'e_mfield_mesos.v1.ExecutorInfo_container'(F4,
							   <<B3/binary, 90>>)
	 end,
    B5 = if F5 == [] -> B4;
	    true ->
		'e_field_mesos.v1.ExecutorInfo_resources'(F5, B4)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_string(F6, <<B5/binary, 74>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_string(F7, <<B6/binary, 82>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_bytes(F8, <<B7/binary, 34>>)
	 end,
    if F9 == undefined -> B8;
       true ->
	   'e_mfield_mesos.v1.ExecutorInfo_discovery'(F9,
						      <<B8/binary, 98>>)
    end.

'e_msg_mesos.v1.TaskInfo'(Msg) ->
    'e_msg_mesos.v1.TaskInfo'(Msg, <<>>).


'e_msg_mesos.v1.TaskInfo'(#'mesos.v1.TaskInfo'{name =
						   F1,
					       task_id = F2, agent_id = F3,
					       resources = F4, executor = F5,
					       command = F6, container = F7,
					       data = F8, health_check = F9,
					       labels = F10, discovery = F11},
			  Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = 'e_mfield_mesos.v1.TaskInfo_task_id'(F2,
					      <<B1/binary, 18>>),
    B3 = 'e_mfield_mesos.v1.TaskInfo_agent_id'(F3,
					       <<B2/binary, 26>>),
    B4 = if F4 == [] -> B3;
	    true -> 'e_field_mesos.v1.TaskInfo_resources'(F4, B3)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		'e_mfield_mesos.v1.TaskInfo_executor'(F5,
						      <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		'e_mfield_mesos.v1.TaskInfo_command'(F6,
						     <<B5/binary, 58>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		'e_mfield_mesos.v1.TaskInfo_container'(F7,
						       <<B6/binary, 74>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_bytes(F8, <<B7/binary, 50>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		'e_mfield_mesos.v1.TaskInfo_health_check'(F9,
							  <<B8/binary, 66>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 'e_mfield_mesos.v1.TaskInfo_labels'(F10,
						     <<B9/binary, 82>>)
	  end,
    if F11 == undefined -> B10;
       true ->
	   'e_mfield_mesos.v1.TaskInfo_discovery'(F11,
						  <<B10/binary, 90>>)
    end.

'e_msg_mesos.v1.Offer.Operation.Launch'(Msg) ->
    'e_msg_mesos.v1.Offer.Operation.Launch'(Msg, <<>>).


'e_msg_mesos.v1.Offer.Operation.Launch'(#'mesos.v1.Offer.Operation.Launch'{task_infos
									       =
									       F1},
					Bin) ->
    if F1 == [] -> Bin;
       true ->
	   'e_field_mesos.v1.Offer.Operation.Launch_task_infos'(F1,
								Bin)
    end.

'e_msg_mesos.v1.Offer.Operation'(Msg) ->
    'e_msg_mesos.v1.Offer.Operation'(Msg, <<>>).


'e_msg_mesos.v1.Offer.Operation'(#'mesos.v1.Offer.Operation'{type
								 = F1,
							     launch = F2,
							     reserve = F3,
							     unreserve = F4,
							     create = F5,
							     destroy = F6},
				 Bin) ->
    B1 = 'e_enum_mesos.v1.Offer.Operation.Type'(F1,
						<<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true ->
		'e_mfield_mesos.v1.Offer.Operation_launch'(F2,
							   <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		'e_mfield_mesos.v1.Offer.Operation_reserve'(F3,
							    <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		'e_mfield_mesos.v1.Offer.Operation_unreserve'(F4,
							      <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		'e_mfield_mesos.v1.Offer.Operation_create'(F5,
							   <<B4/binary, 42>>)
	 end,
    if F6 == undefined -> B5;
       true ->
	   'e_mfield_mesos.v1.Offer.Operation_destroy'(F6,
						       <<B5/binary, 50>>)
    end.

'e_msg_mesos.v1.scheduler.Call.Accept'(Msg) ->
    'e_msg_mesos.v1.scheduler.Call.Accept'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Call.Accept'(#'mesos.v1.scheduler.Call.Accept'{offer_ids
									     =
									     F1,
									 operations
									     =
									     F2,
									 filters
									     =
									     F3},
				       Bin) ->
    B1 = if F1 == [] -> Bin;
	    true ->
		'e_field_mesos.v1.scheduler.Call.Accept_offer_ids'(F1,
								   Bin)
	 end,
    B2 = if F2 == [] -> B1;
	    true ->
		'e_field_mesos.v1.scheduler.Call.Accept_operations'(F2,
								    B1)
	 end,
    if F3 == undefined -> B2;
       true ->
	   'e_mfield_mesos.v1.scheduler.Call.Accept_filters'(F3,
							     <<B2/binary, 26>>)
    end.

'e_msg_mesos.v1.FrameworkInfo.Capability'(Msg) ->
    'e_msg_mesos.v1.FrameworkInfo.Capability'(Msg, <<>>).


'e_msg_mesos.v1.FrameworkInfo.Capability'(#'mesos.v1.FrameworkInfo.Capability'{type
										   =
										   F1},
					  Bin) ->
    'e_enum_mesos.v1.FrameworkInfo.Capability.Type'(F1,
						    <<Bin/binary, 8>>).

'e_msg_mesos.v1.FrameworkInfo'(Msg) ->
    'e_msg_mesos.v1.FrameworkInfo'(Msg, <<>>).


'e_msg_mesos.v1.FrameworkInfo'(#'mesos.v1.FrameworkInfo'{user
							     = F1,
							 name = F2, id = F3,
							 failover_timeout = F4,
							 checkpoint = F5,
							 role = F6,
							 hostname = F7,
							 principal = F8,
							 webui_url = F9,
							 capabilities = F10},
			       Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_type_string(F2, <<B1/binary, 18>>),
    B3 = if F3 == undefined -> B2;
	    true ->
		'e_mfield_mesos.v1.FrameworkInfo_id'(F3,
						     <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_double(F4, <<B3/binary, 33>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_bool(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_string(F6, <<B5/binary, 50>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_string(F7, <<B6/binary, 58>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_string(F8, <<B7/binary, 66>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_string(F9, <<B8/binary, 74>>)
	 end,
    if F10 == [] -> B9;
       true ->
	   'e_field_mesos.v1.FrameworkInfo_capabilities'(F10, B9)
    end.

'e_msg_mesos.v1.scheduler.Call.Subscribe'(Msg) ->
    'e_msg_mesos.v1.scheduler.Call.Subscribe'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Call.Subscribe'(#'mesos.v1.scheduler.Call.Subscribe'{framework_info
										   =
										   F1,
									       force
										   =
										   F2},
					  Bin) ->
    B1 =
	'e_mfield_mesos.v1.scheduler.Call.Subscribe_framework_info'(F1,
								    <<Bin/binary,
								      10>>),
    if F2 == undefined -> B1;
       true -> e_type_bool(F2, <<B1/binary, 16>>)
    end.

'e_msg_mesos.v1.scheduler.Call'(Msg) ->
    'e_msg_mesos.v1.scheduler.Call'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Call'(#'mesos.v1.scheduler.Call'{framework_id
							       = F1,
							   type = F2,
							   subscribe = F3,
							   accept = F4,
							   decline = F5,
							   kill = F6,
							   shutdown = F7,
							   acknowledge = F8,
							   reconcile = F9,
							   message = F10,
							   request = F11},
				Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		'e_mfield_mesos.v1.scheduler.Call_framework_id'(F1,
								<<Bin/binary,
								  10>>)
	 end,
    B2 = 'e_enum_mesos.v1.scheduler.Call.Type'(F2,
					       <<B1/binary, 16>>),
    B3 = if F3 == undefined -> B2;
	    true ->
		'e_mfield_mesos.v1.scheduler.Call_subscribe'(F3,
							     <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		'e_mfield_mesos.v1.scheduler.Call_accept'(F4,
							  <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		'e_mfield_mesos.v1.scheduler.Call_decline'(F5,
							   <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		'e_mfield_mesos.v1.scheduler.Call_kill'(F6,
							<<B5/binary, 50>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		'e_mfield_mesos.v1.scheduler.Call_shutdown'(F7,
							    <<B6/binary, 58>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		'e_mfield_mesos.v1.scheduler.Call_acknowledge'(F8,
							       <<B7/binary,
								 66>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		'e_mfield_mesos.v1.scheduler.Call_reconcile'(F9,
							     <<B8/binary, 74>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 'e_mfield_mesos.v1.scheduler.Call_message'(F10,
							    <<B9/binary, 82>>)
	  end,
    if F11 == undefined -> B10;
       true ->
	   'e_mfield_mesos.v1.scheduler.Call_request'(F11,
						      <<B10/binary, 90>>)
    end.

'e_msg_mesos.v1.RateLimit'(Msg) ->
    'e_msg_mesos.v1.RateLimit'(Msg, <<>>).


'e_msg_mesos.v1.RateLimit'(#'mesos.v1.RateLimit'{qps =
						     F1,
						 principal = F2, capacity = F3},
			   Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_double(F1, <<Bin/binary, 9>>)
	 end,
    B2 = e_type_string(F2, <<B1/binary, 18>>),
    if F3 == undefined -> B2;
       true -> e_varint(F3, <<B2/binary, 24>>)
    end.

'e_msg_mesos.v1.RateLimits'(Msg) ->
    'e_msg_mesos.v1.RateLimits'(Msg, <<>>).


'e_msg_mesos.v1.RateLimits'(#'mesos.v1.RateLimits'{limits
						       = F1,
						   aggregate_default_qps = F2,
						   aggregate_default_capacity =
						       F3},
			    Bin) ->
    B1 = if F1 == [] -> Bin;
	    true -> 'e_field_mesos.v1.RateLimits_limits'(F1, Bin)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_double(F2, <<B1/binary, 17>>)
	 end,
    if F3 == undefined -> B2;
       true -> e_varint(F3, <<B2/binary, 24>>)
    end.

'e_msg_mesos.v1.Parameters'(Msg) ->
    'e_msg_mesos.v1.Parameters'(Msg, <<>>).


'e_msg_mesos.v1.Parameters'(#'mesos.v1.Parameters'{parameter
						       = F1},
			    Bin) ->
    if F1 == [] -> Bin;
       true -> 'e_field_mesos.v1.Parameters_parameter'(F1, Bin)
    end.

'e_msg_mesos.v1.Address'(Msg) ->
    'e_msg_mesos.v1.Address'(Msg, <<>>).


'e_msg_mesos.v1.Address'(#'mesos.v1.Address'{hostname =
						 F1,
					     ip = F2, port = F3},
			 Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    e_type_int32(F3, <<B2/binary, 24>>).

'e_msg_mesos.v1.URL'(Msg) ->
    'e_msg_mesos.v1.URL'(Msg, <<>>).


'e_msg_mesos.v1.URL'(#'mesos.v1.URL'{scheme = F1,
				     address = F2, path = F3, query = F4,
				     fragment = F5},
		     Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = 'e_mfield_mesos.v1.URL_address'(F2,
					 <<B1/binary, 18>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_type_string(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == [] -> B3;
	    true -> 'e_field_mesos.v1.URL_query'(F4, B3)
	 end,
    if F5 == undefined -> B4;
       true -> e_type_string(F5, <<B4/binary, 42>>)
    end.

'e_msg_mesos.v1.Offer'(Msg) ->
    'e_msg_mesos.v1.Offer'(Msg, <<>>).


'e_msg_mesos.v1.Offer'(#'mesos.v1.Offer'{id = F1,
					 framework_id = F2, agent_id = F3,
					 hostname = F4, url = F5,
					 resources = F6, attributes = F7,
					 executor_ids = F8},
		       Bin) ->
    B1 = 'e_mfield_mesos.v1.Offer_id'(F1,
				      <<Bin/binary, 10>>),
    B2 = 'e_mfield_mesos.v1.Offer_framework_id'(F2,
						<<B1/binary, 18>>),
    B3 = 'e_mfield_mesos.v1.Offer_agent_id'(F3,
					    <<B2/binary, 26>>),
    B4 = e_type_string(F4, <<B3/binary, 34>>),
    B5 = if F5 == undefined -> B4;
	    true ->
		'e_mfield_mesos.v1.Offer_url'(F5, <<B4/binary, 66>>)
	 end,
    B6 = if F6 == [] -> B5;
	    true -> 'e_field_mesos.v1.Offer_resources'(F6, B5)
	 end,
    B7 = if F7 == [] -> B6;
	    true -> 'e_field_mesos.v1.Offer_attributes'(F7, B6)
	 end,
    if F8 == [] -> B7;
       true -> 'e_field_mesos.v1.Offer_executor_ids'(F8, B7)
    end.

'e_msg_mesos.v1.Credential'(Msg) ->
    'e_msg_mesos.v1.Credential'(Msg, <<>>).


'e_msg_mesos.v1.Credential'(#'mesos.v1.Credential'{principal
						       = F1,
						   secret = F2},
			    Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_type_bytes(F2, <<B1/binary, 18>>)
    end.

'e_msg_mesos.v1.ACL.Entity'(Msg) ->
    'e_msg_mesos.v1.ACL.Entity'(Msg, <<>>).


'e_msg_mesos.v1.ACL.Entity'(#'mesos.v1.ACL.Entity'{type
						       = F1,
						   values = F2},
			    Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		'e_enum_mesos.v1.ACL.Entity.Type'(F1, <<Bin/binary, 8>>)
	 end,
    if F2 == [] -> B1;
       true -> 'e_field_mesos.v1.ACL.Entity_values'(F2, B1)
    end.

'e_msg_mesos.v1.TaskStatus'(Msg) ->
    'e_msg_mesos.v1.TaskStatus'(Msg, <<>>).


'e_msg_mesos.v1.TaskStatus'(#'mesos.v1.TaskStatus'{task_id
						       = F1,
						   state = F2, message = F3,
						   source = F4, reason = F5,
						   data = F6, agent_id = F7,
						   executor_id = F8,
						   timestamp = F9, uuid = F10,
						   healthy = F11, labels = F12},
			    Bin) ->
    B1 = 'e_mfield_mesos.v1.TaskStatus_task_id'(F1,
						<<Bin/binary, 10>>),
    B2 = 'e_enum_mesos.v1.TaskState'(F2, <<B1/binary, 16>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_type_string(F3, <<B2/binary, 34>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		'e_enum_mesos.v1.TaskStatus.Source'(F4,
						    <<B3/binary, 72>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		'e_enum_mesos.v1.TaskStatus.Reason'(F5,
						    <<B4/binary, 80>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_bytes(F6, <<B5/binary, 26>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		'e_mfield_mesos.v1.TaskStatus_agent_id'(F7,
							<<B6/binary, 42>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		'e_mfield_mesos.v1.TaskStatus_executor_id'(F8,
							   <<B7/binary, 58>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_double(F9, <<B8/binary, 49>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_type_bytes(F10, <<B9/binary, 90>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_type_bool(F11, <<B10/binary, 64>>)
	  end,
    if F12 == undefined -> B11;
       true ->
	   'e_mfield_mesos.v1.TaskStatus_labels'(F12,
						 <<B11/binary, 98>>)
    end.

'e_msg_mesos.v1.scheduler.Event.Update'(Msg) ->
    'e_msg_mesos.v1.scheduler.Event.Update'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Event.Update'(#'mesos.v1.scheduler.Event.Update'{status
									       =
									       F1},
					Bin) ->
    'e_mfield_mesos.v1.scheduler.Event.Update_status'(F1,
						      <<Bin/binary, 10>>).

'e_msg_mesos.v1.scheduler.Event.Error'(Msg) ->
    'e_msg_mesos.v1.scheduler.Event.Error'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Event.Error'(#'mesos.v1.scheduler.Event.Error'{message
									     =
									     F1},
				       Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

'e_msg_mesos.v1.scheduler.Event.Failure'(Msg) ->
    'e_msg_mesos.v1.scheduler.Event.Failure'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Event.Failure'(#'mesos.v1.scheduler.Event.Failure'{agent_id
										 =
										 F1,
									     executor_id
										 =
										 F2,
									     status
										 =
										 F3},
					 Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		'e_mfield_mesos.v1.scheduler.Event.Failure_agent_id'(F1,
								     <<Bin/binary,
								       10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		'e_mfield_mesos.v1.scheduler.Event.Failure_executor_id'(F2,
									<<B1/binary,
									  18>>)
	 end,
    if F3 == undefined -> B2;
       true -> e_type_int32(F3, <<B2/binary, 24>>)
    end.

'e_msg_mesos.v1.scheduler.Event.Message'(Msg) ->
    'e_msg_mesos.v1.scheduler.Event.Message'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Event.Message'(#'mesos.v1.scheduler.Event.Message'{agent_id
										 =
										 F1,
									     executor_id
										 =
										 F2,
									     data
										 =
										 F3},
					 Bin) ->
    B1 =
	'e_mfield_mesos.v1.scheduler.Event.Message_agent_id'(F1,
							     <<Bin/binary,
							       10>>),
    B2 =
	'e_mfield_mesos.v1.scheduler.Event.Message_executor_id'(F2,
								<<B1/binary,
								  18>>),
    e_type_bytes(F3, <<B2/binary, 26>>).

'e_msg_mesos.v1.scheduler.Event.Rescind'(Msg) ->
    'e_msg_mesos.v1.scheduler.Event.Rescind'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Event.Rescind'(#'mesos.v1.scheduler.Event.Rescind'{offer_id
										 =
										 F1},
					 Bin) ->
    'e_mfield_mesos.v1.scheduler.Event.Rescind_offer_id'(F1,
							 <<Bin/binary, 10>>).

'e_msg_mesos.v1.scheduler.Event.Offers'(Msg) ->
    'e_msg_mesos.v1.scheduler.Event.Offers'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Event.Offers'(#'mesos.v1.scheduler.Event.Offers'{offers
									       =
									       F1},
					Bin) ->
    if F1 == [] -> Bin;
       true ->
	   'e_field_mesos.v1.scheduler.Event.Offers_offers'(F1,
							    Bin)
    end.

'e_msg_mesos.v1.scheduler.Event.Subscribed'(Msg) ->
    'e_msg_mesos.v1.scheduler.Event.Subscribed'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Event.Subscribed'(#'mesos.v1.scheduler.Event.Subscribed'{framework_id
										       =
										       F1,
										   heartbeat_interval_seconds
										       =
										       F2},
					    Bin) ->
    B1 =
	'e_mfield_mesos.v1.scheduler.Event.Subscribed_framework_id'(F1,
								    <<Bin/binary,
								      10>>),
    if F2 == undefined -> B1;
       true -> e_type_double(F2, <<B1/binary, 17>>)
    end.

'e_msg_mesos.v1.scheduler.Event'(Msg) ->
    'e_msg_mesos.v1.scheduler.Event'(Msg, <<>>).


'e_msg_mesos.v1.scheduler.Event'(#'mesos.v1.scheduler.Event'{type
								 = F1,
							     subscribed = F2,
							     offers = F3,
							     rescind = F4,
							     update = F5,
							     message = F6,
							     failure = F7,
							     error = F8},
				 Bin) ->
    B1 = 'e_enum_mesos.v1.scheduler.Event.Type'(F1,
						<<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true ->
		'e_mfield_mesos.v1.scheduler.Event_subscribed'(F2,
							       <<B1/binary,
								 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		'e_mfield_mesos.v1.scheduler.Event_offers'(F3,
							   <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		'e_mfield_mesos.v1.scheduler.Event_rescind'(F4,
							    <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		'e_mfield_mesos.v1.scheduler.Event_update'(F5,
							   <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		'e_mfield_mesos.v1.scheduler.Event_message'(F6,
							    <<B5/binary, 50>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		'e_mfield_mesos.v1.scheduler.Event_failure'(F7,
							    <<B6/binary, 58>>)
	 end,
    if F8 == undefined -> B7;
       true ->
	   'e_mfield_mesos.v1.scheduler.Event_error'(F8,
						     <<B7/binary, 66>>)
    end.

'e_msg_mesos.v1.TrafficControlStatistics'(Msg) ->
    'e_msg_mesos.v1.TrafficControlStatistics'(Msg, <<>>).


'e_msg_mesos.v1.TrafficControlStatistics'(#'mesos.v1.TrafficControlStatistics'{id
										   =
										   F1,
									       backlog
										   =
										   F2,
									       bytes
										   =
										   F3,
									       drops
										   =
										   F4,
									       overlimits
										   =
										   F5,
									       packets
										   =
										   F6,
									       qlen
										   =
										   F7,
									       ratebps
										   =
										   F8,
									       ratepps
										   =
										   F9,
									       requeues
										   =
										   F10},
					  Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_varint(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_varint(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_varint(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_varint(F6, <<B5/binary, 48>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_varint(F7, <<B6/binary, 56>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_varint(F8, <<B7/binary, 64>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_varint(F9, <<B8/binary, 72>>)
	 end,
    if F10 == undefined -> B9;
       true -> e_varint(F10, <<B9/binary, 80>>)
    end.

'e_msg_mesos.v1.PerfStatistics'(Msg) ->
    'e_msg_mesos.v1.PerfStatistics'(Msg, <<>>).


'e_msg_mesos.v1.PerfStatistics'(#'mesos.v1.PerfStatistics'{timestamp
							       = F1,
							   duration = F2,
							   cycles = F3,
							   stalled_cycles_frontend
							       = F4,
							   stalled_cycles_backend
							       = F5,
							   instructions = F6,
							   cache_references =
							       F7,
							   cache_misses = F8,
							   branches = F9,
							   branch_misses = F10,
							   bus_cycles = F11,
							   ref_cycles = F12,
							   cpu_clock = F13,
							   task_clock = F14,
							   page_faults = F15,
							   minor_faults = F16,
							   major_faults = F17,
							   context_switches =
							       F18,
							   cpu_migrations = F19,
							   alignment_faults =
							       F20,
							   emulation_faults =
							       F21,
							   l1_dcache_loads =
							       F22,
							   l1_dcache_load_misses
							       = F23,
							   l1_dcache_stores =
							       F24,
							   l1_dcache_store_misses
							       = F25,
							   l1_dcache_prefetches
							       = F26,
							   l1_dcache_prefetch_misses
							       = F27,
							   l1_icache_loads =
							       F28,
							   l1_icache_load_misses
							       = F29,
							   l1_icache_prefetches
							       = F30,
							   l1_icache_prefetch_misses
							       = F31,
							   llc_loads = F32,
							   llc_load_misses =
							       F33,
							   llc_stores = F34,
							   llc_store_misses =
							       F35,
							   llc_prefetches = F36,
							   llc_prefetch_misses =
							       F37,
							   dtlb_loads = F38,
							   dtlb_load_misses =
							       F39,
							   dtlb_stores = F40,
							   dtlb_store_misses =
							       F41,
							   dtlb_prefetches =
							       F42,
							   dtlb_prefetch_misses
							       = F43,
							   itlb_loads = F44,
							   itlb_load_misses =
							       F45,
							   branch_loads = F46,
							   branch_load_misses =
							       F47,
							   node_loads = F48,
							   node_load_misses =
							       F49,
							   node_stores = F50,
							   node_store_misses =
							       F51,
							   node_prefetches =
							       F52,
							   node_prefetch_misses
							       = F53},
				Bin) ->
    B1 = e_type_double(F1, <<Bin/binary, 9>>),
    B2 = e_type_double(F2, <<B1/binary, 17>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_varint(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_varint(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_varint(F6, <<B5/binary, 48>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_varint(F7, <<B6/binary, 56>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_varint(F8, <<B7/binary, 64>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_varint(F9, <<B8/binary, 72>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_varint(F10, <<B9/binary, 80>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_varint(F11, <<B10/binary, 88>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true -> e_varint(F12, <<B11/binary, 96>>)
	  end,
    B13 = if F13 == undefined -> B12;
	     true -> e_type_double(F13, <<B12/binary, 105>>)
	  end,
    B14 = if F14 == undefined -> B13;
	     true -> e_type_double(F14, <<B13/binary, 113>>)
	  end,
    B15 = if F15 == undefined -> B14;
	     true -> e_varint(F15, <<B14/binary, 120>>)
	  end,
    B16 = if F16 == undefined -> B15;
	     true -> e_varint(F16, <<B15/binary, 128, 1>>)
	  end,
    B17 = if F17 == undefined -> B16;
	     true -> e_varint(F17, <<B16/binary, 136, 1>>)
	  end,
    B18 = if F18 == undefined -> B17;
	     true -> e_varint(F18, <<B17/binary, 144, 1>>)
	  end,
    B19 = if F19 == undefined -> B18;
	     true -> e_varint(F19, <<B18/binary, 152, 1>>)
	  end,
    B20 = if F20 == undefined -> B19;
	     true -> e_varint(F20, <<B19/binary, 160, 1>>)
	  end,
    B21 = if F21 == undefined -> B20;
	     true -> e_varint(F21, <<B20/binary, 168, 1>>)
	  end,
    B22 = if F22 == undefined -> B21;
	     true -> e_varint(F22, <<B21/binary, 176, 1>>)
	  end,
    B23 = if F23 == undefined -> B22;
	     true -> e_varint(F23, <<B22/binary, 184, 1>>)
	  end,
    B24 = if F24 == undefined -> B23;
	     true -> e_varint(F24, <<B23/binary, 192, 1>>)
	  end,
    B25 = if F25 == undefined -> B24;
	     true -> e_varint(F25, <<B24/binary, 200, 1>>)
	  end,
    B26 = if F26 == undefined -> B25;
	     true -> e_varint(F26, <<B25/binary, 208, 1>>)
	  end,
    B27 = if F27 == undefined -> B26;
	     true -> e_varint(F27, <<B26/binary, 216, 1>>)
	  end,
    B28 = if F28 == undefined -> B27;
	     true -> e_varint(F28, <<B27/binary, 224, 1>>)
	  end,
    B29 = if F29 == undefined -> B28;
	     true -> e_varint(F29, <<B28/binary, 232, 1>>)
	  end,
    B30 = if F30 == undefined -> B29;
	     true -> e_varint(F30, <<B29/binary, 240, 1>>)
	  end,
    B31 = if F31 == undefined -> B30;
	     true -> e_varint(F31, <<B30/binary, 248, 1>>)
	  end,
    B32 = if F32 == undefined -> B31;
	     true -> e_varint(F32, <<B31/binary, 128, 2>>)
	  end,
    B33 = if F33 == undefined -> B32;
	     true -> e_varint(F33, <<B32/binary, 136, 2>>)
	  end,
    B34 = if F34 == undefined -> B33;
	     true -> e_varint(F34, <<B33/binary, 144, 2>>)
	  end,
    B35 = if F35 == undefined -> B34;
	     true -> e_varint(F35, <<B34/binary, 152, 2>>)
	  end,
    B36 = if F36 == undefined -> B35;
	     true -> e_varint(F36, <<B35/binary, 160, 2>>)
	  end,
    B37 = if F37 == undefined -> B36;
	     true -> e_varint(F37, <<B36/binary, 168, 2>>)
	  end,
    B38 = if F38 == undefined -> B37;
	     true -> e_varint(F38, <<B37/binary, 176, 2>>)
	  end,
    B39 = if F39 == undefined -> B38;
	     true -> e_varint(F39, <<B38/binary, 184, 2>>)
	  end,
    B40 = if F40 == undefined -> B39;
	     true -> e_varint(F40, <<B39/binary, 192, 2>>)
	  end,
    B41 = if F41 == undefined -> B40;
	     true -> e_varint(F41, <<B40/binary, 200, 2>>)
	  end,
    B42 = if F42 == undefined -> B41;
	     true -> e_varint(F42, <<B41/binary, 208, 2>>)
	  end,
    B43 = if F43 == undefined -> B42;
	     true -> e_varint(F43, <<B42/binary, 216, 2>>)
	  end,
    B44 = if F44 == undefined -> B43;
	     true -> e_varint(F44, <<B43/binary, 224, 2>>)
	  end,
    B45 = if F45 == undefined -> B44;
	     true -> e_varint(F45, <<B44/binary, 232, 2>>)
	  end,
    B46 = if F46 == undefined -> B45;
	     true -> e_varint(F46, <<B45/binary, 240, 2>>)
	  end,
    B47 = if F47 == undefined -> B46;
	     true -> e_varint(F47, <<B46/binary, 248, 2>>)
	  end,
    B48 = if F48 == undefined -> B47;
	     true -> e_varint(F48, <<B47/binary, 128, 3>>)
	  end,
    B49 = if F49 == undefined -> B48;
	     true -> e_varint(F49, <<B48/binary, 136, 3>>)
	  end,
    B50 = if F50 == undefined -> B49;
	     true -> e_varint(F50, <<B49/binary, 144, 3>>)
	  end,
    B51 = if F51 == undefined -> B50;
	     true -> e_varint(F51, <<B50/binary, 152, 3>>)
	  end,
    B52 = if F52 == undefined -> B51;
	     true -> e_varint(F52, <<B51/binary, 160, 3>>)
	  end,
    if F53 == undefined -> B52;
       true -> e_varint(F53, <<B52/binary, 168, 3>>)
    end.

'e_msg_mesos.v1.ResourceStatistics'(Msg) ->
    'e_msg_mesos.v1.ResourceStatistics'(Msg, <<>>).


'e_msg_mesos.v1.ResourceStatistics'(#'mesos.v1.ResourceStatistics'{timestamp
								       = F1,
								   processes =
								       F2,
								   threads = F3,
								   cpus_user_time_secs
								       = F4,
								   cpus_system_time_secs
								       = F5,
								   cpus_limit =
								       F6,
								   cpus_nr_periods
								       = F7,
								   cpus_nr_throttled
								       = F8,
								   cpus_throttled_time_secs
								       = F9,
								   mem_total_bytes
								       = F10,
								   mem_total_memsw_bytes
								       = F11,
								   mem_limit_bytes
								       = F12,
								   mem_soft_limit_bytes
								       = F13,
								   mem_file_bytes
								       = F14,
								   mem_anon_bytes
								       = F15,
								   mem_cache_bytes
								       = F16,
								   mem_rss_bytes
								       = F17,
								   mem_mapped_file_bytes
								       = F18,
								   mem_swap_bytes
								       = F19,
								   mem_low_pressure_counter
								       = F20,
								   mem_medium_pressure_counter
								       = F21,
								   mem_critical_pressure_counter
								       = F22,
								   disk_limit_bytes
								       = F23,
								   disk_used_bytes
								       = F24,
								   perf = F25,
								   net_rx_packets
								       = F26,
								   net_rx_bytes
								       = F27,
								   net_rx_errors
								       = F28,
								   net_rx_dropped
								       = F29,
								   net_tx_packets
								       = F30,
								   net_tx_bytes
								       = F31,
								   net_tx_errors
								       = F32,
								   net_tx_dropped
								       = F33,
								   net_tcp_rtt_microsecs_p50
								       = F34,
								   net_tcp_rtt_microsecs_p90
								       = F35,
								   net_tcp_rtt_microsecs_p95
								       = F36,
								   net_tcp_rtt_microsecs_p99
								       = F37,
								   net_tcp_active_connections
								       = F38,
								   net_tcp_time_wait_connections
								       = F39,
								   net_traffic_control_statistics
								       = F40},
				    Bin) ->
    B1 = e_type_double(F1, <<Bin/binary, 9>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_varint(F2, <<B1/binary, 240, 1>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 248, 1>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_double(F4, <<B3/binary, 17>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_double(F5, <<B4/binary, 25>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_double(F6, <<B5/binary, 33>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_varint(F7, <<B6/binary, 56>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_varint(F8, <<B7/binary, 64>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_double(F9, <<B8/binary, 73>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_varint(F10, <<B9/binary, 160, 2>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_varint(F11, <<B10/binary, 168, 2>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true -> e_varint(F12, <<B11/binary, 48>>)
	  end,
    B13 = if F13 == undefined -> B12;
	     true -> e_varint(F13, <<B12/binary, 176, 2>>)
	  end,
    B14 = if F14 == undefined -> B13;
	     true -> e_varint(F14, <<B13/binary, 80>>)
	  end,
    B15 = if F15 == undefined -> B14;
	     true -> e_varint(F15, <<B14/binary, 88>>)
	  end,
    B16 = if F16 == undefined -> B15;
	     true -> e_varint(F16, <<B15/binary, 184, 2>>)
	  end,
    B17 = if F17 == undefined -> B16;
	     true -> e_varint(F17, <<B16/binary, 40>>)
	  end,
    B18 = if F18 == undefined -> B17;
	     true -> e_varint(F18, <<B17/binary, 96>>)
	  end,
    B19 = if F19 == undefined -> B18;
	     true -> e_varint(F19, <<B18/binary, 192, 2>>)
	  end,
    B20 = if F20 == undefined -> B19;
	     true -> e_varint(F20, <<B19/binary, 128, 2>>)
	  end,
    B21 = if F21 == undefined -> B20;
	     true -> e_varint(F21, <<B20/binary, 136, 2>>)
	  end,
    B22 = if F22 == undefined -> B21;
	     true -> e_varint(F22, <<B21/binary, 144, 2>>)
	  end,
    B23 = if F23 == undefined -> B22;
	     true -> e_varint(F23, <<B22/binary, 208, 1>>)
	  end,
    B24 = if F24 == undefined -> B23;
	     true -> e_varint(F24, <<B23/binary, 216, 1>>)
	  end,
    B25 = if F25 == undefined -> B24;
	     true ->
		 'e_mfield_mesos.v1.ResourceStatistics_perf'(F25,
							     <<B24/binary,
							       106>>)
	  end,
    B26 = if F26 == undefined -> B25;
	     true -> e_varint(F26, <<B25/binary, 112>>)
	  end,
    B27 = if F27 == undefined -> B26;
	     true -> e_varint(F27, <<B26/binary, 120>>)
	  end,
    B28 = if F28 == undefined -> B27;
	     true -> e_varint(F28, <<B27/binary, 128, 1>>)
	  end,
    B29 = if F29 == undefined -> B28;
	     true -> e_varint(F29, <<B28/binary, 136, 1>>)
	  end,
    B30 = if F30 == undefined -> B29;
	     true -> e_varint(F30, <<B29/binary, 144, 1>>)
	  end,
    B31 = if F31 == undefined -> B30;
	     true -> e_varint(F31, <<B30/binary, 152, 1>>)
	  end,
    B32 = if F32 == undefined -> B31;
	     true -> e_varint(F32, <<B31/binary, 160, 1>>)
	  end,
    B33 = if F33 == undefined -> B32;
	     true -> e_varint(F33, <<B32/binary, 168, 1>>)
	  end,
    B34 = if F34 == undefined -> B33;
	     true -> e_type_double(F34, <<B33/binary, 177, 1>>)
	  end,
    B35 = if F35 == undefined -> B34;
	     true -> e_type_double(F35, <<B34/binary, 185, 1>>)
	  end,
    B36 = if F36 == undefined -> B35;
	     true -> e_type_double(F36, <<B35/binary, 193, 1>>)
	  end,
    B37 = if F37 == undefined -> B36;
	     true -> e_type_double(F37, <<B36/binary, 201, 1>>)
	  end,
    B38 = if F38 == undefined -> B37;
	     true -> e_type_double(F38, <<B37/binary, 225, 1>>)
	  end,
    B39 = if F39 == undefined -> B38;
	     true -> e_type_double(F39, <<B38/binary, 233, 1>>)
	  end,
    if F40 == [] -> B39;
       true ->
	   'e_field_mesos.v1.ResourceStatistics_net_traffic_control_statistics'(F40,
										B39)
    end.

'e_msg_mesos.v1.Credentials'(Msg) ->
    'e_msg_mesos.v1.Credentials'(Msg, <<>>).


'e_msg_mesos.v1.Credentials'(#'mesos.v1.Credentials'{credentials
							 = F1},
			     Bin) ->
    if F1 == [] -> Bin;
       true ->
	   'e_field_mesos.v1.Credentials_credentials'(F1, Bin)
    end.

'e_msg_mesos.v1.ResourceUsage.Executor'(Msg) ->
    'e_msg_mesos.v1.ResourceUsage.Executor'(Msg, <<>>).


'e_msg_mesos.v1.ResourceUsage.Executor'(#'mesos.v1.ResourceUsage.Executor'{executor_info
									       =
									       F1,
									   allocated
									       =
									       F2,
									   statistics
									       =
									       F3},
					Bin) ->
    B1 =
	'e_mfield_mesos.v1.ResourceUsage.Executor_executor_info'(F1,
								 <<Bin/binary,
								   10>>),
    B2 = if F2 == [] -> B1;
	    true ->
		'e_field_mesos.v1.ResourceUsage.Executor_allocated'(F2,
								    B1)
	 end,
    if F3 == undefined -> B2;
       true ->
	   'e_mfield_mesos.v1.ResourceUsage.Executor_statistics'(F3,
								 <<B2/binary,
								   26>>)
    end.

'e_msg_mesos.v1.ACL'(_Msg) -> <<>>.

'e_msg_mesos.v1.ACL.RunTask'(Msg) ->
    'e_msg_mesos.v1.ACL.RunTask'(Msg, <<>>).


'e_msg_mesos.v1.ACL.RunTask'(#'mesos.v1.ACL.RunTask'{principals
							 = F1,
						     users = F2},
			     Bin) ->
    B1 = 'e_mfield_mesos.v1.ACL.RunTask_principals'(F1,
						    <<Bin/binary, 10>>),
    'e_mfield_mesos.v1.ACL.RunTask_users'(F2,
					  <<B1/binary, 18>>).

'e_msg_mesos.v1.ACL.RegisterFramework'(Msg) ->
    'e_msg_mesos.v1.ACL.RegisterFramework'(Msg, <<>>).


'e_msg_mesos.v1.ACL.RegisterFramework'(#'mesos.v1.ACL.RegisterFramework'{principals
									     =
									     F1,
									 roles =
									     F2},
				       Bin) ->
    B1 =
	'e_mfield_mesos.v1.ACL.RegisterFramework_principals'(F1,
							     <<Bin/binary,
							       10>>),
    'e_mfield_mesos.v1.ACL.RegisterFramework_roles'(F2,
						    <<B1/binary, 18>>).

'e_msg_mesos.v1.ACL.ShutdownFramework'(Msg) ->
    'e_msg_mesos.v1.ACL.ShutdownFramework'(Msg, <<>>).


'e_msg_mesos.v1.ACL.ShutdownFramework'(#'mesos.v1.ACL.ShutdownFramework'{principals
									     =
									     F1,
									 framework_principals
									     =
									     F2},
				       Bin) ->
    B1 =
	'e_mfield_mesos.v1.ACL.ShutdownFramework_principals'(F1,
							     <<Bin/binary,
							       10>>),
    'e_mfield_mesos.v1.ACL.ShutdownFramework_framework_principals'(F2,
								   <<B1/binary,
								     18>>).

'e_msg_mesos.v1.ACLs'(Msg) ->
    'e_msg_mesos.v1.ACLs'(Msg, <<>>).


'e_msg_mesos.v1.ACLs'(#'mesos.v1.ACLs'{permissive = F1,
				       register_frameworks = F2, run_tasks = F3,
				       shutdown_frameworks = F4},
		      Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_bool(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == [] -> B1;
	    true ->
		'e_field_mesos.v1.ACLs_register_frameworks'(F2, B1)
	 end,
    B3 = if F3 == [] -> B2;
	    true -> 'e_field_mesos.v1.ACLs_run_tasks'(F3, B2)
	 end,
    if F4 == [] -> B3;
       true ->
	   'e_field_mesos.v1.ACLs_shutdown_frameworks'(F4, B3)
    end.

'e_msg_mesos.v1.MasterInfo'(Msg) ->
    'e_msg_mesos.v1.MasterInfo'(Msg, <<>>).


'e_msg_mesos.v1.MasterInfo'(#'mesos.v1.MasterInfo'{id =
						       F1,
						   ip = F2, port = F3, pid = F4,
						   hostname = F5, version = F6,
						   address = F7},
			    Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_varint(F2, <<B1/binary, 16>>),
    B3 = e_varint(F3, <<B2/binary, 24>>),
    B4 = if F4 == undefined -> B3;
	    true -> e_type_string(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_string(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_string(F6, <<B5/binary, 50>>)
	 end,
    if F7 == undefined -> B6;
       true ->
	   'e_mfield_mesos.v1.MasterInfo_address'(F7,
						  <<B6/binary, 58>>)
    end.

'e_msg_mesos.v1.ResourceUsage'(Msg) ->
    'e_msg_mesos.v1.ResourceUsage'(Msg, <<>>).


'e_msg_mesos.v1.ResourceUsage'(#'mesos.v1.ResourceUsage'{executors
							     = F1,
							 total = F2},
			       Bin) ->
    B1 = if F1 == [] -> Bin;
	    true ->
		'e_field_mesos.v1.ResourceUsage_executors'(F1, Bin)
	 end,
    if F2 == [] -> B1;
       true -> 'e_field_mesos.v1.ResourceUsage_total'(F2, B1)
    end.

'e_msg_mesos.v1.Value'(Msg) ->
    'e_msg_mesos.v1.Value'(Msg, <<>>).


'e_msg_mesos.v1.Value'(#'mesos.v1.Value'{type = F1,
					 scalar = F2, ranges = F3, set = F4,
					 text = F5},
		       Bin) ->
    B1 = 'e_enum_mesos.v1.Value.Type'(F1,
				      <<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true ->
		'e_mfield_mesos.v1.Value_scalar'(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		'e_mfield_mesos.v1.Value_ranges'(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		'e_mfield_mesos.v1.Value_set'(F4, <<B3/binary, 34>>)
	 end,
    if F5 == undefined -> B4;
       true ->
	   'e_mfield_mesos.v1.Value_text'(F5, <<B4/binary, 42>>)
    end.

'e_msg_mesos.v1.ContainerID'(Msg) ->
    'e_msg_mesos.v1.ContainerID'(Msg, <<>>).


'e_msg_mesos.v1.ContainerID'(#'mesos.v1.ContainerID'{value
							 = F1},
			     Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

'e_mfield_mesos.v1.Labels_labels'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Label'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Labels_labels'([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_mesos.v1.Labels_labels'(Elem, Bin2),
    'e_field_mesos.v1.Labels_labels'(Rest, Bin3);
'e_field_mesos.v1.Labels_labels'([], Bin) -> Bin.

'e_mfield_mesos.v1.Image.AppC_labels'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Labels'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Image_appc'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Image.AppC'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ContainerInfo.MesosInfo_image'(Msg,
						  Bin) ->
    SubBin = 'e_msg_mesos.v1.Image'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ContainerInfo.DockerInfo_port_mappings'(Msg,
							   Bin) ->
    SubBin =
	'e_msg_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Msg,
							      <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.ContainerInfo.DockerInfo_port_mappings'([Elem
							   | Rest],
							  Bin) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
	'e_mfield_mesos.v1.ContainerInfo.DockerInfo_port_mappings'(Elem,
								   Bin2),
    'e_field_mesos.v1.ContainerInfo.DockerInfo_port_mappings'(Rest,
							      Bin3);
'e_field_mesos.v1.ContainerInfo.DockerInfo_port_mappings'([],
							  Bin) ->
    Bin.

'e_mfield_mesos.v1.ContainerInfo.DockerInfo_parameters'(Msg,
							Bin) ->
    SubBin = 'e_msg_mesos.v1.Parameter'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.ContainerInfo.DockerInfo_parameters'([Elem
							| Rest],
						       Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 =
	'e_mfield_mesos.v1.ContainerInfo.DockerInfo_parameters'(Elem,
								Bin2),
    'e_field_mesos.v1.ContainerInfo.DockerInfo_parameters'(Rest,
							   Bin3);
'e_field_mesos.v1.ContainerInfo.DockerInfo_parameters'([],
						       Bin) ->
    Bin.

'e_mfield_mesos.v1.Volume_image'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Image'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ContainerInfo_volumes'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Volume'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.ContainerInfo_volumes'([Elem | Rest],
					 Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = 'e_mfield_mesos.v1.ContainerInfo_volumes'(Elem,
						     Bin2),
    'e_field_mesos.v1.ContainerInfo_volumes'(Rest, Bin3);
'e_field_mesos.v1.ContainerInfo_volumes'([], Bin) ->
    Bin.

'e_mfield_mesos.v1.ContainerInfo_docker'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.ContainerInfo.DockerInfo'(Msg,
						       <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ContainerInfo_mesos'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.ContainerInfo.MesosInfo'(Msg,
						      <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Value.Set_item'([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(Elem, Bin2),
    'e_field_mesos.v1.Value.Set_item'(Rest, Bin3);
'e_field_mesos.v1.Value.Set_item'([], Bin) -> Bin.

'e_mfield_mesos.v1.Value.Ranges_range'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Value.Range'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Value.Ranges_range'([Elem | Rest],
				      Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_mesos.v1.Value.Ranges_range'(Elem,
						  Bin2),
    'e_field_mesos.v1.Value.Ranges_range'(Rest, Bin3);
'e_field_mesos.v1.Value.Ranges_range'([], Bin) -> Bin.

'e_mfield_mesos.v1.Attribute_scalar'(Msg, Bin) ->
    Bin2 = <<Bin/binary, 9>>,
    'e_msg_mesos.v1.Value.Scalar'(Msg, Bin2).

'e_mfield_mesos.v1.Attribute_ranges'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Value.Ranges'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Attribute_set'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Value.Set'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Attribute_text'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Value.Text'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Resource.DiskInfo_persistence'(Msg,
						  Bin) ->
    SubBin =
	'e_msg_mesos.v1.Resource.DiskInfo.Persistence'(Msg,
						       <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Resource.DiskInfo_volume'(Msg,
					     Bin) ->
    SubBin = 'e_msg_mesos.v1.Volume'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Resource_scalar'(Msg, Bin) ->
    Bin2 = <<Bin/binary, 9>>,
    'e_msg_mesos.v1.Value.Scalar'(Msg, Bin2).

'e_mfield_mesos.v1.Resource_ranges'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Value.Ranges'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Resource_set'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Value.Set'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Resource_reservation'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Resource.ReservationInfo'(Msg,
						       <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Resource_disk'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Resource.DiskInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Resource_revocable'(_Msg, Bin) ->
    <<Bin/binary, 0>>.

'e_mfield_mesos.v1.AgentInfo_resources'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Resource'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.AgentInfo_resources'([Elem | Rest],
				       Bin) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = 'e_mfield_mesos.v1.AgentInfo_resources'(Elem,
						   Bin2),
    'e_field_mesos.v1.AgentInfo_resources'(Rest, Bin3);
'e_field_mesos.v1.AgentInfo_resources'([], Bin) -> Bin.

'e_mfield_mesos.v1.AgentInfo_attributes'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Attribute'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.AgentInfo_attributes'([Elem | Rest],
					Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = 'e_mfield_mesos.v1.AgentInfo_attributes'(Elem,
						    Bin2),
    'e_field_mesos.v1.AgentInfo_attributes'(Rest, Bin3);
'e_field_mesos.v1.AgentInfo_attributes'([], Bin) -> Bin.

'e_mfield_mesos.v1.AgentInfo_id'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.AgentID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Request_agent_id'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.AgentID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Request_resources'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Resource'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Request_resources'([Elem | Rest],
				     Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = 'e_mfield_mesos.v1.Request_resources'(Elem,
						 Bin2),
    'e_field_mesos.v1.Request_resources'(Rest, Bin3);
'e_field_mesos.v1.Request_resources'([], Bin) -> Bin.

'e_mfield_mesos.v1.scheduler.Call.Request_requests'(Msg,
						    Bin) ->
    SubBin = 'e_msg_mesos.v1.Request'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.scheduler.Call.Request_requests'([Elem
						    | Rest],
						   Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_mesos.v1.scheduler.Call.Request_requests'(Elem,
							    Bin2),
    'e_field_mesos.v1.scheduler.Call.Request_requests'(Rest,
						       Bin3);
'e_field_mesos.v1.scheduler.Call.Request_requests'([],
						   Bin) ->
    Bin.

'e_mfield_mesos.v1.scheduler.Call.Message_agent_id'(Msg,
						    Bin) ->
    SubBin = 'e_msg_mesos.v1.AgentID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call.Message_executor_id'(Msg,
						       Bin) ->
    SubBin = 'e_msg_mesos.v1.ExecutorID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call.Reconcile.Task_task_id'(Msg,
							  Bin) ->
    SubBin = 'e_msg_mesos.v1.TaskID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call.Reconcile.Task_agent_id'(Msg,
							   Bin) ->
    SubBin = 'e_msg_mesos.v1.AgentID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call.Reconcile_tasks'(Msg,
						   Bin) ->
    SubBin =
	'e_msg_mesos.v1.scheduler.Call.Reconcile.Task'(Msg,
						       <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.scheduler.Call.Reconcile_tasks'([Elem
						   | Rest],
						  Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_mesos.v1.scheduler.Call.Reconcile_tasks'(Elem,
							   Bin2),
    'e_field_mesos.v1.scheduler.Call.Reconcile_tasks'(Rest,
						      Bin3);
'e_field_mesos.v1.scheduler.Call.Reconcile_tasks'([],
						  Bin) ->
    Bin.

'e_mfield_mesos.v1.scheduler.Call.Acknowledge_agent_id'(Msg,
							Bin) ->
    SubBin = 'e_msg_mesos.v1.AgentID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call.Acknowledge_task_id'(Msg,
						       Bin) ->
    SubBin = 'e_msg_mesos.v1.TaskID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call.Shutdown_executor_id'(Msg,
							Bin) ->
    SubBin = 'e_msg_mesos.v1.ExecutorID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call.Shutdown_agent_id'(Msg,
						     Bin) ->
    SubBin = 'e_msg_mesos.v1.AgentID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call.Kill_task_id'(Msg,
						Bin) ->
    SubBin = 'e_msg_mesos.v1.TaskID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call.Kill_agent_id'(Msg,
						 Bin) ->
    SubBin = 'e_msg_mesos.v1.AgentID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call.Decline_offer_ids'(Msg,
						     Bin) ->
    SubBin = 'e_msg_mesos.v1.OfferID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.scheduler.Call.Decline_offer_ids'([Elem
						     | Rest],
						    Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_mesos.v1.scheduler.Call.Decline_offer_ids'(Elem,
							     Bin2),
    'e_field_mesos.v1.scheduler.Call.Decline_offer_ids'(Rest,
							Bin3);
'e_field_mesos.v1.scheduler.Call.Decline_offer_ids'([],
						    Bin) ->
    Bin.

'e_mfield_mesos.v1.scheduler.Call.Decline_filters'(Msg,
						   Bin) ->
    SubBin = 'e_msg_mesos.v1.Filters'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Offer.Operation.Destroy_volumes'(Msg,
						    Bin) ->
    SubBin = 'e_msg_mesos.v1.Resource'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Offer.Operation.Destroy_volumes'([Elem
						    | Rest],
						   Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_mesos.v1.Offer.Operation.Destroy_volumes'(Elem,
							    Bin2),
    'e_field_mesos.v1.Offer.Operation.Destroy_volumes'(Rest,
						       Bin3);
'e_field_mesos.v1.Offer.Operation.Destroy_volumes'([],
						   Bin) ->
    Bin.

'e_mfield_mesos.v1.Offer.Operation.Create_volumes'(Msg,
						   Bin) ->
    SubBin = 'e_msg_mesos.v1.Resource'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Offer.Operation.Create_volumes'([Elem
						   | Rest],
						  Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_mesos.v1.Offer.Operation.Create_volumes'(Elem,
							   Bin2),
    'e_field_mesos.v1.Offer.Operation.Create_volumes'(Rest,
						      Bin3);
'e_field_mesos.v1.Offer.Operation.Create_volumes'([],
						  Bin) ->
    Bin.

'e_mfield_mesos.v1.Offer.Operation.Unreserve_resources'(Msg,
							Bin) ->
    SubBin = 'e_msg_mesos.v1.Resource'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Offer.Operation.Unreserve_resources'([Elem
							| Rest],
						       Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_mesos.v1.Offer.Operation.Unreserve_resources'(Elem,
								Bin2),
    'e_field_mesos.v1.Offer.Operation.Unreserve_resources'(Rest,
							   Bin3);
'e_field_mesos.v1.Offer.Operation.Unreserve_resources'([],
						       Bin) ->
    Bin.

'e_mfield_mesos.v1.Offer.Operation.Reserve_resources'(Msg,
						      Bin) ->
    SubBin = 'e_msg_mesos.v1.Resource'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Offer.Operation.Reserve_resources'([Elem
						      | Rest],
						     Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_mesos.v1.Offer.Operation.Reserve_resources'(Elem,
							      Bin2),
    'e_field_mesos.v1.Offer.Operation.Reserve_resources'(Rest,
							 Bin3);
'e_field_mesos.v1.Offer.Operation.Reserve_resources'([],
						     Bin) ->
    Bin.

'e_mfield_mesos.v1.Ports_ports'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Port'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Ports_ports'([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_mesos.v1.Ports_ports'(Elem, Bin2),
    'e_field_mesos.v1.Ports_ports'(Rest, Bin3);
'e_field_mesos.v1.Ports_ports'([], Bin) -> Bin.

'e_mfield_mesos.v1.DiscoveryInfo_ports'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Ports'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.DiscoveryInfo_labels'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Labels'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Environment_variables'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Environment.Variable'(Msg,
						   <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Environment_variables'([Elem | Rest],
					 Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_mesos.v1.Environment_variables'(Elem,
						     Bin2),
    'e_field_mesos.v1.Environment_variables'(Rest, Bin3);
'e_field_mesos.v1.Environment_variables'([], Bin) ->
    Bin.

'e_field_mesos.v1.CommandInfo.ContainerInfo_options'([Elem
						      | Rest],
						     Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(Elem, Bin2),
    'e_field_mesos.v1.CommandInfo.ContainerInfo_options'(Rest,
							 Bin3);
'e_field_mesos.v1.CommandInfo.ContainerInfo_options'([],
						     Bin) ->
    Bin.

'e_mfield_mesos.v1.CommandInfo_container'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.CommandInfo.ContainerInfo'(Msg,
							<<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.CommandInfo_uris'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.CommandInfo.URI'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.CommandInfo_uris'([Elem | Rest],
				    Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_mesos.v1.CommandInfo_uris'(Elem, Bin2),
    'e_field_mesos.v1.CommandInfo_uris'(Rest, Bin3);
'e_field_mesos.v1.CommandInfo_uris'([], Bin) -> Bin.

'e_mfield_mesos.v1.CommandInfo_environment'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Environment'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.CommandInfo_arguments'([Elem | Rest],
					 Bin) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_type_string(Elem, Bin2),
    'e_field_mesos.v1.CommandInfo_arguments'(Rest, Bin3);
'e_field_mesos.v1.CommandInfo_arguments'([], Bin) ->
    Bin.

'e_field_mesos.v1.HealthCheck.HTTP_statuses'([Elem
					      | Rest],
					     Bin) ->
    Bin2 = <<Bin/binary, 32>>,
    Bin3 = e_varint(Elem, Bin2),
    'e_field_mesos.v1.HealthCheck.HTTP_statuses'(Rest,
						 Bin3);
'e_field_mesos.v1.HealthCheck.HTTP_statuses'([], Bin) ->
    Bin.

'e_mfield_mesos.v1.HealthCheck_http'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.HealthCheck.HTTP'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.HealthCheck_command'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.CommandInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ExecutorInfo_executor_id'(Msg,
					     Bin) ->
    SubBin = 'e_msg_mesos.v1.ExecutorID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ExecutorInfo_framework_id'(Msg,
					      Bin) ->
    SubBin = 'e_msg_mesos.v1.FrameworkID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ExecutorInfo_command'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.CommandInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ExecutorInfo_container'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.ContainerInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ExecutorInfo_resources'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Resource'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.ExecutorInfo_resources'([Elem | Rest],
					  Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = 'e_mfield_mesos.v1.ExecutorInfo_resources'(Elem,
						      Bin2),
    'e_field_mesos.v1.ExecutorInfo_resources'(Rest, Bin3);
'e_field_mesos.v1.ExecutorInfo_resources'([], Bin) ->
    Bin.

'e_mfield_mesos.v1.ExecutorInfo_discovery'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.DiscoveryInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.TaskInfo_task_id'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.TaskID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.TaskInfo_agent_id'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.AgentID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.TaskInfo_resources'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Resource'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.TaskInfo_resources'([Elem | Rest],
				      Bin) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = 'e_mfield_mesos.v1.TaskInfo_resources'(Elem,
						  Bin2),
    'e_field_mesos.v1.TaskInfo_resources'(Rest, Bin3);
'e_field_mesos.v1.TaskInfo_resources'([], Bin) -> Bin.

'e_mfield_mesos.v1.TaskInfo_executor'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.ExecutorInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.TaskInfo_command'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.CommandInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.TaskInfo_container'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.ContainerInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.TaskInfo_health_check'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.HealthCheck'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.TaskInfo_labels'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Labels'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.TaskInfo_discovery'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.DiscoveryInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Offer.Operation.Launch_task_infos'(Msg,
						      Bin) ->
    SubBin = 'e_msg_mesos.v1.TaskInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Offer.Operation.Launch_task_infos'([Elem
						      | Rest],
						     Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_mesos.v1.Offer.Operation.Launch_task_infos'(Elem,
							      Bin2),
    'e_field_mesos.v1.Offer.Operation.Launch_task_infos'(Rest,
							 Bin3);
'e_field_mesos.v1.Offer.Operation.Launch_task_infos'([],
						     Bin) ->
    Bin.

'e_mfield_mesos.v1.Offer.Operation_launch'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Offer.Operation.Launch'(Msg,
						     <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Offer.Operation_reserve'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Offer.Operation.Reserve'(Msg,
						      <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Offer.Operation_unreserve'(Msg,
					      Bin) ->
    SubBin = 'e_msg_mesos.v1.Offer.Operation.Unreserve'(Msg,
							<<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Offer.Operation_create'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Offer.Operation.Create'(Msg,
						     <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Offer.Operation_destroy'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Offer.Operation.Destroy'(Msg,
						      <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call.Accept_offer_ids'(Msg,
						    Bin) ->
    SubBin = 'e_msg_mesos.v1.OfferID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.scheduler.Call.Accept_offer_ids'([Elem
						    | Rest],
						   Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_mesos.v1.scheduler.Call.Accept_offer_ids'(Elem,
							    Bin2),
    'e_field_mesos.v1.scheduler.Call.Accept_offer_ids'(Rest,
						       Bin3);
'e_field_mesos.v1.scheduler.Call.Accept_offer_ids'([],
						   Bin) ->
    Bin.

'e_mfield_mesos.v1.scheduler.Call.Accept_operations'(Msg,
						     Bin) ->
    SubBin = 'e_msg_mesos.v1.Offer.Operation'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.scheduler.Call.Accept_operations'([Elem
						     | Rest],
						    Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_mesos.v1.scheduler.Call.Accept_operations'(Elem,
							     Bin2),
    'e_field_mesos.v1.scheduler.Call.Accept_operations'(Rest,
							Bin3);
'e_field_mesos.v1.scheduler.Call.Accept_operations'([],
						    Bin) ->
    Bin.

'e_mfield_mesos.v1.scheduler.Call.Accept_filters'(Msg,
						  Bin) ->
    SubBin = 'e_msg_mesos.v1.Filters'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.FrameworkInfo_id'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.FrameworkID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.FrameworkInfo_capabilities'(Msg,
					       Bin) ->
    Bin2 = <<Bin/binary, 2>>,
    'e_msg_mesos.v1.FrameworkInfo.Capability'(Msg, Bin2).

'e_field_mesos.v1.FrameworkInfo_capabilities'([Elem
					       | Rest],
					      Bin) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 =
	'e_mfield_mesos.v1.FrameworkInfo_capabilities'(Elem,
						       Bin2),
    'e_field_mesos.v1.FrameworkInfo_capabilities'(Rest,
						  Bin3);
'e_field_mesos.v1.FrameworkInfo_capabilities'([],
					      Bin) ->
    Bin.

'e_mfield_mesos.v1.scheduler.Call.Subscribe_framework_info'(Msg,
							    Bin) ->
    SubBin = 'e_msg_mesos.v1.FrameworkInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call_framework_id'(Msg,
						Bin) ->
    SubBin = 'e_msg_mesos.v1.FrameworkID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call_subscribe'(Msg,
					     Bin) ->
    SubBin = 'e_msg_mesos.v1.scheduler.Call.Subscribe'(Msg,
						       <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call_accept'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.scheduler.Call.Accept'(Msg,
						    <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call_decline'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.scheduler.Call.Decline'(Msg,
						     <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call_kill'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.scheduler.Call.Kill'(Msg,
						  <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call_shutdown'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.scheduler.Call.Shutdown'(Msg,
						      <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call_acknowledge'(Msg,
					       Bin) ->
    SubBin =
	'e_msg_mesos.v1.scheduler.Call.Acknowledge'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call_reconcile'(Msg,
					     Bin) ->
    SubBin = 'e_msg_mesos.v1.scheduler.Call.Reconcile'(Msg,
						       <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call_message'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.scheduler.Call.Message'(Msg,
						     <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Call_request'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.scheduler.Call.Request'(Msg,
						     <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.RateLimits_limits'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.RateLimit'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.RateLimits_limits'([Elem | Rest],
				     Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_mesos.v1.RateLimits_limits'(Elem,
						 Bin2),
    'e_field_mesos.v1.RateLimits_limits'(Rest, Bin3);
'e_field_mesos.v1.RateLimits_limits'([], Bin) -> Bin.

'e_mfield_mesos.v1.Parameters_parameter'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Parameter'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Parameters_parameter'([Elem | Rest],
					Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_mesos.v1.Parameters_parameter'(Elem,
						    Bin2),
    'e_field_mesos.v1.Parameters_parameter'(Rest, Bin3);
'e_field_mesos.v1.Parameters_parameter'([], Bin) -> Bin.

'e_mfield_mesos.v1.URL_address'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Address'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.URL_query'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Parameter'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.URL_query'([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = 'e_mfield_mesos.v1.URL_query'(Elem, Bin2),
    'e_field_mesos.v1.URL_query'(Rest, Bin3);
'e_field_mesos.v1.URL_query'([], Bin) -> Bin.

'e_mfield_mesos.v1.Offer_id'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.OfferID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Offer_framework_id'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.FrameworkID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Offer_agent_id'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.AgentID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Offer_url'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.URL'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Offer_resources'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Resource'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Offer_resources'([Elem | Rest],
				   Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = 'e_mfield_mesos.v1.Offer_resources'(Elem, Bin2),
    'e_field_mesos.v1.Offer_resources'(Rest, Bin3);
'e_field_mesos.v1.Offer_resources'([], Bin) -> Bin.

'e_mfield_mesos.v1.Offer_attributes'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Attribute'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Offer_attributes'([Elem | Rest],
				    Bin) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = 'e_mfield_mesos.v1.Offer_attributes'(Elem, Bin2),
    'e_field_mesos.v1.Offer_attributes'(Rest, Bin3);
'e_field_mesos.v1.Offer_attributes'([], Bin) -> Bin.

'e_mfield_mesos.v1.Offer_executor_ids'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.ExecutorID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Offer_executor_ids'([Elem | Rest],
				      Bin) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = 'e_mfield_mesos.v1.Offer_executor_ids'(Elem,
						  Bin2),
    'e_field_mesos.v1.Offer_executor_ids'(Rest, Bin3);
'e_field_mesos.v1.Offer_executor_ids'([], Bin) -> Bin.

'e_field_mesos.v1.ACL.Entity_values'([Elem | Rest],
				     Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(Elem, Bin2),
    'e_field_mesos.v1.ACL.Entity_values'(Rest, Bin3);
'e_field_mesos.v1.ACL.Entity_values'([], Bin) -> Bin.

'e_mfield_mesos.v1.TaskStatus_task_id'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.TaskID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.TaskStatus_agent_id'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.AgentID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.TaskStatus_executor_id'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.ExecutorID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.TaskStatus_labels'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Labels'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Event.Update_status'(Msg,
						  Bin) ->
    SubBin = 'e_msg_mesos.v1.TaskStatus'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Event.Failure_agent_id'(Msg,
						     Bin) ->
    SubBin = 'e_msg_mesos.v1.AgentID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Event.Failure_executor_id'(Msg,
							Bin) ->
    SubBin = 'e_msg_mesos.v1.ExecutorID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Event.Message_agent_id'(Msg,
						     Bin) ->
    SubBin = 'e_msg_mesos.v1.AgentID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Event.Message_executor_id'(Msg,
							Bin) ->
    SubBin = 'e_msg_mesos.v1.ExecutorID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Event.Rescind_offer_id'(Msg,
						     Bin) ->
    SubBin = 'e_msg_mesos.v1.OfferID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Event.Offers_offers'(Msg,
						  Bin) ->
    SubBin = 'e_msg_mesos.v1.Offer'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.scheduler.Event.Offers_offers'([Elem
						  | Rest],
						 Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_mesos.v1.scheduler.Event.Offers_offers'(Elem,
							  Bin2),
    'e_field_mesos.v1.scheduler.Event.Offers_offers'(Rest,
						     Bin3);
'e_field_mesos.v1.scheduler.Event.Offers_offers'([],
						 Bin) ->
    Bin.

'e_mfield_mesos.v1.scheduler.Event.Subscribed_framework_id'(Msg,
							    Bin) ->
    SubBin = 'e_msg_mesos.v1.FrameworkID'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Event_subscribed'(Msg,
					       Bin) ->
    SubBin =
	'e_msg_mesos.v1.scheduler.Event.Subscribed'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Event_offers'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.scheduler.Event.Offers'(Msg,
						     <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Event_rescind'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.scheduler.Event.Rescind'(Msg,
						      <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Event_update'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.scheduler.Event.Update'(Msg,
						     <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Event_message'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.scheduler.Event.Message'(Msg,
						      <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Event_failure'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.scheduler.Event.Failure'(Msg,
						      <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.scheduler.Event_error'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.scheduler.Event.Error'(Msg,
						    <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ResourceStatistics_perf'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.PerfStatistics'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ResourceStatistics_net_traffic_control_statistics'(Msg,
								      Bin) ->
    SubBin = 'e_msg_mesos.v1.TrafficControlStatistics'(Msg,
						       <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.ResourceStatistics_net_traffic_control_statistics'([Elem
								      | Rest],
								     Bin) ->
    Bin2 = <<Bin/binary, 154, 2>>,
    Bin3 =
	'e_mfield_mesos.v1.ResourceStatistics_net_traffic_control_statistics'(Elem,
									      Bin2),
    'e_field_mesos.v1.ResourceStatistics_net_traffic_control_statistics'(Rest,
									 Bin3);
'e_field_mesos.v1.ResourceStatistics_net_traffic_control_statistics'([],
								     Bin) ->
    Bin.

'e_mfield_mesos.v1.Credentials_credentials'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Credential'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.Credentials_credentials'([Elem
					    | Rest],
					   Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_mesos.v1.Credentials_credentials'(Elem,
						       Bin2),
    'e_field_mesos.v1.Credentials_credentials'(Rest, Bin3);
'e_field_mesos.v1.Credentials_credentials'([], Bin) ->
    Bin.

'e_mfield_mesos.v1.ResourceUsage.Executor_executor_info'(Msg,
							 Bin) ->
    SubBin = 'e_msg_mesos.v1.ExecutorInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ResourceUsage.Executor_allocated'(Msg,
						     Bin) ->
    SubBin = 'e_msg_mesos.v1.Resource'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.ResourceUsage.Executor_allocated'([Elem
						     | Rest],
						    Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_mesos.v1.ResourceUsage.Executor_allocated'(Elem,
							     Bin2),
    'e_field_mesos.v1.ResourceUsage.Executor_allocated'(Rest,
							Bin3);
'e_field_mesos.v1.ResourceUsage.Executor_allocated'([],
						    Bin) ->
    Bin.

'e_mfield_mesos.v1.ResourceUsage.Executor_statistics'(Msg,
						      Bin) ->
    SubBin = 'e_msg_mesos.v1.ResourceStatistics'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ACL.RunTask_principals'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.ACL.Entity'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ACL.RunTask_users'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.ACL.Entity'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ACL.RegisterFramework_principals'(Msg,
						     Bin) ->
    SubBin = 'e_msg_mesos.v1.ACL.Entity'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ACL.RegisterFramework_roles'(Msg,
						Bin) ->
    SubBin = 'e_msg_mesos.v1.ACL.Entity'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ACL.ShutdownFramework_principals'(Msg,
						     Bin) ->
    SubBin = 'e_msg_mesos.v1.ACL.Entity'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ACL.ShutdownFramework_framework_principals'(Msg,
							       Bin) ->
    SubBin = 'e_msg_mesos.v1.ACL.Entity'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ACLs_register_frameworks'(Msg,
					     Bin) ->
    SubBin = 'e_msg_mesos.v1.ACL.RegisterFramework'(Msg,
						    <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.ACLs_register_frameworks'([Elem
					     | Rest],
					    Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_mesos.v1.ACLs_register_frameworks'(Elem,
						     Bin2),
    'e_field_mesos.v1.ACLs_register_frameworks'(Rest, Bin3);
'e_field_mesos.v1.ACLs_register_frameworks'([], Bin) ->
    Bin.

'e_mfield_mesos.v1.ACLs_run_tasks'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.ACL.RunTask'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.ACLs_run_tasks'([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = 'e_mfield_mesos.v1.ACLs_run_tasks'(Elem, Bin2),
    'e_field_mesos.v1.ACLs_run_tasks'(Rest, Bin3);
'e_field_mesos.v1.ACLs_run_tasks'([], Bin) -> Bin.

'e_mfield_mesos.v1.ACLs_shutdown_frameworks'(Msg,
					     Bin) ->
    SubBin = 'e_msg_mesos.v1.ACL.ShutdownFramework'(Msg,
						    <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.ACLs_shutdown_frameworks'([Elem
					     | Rest],
					    Bin) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	'e_mfield_mesos.v1.ACLs_shutdown_frameworks'(Elem,
						     Bin2),
    'e_field_mesos.v1.ACLs_shutdown_frameworks'(Rest, Bin3);
'e_field_mesos.v1.ACLs_shutdown_frameworks'([], Bin) ->
    Bin.

'e_mfield_mesos.v1.MasterInfo_address'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Address'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.ResourceUsage_executors'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.ResourceUsage.Executor'(Msg,
						     <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.ResourceUsage_executors'([Elem
					    | Rest],
					   Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_mesos.v1.ResourceUsage_executors'(Elem,
						       Bin2),
    'e_field_mesos.v1.ResourceUsage_executors'(Rest, Bin3);
'e_field_mesos.v1.ResourceUsage_executors'([], Bin) ->
    Bin.

'e_mfield_mesos.v1.ResourceUsage_total'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Resource'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_mesos.v1.ResourceUsage_total'([Elem | Rest],
				       Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = 'e_mfield_mesos.v1.ResourceUsage_total'(Elem,
						   Bin2),
    'e_field_mesos.v1.ResourceUsage_total'(Rest, Bin3);
'e_field_mesos.v1.ResourceUsage_total'([], Bin) -> Bin.

'e_mfield_mesos.v1.Value_scalar'(Msg, Bin) ->
    Bin2 = <<Bin/binary, 9>>,
    'e_msg_mesos.v1.Value.Scalar'(Msg, Bin2).

'e_mfield_mesos.v1.Value_ranges'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Value.Ranges'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Value_set'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Value.Set'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_mesos.v1.Value_text'(Msg, Bin) ->
    SubBin = 'e_msg_mesos.v1.Value.Text'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:32/unsigned-native>> = <<Value:32/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>.

e_type_double(Value, Bin) ->
    <<Bin/binary, Value:64/little-float>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      'mesos.v1.Label' -> 'd_msg_mesos.v1.Label'(Bin);
      'mesos.v1.Labels' -> 'd_msg_mesos.v1.Labels'(Bin);
      'mesos.v1.Image.AppC' ->
	  'd_msg_mesos.v1.Image.AppC'(Bin);
      'mesos.v1.Image' -> 'd_msg_mesos.v1.Image'(Bin);
      'mesos.v1.ContainerInfo.MesosInfo' ->
	  'd_msg_mesos.v1.ContainerInfo.MesosInfo'(Bin);
      'mesos.v1.Parameter' -> 'd_msg_mesos.v1.Parameter'(Bin);
      'mesos.v1.ContainerInfo.DockerInfo.PortMapping' ->
	  'd_msg_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Bin);
      'mesos.v1.ContainerInfo.DockerInfo' ->
	  'd_msg_mesos.v1.ContainerInfo.DockerInfo'(Bin);
      'mesos.v1.Volume' -> 'd_msg_mesos.v1.Volume'(Bin);
      'mesos.v1.ContainerInfo' ->
	  'd_msg_mesos.v1.ContainerInfo'(Bin);
      'mesos.v1.AgentID' -> 'd_msg_mesos.v1.AgentID'(Bin);
      'mesos.v1.Value.Text' ->
	  'd_msg_mesos.v1.Value.Text'(Bin);
      'mesos.v1.Value.Set' -> 'd_msg_mesos.v1.Value.Set'(Bin);
      'mesos.v1.Value.Range' ->
	  'd_msg_mesos.v1.Value.Range'(Bin);
      'mesos.v1.Value.Ranges' ->
	  'd_msg_mesos.v1.Value.Ranges'(Bin);
      'mesos.v1.Value.Scalar' ->
	  'd_msg_mesos.v1.Value.Scalar'(Bin);
      'mesos.v1.Attribute' -> 'd_msg_mesos.v1.Attribute'(Bin);
      'mesos.v1.Resource.RevocableInfo' ->
	  'd_msg_mesos.v1.Resource.RevocableInfo'(Bin);
      'mesos.v1.Resource.DiskInfo.Persistence' ->
	  'd_msg_mesos.v1.Resource.DiskInfo.Persistence'(Bin);
      'mesos.v1.Resource.DiskInfo' ->
	  'd_msg_mesos.v1.Resource.DiskInfo'(Bin);
      'mesos.v1.Resource.ReservationInfo' ->
	  'd_msg_mesos.v1.Resource.ReservationInfo'(Bin);
      'mesos.v1.Resource' -> 'd_msg_mesos.v1.Resource'(Bin);
      'mesos.v1.AgentInfo' -> 'd_msg_mesos.v1.AgentInfo'(Bin);
      'mesos.v1.Request' -> 'd_msg_mesos.v1.Request'(Bin);
      'mesos.v1.scheduler.Call.Request' ->
	  'd_msg_mesos.v1.scheduler.Call.Request'(Bin);
      'mesos.v1.ExecutorID' ->
	  'd_msg_mesos.v1.ExecutorID'(Bin);
      'mesos.v1.scheduler.Call.Message' ->
	  'd_msg_mesos.v1.scheduler.Call.Message'(Bin);
      'mesos.v1.TaskID' -> 'd_msg_mesos.v1.TaskID'(Bin);
      'mesos.v1.scheduler.Call.Reconcile.Task' ->
	  'd_msg_mesos.v1.scheduler.Call.Reconcile.Task'(Bin);
      'mesos.v1.scheduler.Call.Reconcile' ->
	  'd_msg_mesos.v1.scheduler.Call.Reconcile'(Bin);
      'mesos.v1.scheduler.Call.Acknowledge' ->
	  'd_msg_mesos.v1.scheduler.Call.Acknowledge'(Bin);
      'mesos.v1.scheduler.Call.Shutdown' ->
	  'd_msg_mesos.v1.scheduler.Call.Shutdown'(Bin);
      'mesos.v1.scheduler.Call.Kill' ->
	  'd_msg_mesos.v1.scheduler.Call.Kill'(Bin);
      'mesos.v1.Filters' -> 'd_msg_mesos.v1.Filters'(Bin);
      'mesos.v1.OfferID' -> 'd_msg_mesos.v1.OfferID'(Bin);
      'mesos.v1.scheduler.Call.Decline' ->
	  'd_msg_mesos.v1.scheduler.Call.Decline'(Bin);
      'mesos.v1.Offer.Operation.Destroy' ->
	  'd_msg_mesos.v1.Offer.Operation.Destroy'(Bin);
      'mesos.v1.Offer.Operation.Create' ->
	  'd_msg_mesos.v1.Offer.Operation.Create'(Bin);
      'mesos.v1.Offer.Operation.Unreserve' ->
	  'd_msg_mesos.v1.Offer.Operation.Unreserve'(Bin);
      'mesos.v1.Offer.Operation.Reserve' ->
	  'd_msg_mesos.v1.Offer.Operation.Reserve'(Bin);
      'mesos.v1.Port' -> 'd_msg_mesos.v1.Port'(Bin);
      'mesos.v1.Ports' -> 'd_msg_mesos.v1.Ports'(Bin);
      'mesos.v1.DiscoveryInfo' ->
	  'd_msg_mesos.v1.DiscoveryInfo'(Bin);
      'mesos.v1.Environment.Variable' ->
	  'd_msg_mesos.v1.Environment.Variable'(Bin);
      'mesos.v1.Environment' ->
	  'd_msg_mesos.v1.Environment'(Bin);
      'mesos.v1.CommandInfo.URI' ->
	  'd_msg_mesos.v1.CommandInfo.URI'(Bin);
      'mesos.v1.CommandInfo.ContainerInfo' ->
	  'd_msg_mesos.v1.CommandInfo.ContainerInfo'(Bin);
      'mesos.v1.CommandInfo' ->
	  'd_msg_mesos.v1.CommandInfo'(Bin);
      'mesos.v1.HealthCheck.HTTP' ->
	  'd_msg_mesos.v1.HealthCheck.HTTP'(Bin);
      'mesos.v1.HealthCheck' ->
	  'd_msg_mesos.v1.HealthCheck'(Bin);
      'mesos.v1.FrameworkID' ->
	  'd_msg_mesos.v1.FrameworkID'(Bin);
      'mesos.v1.ExecutorInfo' ->
	  'd_msg_mesos.v1.ExecutorInfo'(Bin);
      'mesos.v1.TaskInfo' -> 'd_msg_mesos.v1.TaskInfo'(Bin);
      'mesos.v1.Offer.Operation.Launch' ->
	  'd_msg_mesos.v1.Offer.Operation.Launch'(Bin);
      'mesos.v1.Offer.Operation' ->
	  'd_msg_mesos.v1.Offer.Operation'(Bin);
      'mesos.v1.scheduler.Call.Accept' ->
	  'd_msg_mesos.v1.scheduler.Call.Accept'(Bin);
      'mesos.v1.FrameworkInfo.Capability' ->
	  'd_msg_mesos.v1.FrameworkInfo.Capability'(Bin);
      'mesos.v1.FrameworkInfo' ->
	  'd_msg_mesos.v1.FrameworkInfo'(Bin);
      'mesos.v1.scheduler.Call.Subscribe' ->
	  'd_msg_mesos.v1.scheduler.Call.Subscribe'(Bin);
      'mesos.v1.scheduler.Call' ->
	  'd_msg_mesos.v1.scheduler.Call'(Bin);
      'mesos.v1.RateLimit' -> 'd_msg_mesos.v1.RateLimit'(Bin);
      'mesos.v1.RateLimits' ->
	  'd_msg_mesos.v1.RateLimits'(Bin);
      'mesos.v1.Parameters' ->
	  'd_msg_mesos.v1.Parameters'(Bin);
      'mesos.v1.Address' -> 'd_msg_mesos.v1.Address'(Bin);
      'mesos.v1.URL' -> 'd_msg_mesos.v1.URL'(Bin);
      'mesos.v1.Offer' -> 'd_msg_mesos.v1.Offer'(Bin);
      'mesos.v1.Credential' ->
	  'd_msg_mesos.v1.Credential'(Bin);
      'mesos.v1.ACL.Entity' ->
	  'd_msg_mesos.v1.ACL.Entity'(Bin);
      'mesos.v1.TaskStatus' ->
	  'd_msg_mesos.v1.TaskStatus'(Bin);
      'mesos.v1.scheduler.Event.Update' ->
	  'd_msg_mesos.v1.scheduler.Event.Update'(Bin);
      'mesos.v1.scheduler.Event.Error' ->
	  'd_msg_mesos.v1.scheduler.Event.Error'(Bin);
      'mesos.v1.scheduler.Event.Failure' ->
	  'd_msg_mesos.v1.scheduler.Event.Failure'(Bin);
      'mesos.v1.scheduler.Event.Message' ->
	  'd_msg_mesos.v1.scheduler.Event.Message'(Bin);
      'mesos.v1.scheduler.Event.Rescind' ->
	  'd_msg_mesos.v1.scheduler.Event.Rescind'(Bin);
      'mesos.v1.scheduler.Event.Offers' ->
	  'd_msg_mesos.v1.scheduler.Event.Offers'(Bin);
      'mesos.v1.scheduler.Event.Subscribed' ->
	  'd_msg_mesos.v1.scheduler.Event.Subscribed'(Bin);
      'mesos.v1.scheduler.Event' ->
	  'd_msg_mesos.v1.scheduler.Event'(Bin);
      'mesos.v1.TrafficControlStatistics' ->
	  'd_msg_mesos.v1.TrafficControlStatistics'(Bin);
      'mesos.v1.PerfStatistics' ->
	  'd_msg_mesos.v1.PerfStatistics'(Bin);
      'mesos.v1.ResourceStatistics' ->
	  'd_msg_mesos.v1.ResourceStatistics'(Bin);
      'mesos.v1.Credentials' ->
	  'd_msg_mesos.v1.Credentials'(Bin);
      'mesos.v1.ResourceUsage.Executor' ->
	  'd_msg_mesos.v1.ResourceUsage.Executor'(Bin);
      'mesos.v1.ACL' -> 'd_msg_mesos.v1.ACL'(Bin);
      'mesos.v1.ACL.RunTask' ->
	  'd_msg_mesos.v1.ACL.RunTask'(Bin);
      'mesos.v1.ACL.RegisterFramework' ->
	  'd_msg_mesos.v1.ACL.RegisterFramework'(Bin);
      'mesos.v1.ACL.ShutdownFramework' ->
	  'd_msg_mesos.v1.ACL.ShutdownFramework'(Bin);
      'mesos.v1.ACLs' -> 'd_msg_mesos.v1.ACLs'(Bin);
      'mesos.v1.MasterInfo' ->
	  'd_msg_mesos.v1.MasterInfo'(Bin);
      'mesos.v1.ResourceUsage' ->
	  'd_msg_mesos.v1.ResourceUsage'(Bin);
      'mesos.v1.Value' -> 'd_msg_mesos.v1.Value'(Bin);
      'mesos.v1.ContainerID' ->
	  'd_msg_mesos.v1.ContainerID'(Bin)
    end.



'd_enum_mesos.v1.scheduler.Event.Type'(1) ->
    'SUBSCRIBED';
'd_enum_mesos.v1.scheduler.Event.Type'(2) -> 'OFFERS';
'd_enum_mesos.v1.scheduler.Event.Type'(3) -> 'RESCIND';
'd_enum_mesos.v1.scheduler.Event.Type'(4) -> 'UPDATE';
'd_enum_mesos.v1.scheduler.Event.Type'(5) -> 'MESSAGE';
'd_enum_mesos.v1.scheduler.Event.Type'(6) -> 'FAILURE';
'd_enum_mesos.v1.scheduler.Event.Type'(7) -> 'ERROR';
'd_enum_mesos.v1.scheduler.Event.Type'(8) ->
    'HEARTBEAT'.

'd_enum_mesos.v1.scheduler.Call.Type'(1) -> 'SUBSCRIBE';
'd_enum_mesos.v1.scheduler.Call.Type'(2) -> 'TEARDOWN';
'd_enum_mesos.v1.scheduler.Call.Type'(3) -> 'ACCEPT';
'd_enum_mesos.v1.scheduler.Call.Type'(4) -> 'DECLINE';
'd_enum_mesos.v1.scheduler.Call.Type'(5) -> 'REVIVE';
'd_enum_mesos.v1.scheduler.Call.Type'(6) -> 'KILL';
'd_enum_mesos.v1.scheduler.Call.Type'(7) -> 'SHUTDOWN';
'd_enum_mesos.v1.scheduler.Call.Type'(8) ->
    'ACKNOWLEDGE';
'd_enum_mesos.v1.scheduler.Call.Type'(9) -> 'RECONCILE';
'd_enum_mesos.v1.scheduler.Call.Type'(10) -> 'MESSAGE';
'd_enum_mesos.v1.scheduler.Call.Type'(11) -> 'REQUEST'.

'd_enum_mesos.v1.FrameworkInfo.Capability.Type'(1) ->
    'REVOCABLE_RESOURCES'.

'd_enum_mesos.v1.Value.Type'(0) -> 'SCALAR';
'd_enum_mesos.v1.Value.Type'(1) -> 'RANGES';
'd_enum_mesos.v1.Value.Type'(2) -> 'SET';
'd_enum_mesos.v1.Value.Type'(3) -> 'TEXT'.

'd_enum_mesos.v1.Offer.Operation.Type'(1) -> 'LAUNCH';
'd_enum_mesos.v1.Offer.Operation.Type'(2) -> 'RESERVE';
'd_enum_mesos.v1.Offer.Operation.Type'(3) ->
    'UNRESERVE';
'd_enum_mesos.v1.Offer.Operation.Type'(4) -> 'CREATE';
'd_enum_mesos.v1.Offer.Operation.Type'(5) -> 'DESTROY'.

'd_enum_mesos.v1.TaskState'(6) -> 'TASK_STAGING';
'd_enum_mesos.v1.TaskState'(0) -> 'TASK_STARTING';
'd_enum_mesos.v1.TaskState'(1) -> 'TASK_RUNNING';
'd_enum_mesos.v1.TaskState'(2) -> 'TASK_FINISHED';
'd_enum_mesos.v1.TaskState'(3) -> 'TASK_FAILED';
'd_enum_mesos.v1.TaskState'(4) -> 'TASK_KILLED';
'd_enum_mesos.v1.TaskState'(5) -> 'TASK_LOST';
'd_enum_mesos.v1.TaskState'(7) -> 'TASK_ERROR'.

'd_enum_mesos.v1.TaskStatus.Source'(0) ->
    'SOURCE_MASTER';
'd_enum_mesos.v1.TaskStatus.Source'(1) ->
    'SOURCE_AGENT';
'd_enum_mesos.v1.TaskStatus.Source'(2) ->
    'SOURCE_EXECUTOR'.

'd_enum_mesos.v1.TaskStatus.Reason'(0) ->
    'REASON_COMMAND_EXECUTOR_FAILED';
'd_enum_mesos.v1.TaskStatus.Reason'(17) ->
    'REASON_EXECUTOR_PREEMPTED';
'd_enum_mesos.v1.TaskStatus.Reason'(1) ->
    'REASON_EXECUTOR_TERMINATED';
'd_enum_mesos.v1.TaskStatus.Reason'(2) ->
    'REASON_EXECUTOR_UNREGISTERED';
'd_enum_mesos.v1.TaskStatus.Reason'(3) ->
    'REASON_FRAMEWORK_REMOVED';
'd_enum_mesos.v1.TaskStatus.Reason'(4) ->
    'REASON_GC_ERROR';
'd_enum_mesos.v1.TaskStatus.Reason'(5) ->
    'REASON_INVALID_FRAMEWORKID';
'd_enum_mesos.v1.TaskStatus.Reason'(6) ->
    'REASON_INVALID_OFFERS';
'd_enum_mesos.v1.TaskStatus.Reason'(7) ->
    'REASON_MASTER_DISCONNECTED';
'd_enum_mesos.v1.TaskStatus.Reason'(8) ->
    'REASON_MEMORY_LIMIT';
'd_enum_mesos.v1.TaskStatus.Reason'(9) ->
    'REASON_RECONCILIATION';
'd_enum_mesos.v1.TaskStatus.Reason'(18) ->
    'REASON_RESOURCES_UNKNOWN';
'd_enum_mesos.v1.TaskStatus.Reason'(10) ->
    'REASON_AGENT_DISCONNECTED';
'd_enum_mesos.v1.TaskStatus.Reason'(11) ->
    'REASON_AGENT_REMOVED';
'd_enum_mesos.v1.TaskStatus.Reason'(12) ->
    'REASON_AGENT_RESTARTED';
'd_enum_mesos.v1.TaskStatus.Reason'(13) ->
    'REASON_AGENT_UNKNOWN';
'd_enum_mesos.v1.TaskStatus.Reason'(14) ->
    'REASON_TASK_INVALID';
'd_enum_mesos.v1.TaskStatus.Reason'(15) ->
    'REASON_TASK_UNAUTHORIZED';
'd_enum_mesos.v1.TaskStatus.Reason'(16) ->
    'REASON_TASK_UNKNOWN'.

'd_enum_mesos.v1.ACL.Entity.Type'(0) -> 'SOME';
'd_enum_mesos.v1.ACL.Entity.Type'(1) -> 'ANY';
'd_enum_mesos.v1.ACL.Entity.Type'(2) -> 'NONE'.

'd_enum_mesos.v1.Image.Type'(1) -> 'APPC'.

'd_enum_mesos.v1.Volume.Mode'(1) -> 'RW';
'd_enum_mesos.v1.Volume.Mode'(2) -> 'RO'.

'd_enum_mesos.v1.ContainerInfo.Type'(1) -> 'DOCKER';
'd_enum_mesos.v1.ContainerInfo.Type'(2) -> 'MESOS'.

'd_enum_mesos.v1.ContainerInfo.DockerInfo.Network'(1) ->
    'HOST';
'd_enum_mesos.v1.ContainerInfo.DockerInfo.Network'(2) ->
    'BRIDGE';
'd_enum_mesos.v1.ContainerInfo.DockerInfo.Network'(3) ->
    'NONE'.

'd_enum_mesos.v1.DiscoveryInfo.Visibility'(0) ->
    'FRAMEWORK';
'd_enum_mesos.v1.DiscoveryInfo.Visibility'(1) ->
    'CLUSTER';
'd_enum_mesos.v1.DiscoveryInfo.Visibility'(2) ->
    'EXTERNAL'.

'd_msg_mesos.v1.Label'(Bin) ->
    'dfp_read_field_def_mesos.v1.Label'(Bin, 0, 0,
					undefined, undefined).

'dfp_read_field_def_mesos.v1.Label'(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Label_key'(Rest, Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.Label'(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Label_value'(Rest, Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.Label'(<<>>, 0, 0, F1,
				    F2) ->
    #'mesos.v1.Label'{key = F1, value = F2};
'dfp_read_field_def_mesos.v1.Label'(Other, Z1, Z2, F1,
				    F2) ->
    'dg_read_field_def_mesos.v1.Label'(Other, Z1, Z2, F1,
				       F2).

'dg_read_field_def_mesos.v1.Label'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Label'(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
'dg_read_field_def_mesos.v1.Label'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_mesos.v1.Label_key'(Rest, 0, 0, F1, F2);
      18 ->
	  'd_field_mesos.v1.Label_value'(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.Label'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_mesos.v1.Label'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.Label'(Rest, 0, 0, F1,
						       F2);
	    5 -> 'skip_32_mesos.v1.Label'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.Label'(<<>>, 0, 0, F1,
				   F2) ->
    #'mesos.v1.Label'{key = F1, value = F2}.

'd_field_mesos.v1.Label_key'(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Label_key'(Rest, N + 7, X bsl N + Acc,
				 F1, F2);
'd_field_mesos.v1.Label_key'(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Label'(Rest2, 0, 0,
					NewFValue, F2).


'd_field_mesos.v1.Label_value'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Label_value'(Rest, N + 7,
				   X bsl N + Acc, F1, F2);
'd_field_mesos.v1.Label_value'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Label'(Rest2, 0, 0, F1,
					NewFValue).


'skip_varint_mesos.v1.Label'(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.Label'(Rest, Z1, Z2, F1, F2);
'skip_varint_mesos.v1.Label'(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Label'(Rest, Z1, Z2, F1,
					F2).


'skip_length_delimited_mesos.v1.Label'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Label'(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
'skip_length_delimited_mesos.v1.Label'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Label'(Rest2, 0, 0, F1,
					F2).


'skip_32_mesos.v1.Label'(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    'dfp_read_field_def_mesos.v1.Label'(Rest, Z1, Z2, F1,
					F2).


'skip_64_mesos.v1.Label'(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    'dfp_read_field_def_mesos.v1.Label'(Rest, Z1, Z2, F1,
					F2).


'd_msg_mesos.v1.Labels'(Bin) ->
    'dfp_read_field_def_mesos.v1.Labels'(Bin, 0, 0, []).

'dfp_read_field_def_mesos.v1.Labels'(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1) ->
    'd_field_mesos.v1.Labels_labels'(Rest, Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.Labels'(<<>>, 0, 0, F1) ->
    #'mesos.v1.Labels'{labels = lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.Labels'(Other, Z1, Z2,
				     F1) ->
    'dg_read_field_def_mesos.v1.Labels'(Other, Z1, Z2, F1).

'dg_read_field_def_mesos.v1.Labels'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Labels'(Rest, N + 7,
					X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.Labels'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_mesos.v1.Labels_labels'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.Labels'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.Labels'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Labels'(Rest, 0, 0, F1);
	    5 -> 'skip_32_mesos.v1.Labels'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Labels'(<<>>, 0, 0, F1) ->
    #'mesos.v1.Labels'{labels = lists:reverse(F1)}.

'd_field_mesos.v1.Labels_labels'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Labels_labels'(Rest, N + 7,
				     X bsl N + Acc, F1);
'd_field_mesos.v1.Labels_labels'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Label'),
    'dfp_read_field_def_mesos.v1.Labels'(Rest2, 0, 0,
					 [NewFValue | F1]).


'skip_varint_mesos.v1.Labels'(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Labels'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.Labels'(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Labels'(Rest, Z1, Z2, F1).


'skip_length_delimited_mesos.v1.Labels'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Labels'(Rest, N + 7,
					    X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.Labels'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Labels'(Rest2, 0, 0, F1).


'skip_32_mesos.v1.Labels'(<<_:32, Rest/binary>>, Z1, Z2,
			  F1) ->
    'dfp_read_field_def_mesos.v1.Labels'(Rest, Z1, Z2, F1).


'skip_64_mesos.v1.Labels'(<<_:64, Rest/binary>>, Z1, Z2,
			  F1) ->
    'dfp_read_field_def_mesos.v1.Labels'(Rest, Z1, Z2, F1).


'd_msg_mesos.v1.Image.AppC'(Bin) ->
    'dfp_read_field_def_mesos.v1.Image.AppC'(Bin, 0, 0,
					     undefined, undefined, undefined).

'dfp_read_field_def_mesos.v1.Image.AppC'(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.Image.AppC_name'(Rest, Z1, Z2, F1, F2,
				       F3);
'dfp_read_field_def_mesos.v1.Image.AppC'(<<18,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.Image.AppC_id'(Rest, Z1, Z2, F1, F2,
				     F3);
'dfp_read_field_def_mesos.v1.Image.AppC'(<<26,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.Image.AppC_labels'(Rest, Z1, Z2, F1,
					 F2, F3);
'dfp_read_field_def_mesos.v1.Image.AppC'(<<>>, 0, 0, F1,
					 F2, F3) ->
    #'mesos.v1.Image.AppC'{name = F1, id = F2, labels = F3};
'dfp_read_field_def_mesos.v1.Image.AppC'(Other, Z1, Z2,
					 F1, F2, F3) ->
    'dg_read_field_def_mesos.v1.Image.AppC'(Other, Z1, Z2,
					    F1, F2, F3).

'dg_read_field_def_mesos.v1.Image.AppC'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Image.AppC'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3);
'dg_read_field_def_mesos.v1.Image.AppC'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Image.AppC_name'(Rest, 0, 0, F1, F2,
					     F3);
      18 ->
	  'd_field_mesos.v1.Image.AppC_id'(Rest, 0, 0, F1, F2,
					   F3);
      26 ->
	  'd_field_mesos.v1.Image.AppC_labels'(Rest, 0, 0, F1, F2,
					       F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Image.AppC'(Rest, 0, 0, F1, F2,
						  F3);
	    1 ->
		'skip_64_mesos.v1.Image.AppC'(Rest, 0, 0, F1, F2, F3);
	    2 ->
		'skip_length_delimited_mesos.v1.Image.AppC'(Rest, 0, 0,
							    F1, F2, F3);
	    5 ->
		'skip_32_mesos.v1.Image.AppC'(Rest, 0, 0, F1, F2, F3)
	  end
    end;
'dg_read_field_def_mesos.v1.Image.AppC'(<<>>, 0, 0, F1,
					F2, F3) ->
    #'mesos.v1.Image.AppC'{name = F1, id = F2, labels = F3}.

'd_field_mesos.v1.Image.AppC_name'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.Image.AppC_name'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3);
'd_field_mesos.v1.Image.AppC_name'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Image.AppC'(Rest2, 0, 0,
					     NewFValue, F2, F3).


'd_field_mesos.v1.Image.AppC_id'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.Image.AppC_id'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3);
'd_field_mesos.v1.Image.AppC_id'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Image.AppC'(Rest2, 0, 0,
					     F1, NewFValue, F3).


'd_field_mesos.v1.Image.AppC_labels'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.Image.AppC_labels'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
'd_field_mesos.v1.Image.AppC_labels'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Labels'),
    'dfp_read_field_def_mesos.v1.Image.AppC'(Rest2, 0, 0,
					     F1, F2,
					     if F3 == undefined -> NewFValue;
						true ->
						    'merge_msg_mesos.v1.Labels'(F3,
										NewFValue)
					     end).


'skip_varint_mesos.v1.Image.AppC'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3) ->
    'skip_varint_mesos.v1.Image.AppC'(Rest, Z1, Z2, F1, F2,
				      F3);
'skip_varint_mesos.v1.Image.AppC'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.Image.AppC'(Rest, Z1, Z2,
					     F1, F2, F3).


'skip_length_delimited_mesos.v1.Image.AppC'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Image.AppC'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3);
'skip_length_delimited_mesos.v1.Image.AppC'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Image.AppC'(Rest2, 0, 0,
					     F1, F2, F3).


'skip_32_mesos.v1.Image.AppC'(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.Image.AppC'(Rest, Z1, Z2,
					     F1, F2, F3).


'skip_64_mesos.v1.Image.AppC'(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.Image.AppC'(Rest, Z1, Z2,
					     F1, F2, F3).


'd_msg_mesos.v1.Image'(Bin) ->
    'dfp_read_field_def_mesos.v1.Image'(Bin, 0, 0,
					undefined, undefined).

'dfp_read_field_def_mesos.v1.Image'(<<8, Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Image_type'(Rest, Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.Image'(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Image_appc'(Rest, Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.Image'(<<>>, 0, 0, F1,
				    F2) ->
    #'mesos.v1.Image'{type = F1, appc = F2};
'dfp_read_field_def_mesos.v1.Image'(Other, Z1, Z2, F1,
				    F2) ->
    'dg_read_field_def_mesos.v1.Image'(Other, Z1, Z2, F1,
				       F2).

'dg_read_field_def_mesos.v1.Image'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Image'(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
'dg_read_field_def_mesos.v1.Image'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> 'd_field_mesos.v1.Image_type'(Rest, 0, 0, F1, F2);
      18 -> 'd_field_mesos.v1.Image_appc'(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.Image'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_mesos.v1.Image'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.Image'(Rest, 0, 0, F1,
						       F2);
	    5 -> 'skip_32_mesos.v1.Image'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.Image'(<<>>, 0, 0, F1,
				   F2) ->
    #'mesos.v1.Image'{type = F1, appc = F2}.

'd_field_mesos.v1.Image_type'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Image_type'(Rest, N + 7,
				  X bsl N + Acc, F1, F2);
'd_field_mesos.v1.Image_type'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_mesos.v1.Image.Type'(Tmp),
    'dfp_read_field_def_mesos.v1.Image'(Rest, 0, 0,
					NewFValue, F2).


'd_field_mesos.v1.Image_appc'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Image_appc'(Rest, N + 7,
				  X bsl N + Acc, F1, F2);
'd_field_mesos.v1.Image_appc'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Image.AppC'),
    'dfp_read_field_def_mesos.v1.Image'(Rest2, 0, 0, F1,
					if F2 == undefined -> NewFValue;
					   true ->
					       'merge_msg_mesos.v1.Image.AppC'(F2,
									       NewFValue)
					end).


'skip_varint_mesos.v1.Image'(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.Image'(Rest, Z1, Z2, F1, F2);
'skip_varint_mesos.v1.Image'(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Image'(Rest, Z1, Z2, F1,
					F2).


'skip_length_delimited_mesos.v1.Image'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Image'(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
'skip_length_delimited_mesos.v1.Image'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Image'(Rest2, 0, 0, F1,
					F2).


'skip_32_mesos.v1.Image'(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    'dfp_read_field_def_mesos.v1.Image'(Rest, Z1, Z2, F1,
					F2).


'skip_64_mesos.v1.Image'(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    'dfp_read_field_def_mesos.v1.Image'(Rest, Z1, Z2, F1,
					F2).


'd_msg_mesos.v1.ContainerInfo.MesosInfo'(Bin) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo.MesosInfo'(Bin,
							  0, 0, undefined).

'dfp_read_field_def_mesos.v1.ContainerInfo.MesosInfo'(<<10,
							Rest/binary>>,
						      Z1, Z2, F1) ->
    'd_field_mesos.v1.ContainerInfo.MesosInfo_image'(Rest,
						     Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.ContainerInfo.MesosInfo'(<<>>,
						      0, 0, F1) ->
    #'mesos.v1.ContainerInfo.MesosInfo'{image = F1};
'dfp_read_field_def_mesos.v1.ContainerInfo.MesosInfo'(Other,
						      Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.ContainerInfo.MesosInfo'(Other,
							 Z1, Z2, F1).

'dg_read_field_def_mesos.v1.ContainerInfo.MesosInfo'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ContainerInfo.MesosInfo'(Rest,
							 N + 7, X bsl N + Acc,
							 F1);
'dg_read_field_def_mesos.v1.ContainerInfo.MesosInfo'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.ContainerInfo.MesosInfo_image'(Rest,
							   0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.ContainerInfo.MesosInfo'(Rest, 0,
							       0, F1);
	    1 ->
		'skip_64_mesos.v1.ContainerInfo.MesosInfo'(Rest, 0, 0,
							   F1);
	    2 ->
		'skip_length_delimited_mesos.v1.ContainerInfo.MesosInfo'(Rest,
									 0, 0,
									 F1);
	    5 ->
		'skip_32_mesos.v1.ContainerInfo.MesosInfo'(Rest, 0, 0,
							   F1)
	  end
    end;
'dg_read_field_def_mesos.v1.ContainerInfo.MesosInfo'(<<>>,
						     0, 0, F1) ->
    #'mesos.v1.ContainerInfo.MesosInfo'{image = F1}.

'd_field_mesos.v1.ContainerInfo.MesosInfo_image'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo.MesosInfo_image'(Rest,
						     N + 7, X bsl N + Acc, F1);
'd_field_mesos.v1.ContainerInfo.MesosInfo_image'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Image'),
    'dfp_read_field_def_mesos.v1.ContainerInfo.MesosInfo'(Rest2,
							  0, 0,
							  if F1 == undefined ->
								 NewFValue;
							     true ->
								 'merge_msg_mesos.v1.Image'(F1,
											    NewFValue)
							  end).


'skip_varint_mesos.v1.ContainerInfo.MesosInfo'(<<1:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1) ->
    'skip_varint_mesos.v1.ContainerInfo.MesosInfo'(Rest, Z1,
						   Z2, F1);
'skip_varint_mesos.v1.ContainerInfo.MesosInfo'(<<0:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo.MesosInfo'(Rest,
							  Z1, Z2, F1).


'skip_length_delimited_mesos.v1.ContainerInfo.MesosInfo'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ContainerInfo.MesosInfo'(Rest,
							     N + 7,
							     X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.ContainerInfo.MesosInfo'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ContainerInfo.MesosInfo'(Rest2,
							  0, 0, F1).


'skip_32_mesos.v1.ContainerInfo.MesosInfo'(<<_:32,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo.MesosInfo'(Rest,
							  Z1, Z2, F1).


'skip_64_mesos.v1.ContainerInfo.MesosInfo'(<<_:64,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo.MesosInfo'(Rest,
							  Z1, Z2, F1).


'd_msg_mesos.v1.Parameter'(Bin) ->
    'dfp_read_field_def_mesos.v1.Parameter'(Bin, 0, 0,
					    undefined, undefined).

'dfp_read_field_def_mesos.v1.Parameter'(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Parameter_key'(Rest, Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.Parameter'(<<18,
					  Rest/binary>>,
					Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Parameter_value'(Rest, Z1, Z2, F1,
				       F2);
'dfp_read_field_def_mesos.v1.Parameter'(<<>>, 0, 0, F1,
					F2) ->
    #'mesos.v1.Parameter'{key = F1, value = F2};
'dfp_read_field_def_mesos.v1.Parameter'(Other, Z1, Z2,
					F1, F2) ->
    'dg_read_field_def_mesos.v1.Parameter'(Other, Z1, Z2,
					   F1, F2).

'dg_read_field_def_mesos.v1.Parameter'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Parameter'(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
'dg_read_field_def_mesos.v1.Parameter'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Parameter_key'(Rest, 0, 0, F1, F2);
      18 ->
	  'd_field_mesos.v1.Parameter_value'(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Parameter'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_mesos.v1.Parameter'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.Parameter'(Rest, 0, 0,
							   F1, F2);
	    5 -> 'skip_32_mesos.v1.Parameter'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.Parameter'(<<>>, 0, 0, F1,
				       F2) ->
    #'mesos.v1.Parameter'{key = F1, value = F2}.

'd_field_mesos.v1.Parameter_key'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Parameter_key'(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
'd_field_mesos.v1.Parameter_key'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Parameter'(Rest2, 0, 0,
					    NewFValue, F2).


'd_field_mesos.v1.Parameter_value'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Parameter_value'(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
'd_field_mesos.v1.Parameter_value'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Parameter'(Rest2, 0, 0, F1,
					    NewFValue).


'skip_varint_mesos.v1.Parameter'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.Parameter'(Rest, Z1, Z2, F1, F2);
'skip_varint_mesos.v1.Parameter'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Parameter'(Rest, Z1, Z2,
					    F1, F2).


'skip_length_delimited_mesos.v1.Parameter'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Parameter'(Rest, N + 7,
					       X bsl N + Acc, F1, F2);
'skip_length_delimited_mesos.v1.Parameter'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Parameter'(Rest2, 0, 0, F1,
					    F2).


'skip_32_mesos.v1.Parameter'(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Parameter'(Rest, Z1, Z2,
					    F1, F2).


'skip_64_mesos.v1.Parameter'(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Parameter'(Rest, Z1, Z2,
					    F1, F2).


'd_msg_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Bin) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Bin,
								       0, 0,
								       undefined,
								       undefined,
								       undefined).

'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(<<8,
								     Rest/binary>>,
								   Z1, Z2, F1,
								   F2, F3) ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_host_port'(Rest,
								      Z1, Z2,
								      F1, F2,
								      F3);
'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(<<16,
								     Rest/binary>>,
								   Z1, Z2, F1,
								   F2, F3) ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_container_port'(Rest,
									   Z1,
									   Z2,
									   F1,
									   F2,
									   F3);
'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(<<26,
								     Rest/binary>>,
								   Z1, Z2, F1,
								   F2, F3) ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_protocol'(Rest,
								     Z1, Z2, F1,
								     F2, F3);
'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(<<>>,
								   0, 0, F1, F2,
								   F3) ->
    #'mesos.v1.ContainerInfo.DockerInfo.PortMapping'{host_port
							 = F1,
						     container_port = F2,
						     protocol = F3};
'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Other,
								   Z1, Z2, F1,
								   F2, F3) ->
    'dg_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Other,
								      Z1, Z2,
								      F1, F2,
								      F3).

'dg_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(<<1:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F1,
								  F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Rest,
								      N + 7,
								      X bsl N +
									Acc,
								      F1, F2,
								      F3);
'dg_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(<<0:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F1,
								  F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_host_port'(Rest,
									    0,
									    0,
									    F1,
									    F2,
									    F3);
      16 ->
	  'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_container_port'(Rest,
										 0,
										 0,
										 F1,
										 F2,
										 F3);
      26 ->
	  'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_protocol'(Rest,
									   0, 0,
									   F1,
									   F2,
									   F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Rest,
									    0,
									    0,
									    F1,
									    F2,
									    F3);
	    1 ->
		'skip_64_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Rest,
									0, 0,
									F1, F2,
									F3);
	    2 ->
		'skip_length_delimited_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Rest,
										      0,
										      0,
										      F1,
										      F2,
										      F3);
	    5 ->
		'skip_32_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Rest,
									0, 0,
									F1, F2,
									F3)
	  end
    end;
'dg_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(<<>>,
								  0, 0, F1, F2,
								  F3) ->
    #'mesos.v1.ContainerInfo.DockerInfo.PortMapping'{host_port
							 = F1,
						     container_port = F2,
						     protocol = F3}.

'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_host_port'(<<1:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F1,
								  F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_host_port'(Rest,
								      N + 7,
								      X bsl N +
									Acc,
								      F1, F2,
								      F3);
'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_host_port'(<<0:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, _, F2,
								  F3) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Rest,
								       0, 0,
								       NewFValue,
								       F2, F3).


'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_container_port'(<<1:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F1, F2,
								       F3)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_container_port'(Rest,
									   N +
									     7,
									   X bsl
									     N
									     +
									     Acc,
									   F1,
									   F2,
									   F3);
'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_container_port'(<<0:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F1, _,
								       F3) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Rest,
								       0, 0, F1,
								       NewFValue,
								       F3).


'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_protocol'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F1, F2,
								 F3)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_protocol'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F1, F2,
								     F3);
'd_field_mesos.v1.ContainerInfo.DockerInfo.PortMapping_protocol'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F1, F2,
								 _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Rest2,
								       0, 0, F1,
								       F2,
								       NewFValue).


'skip_varint_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(<<1:1,
							      _:7,
							      Rest/binary>>,
							    Z1, Z2, F1, F2,
							    F3) ->
    'skip_varint_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Rest,
								Z1, Z2, F1, F2,
								F3);
'skip_varint_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(<<0:1,
							      _:7,
							      Rest/binary>>,
							    Z1, Z2, F1, F2,
							    F3) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Rest,
								       Z1, Z2,
								       F1, F2,
								       F3).


'skip_length_delimited_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(<<1:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F1, F2,
								      F3)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Rest,
									  N + 7,
									  X bsl
									    N
									    +
									    Acc,
									  F1,
									  F2,
									  F3);
'skip_length_delimited_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(<<0:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F1, F2,
								      F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Rest2,
								       0, 0, F1,
								       F2, F3).


'skip_32_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(<<_:32,
							  Rest/binary>>,
							Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Rest,
								       Z1, Z2,
								       F1, F2,
								       F3).


'skip_64_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(<<_:64,
							  Rest/binary>>,
							Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Rest,
								       Z1, Z2,
								       F1, F2,
								       F3).


'd_msg_mesos.v1.ContainerInfo.DockerInfo'(Bin) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(Bin,
							   0, 0, undefined,
							   undefined, [],
							   undefined, [],
							   undefined).

'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(<<10,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6) ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo_image'(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6);
'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(<<16,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6) ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo_network'(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6);
'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(<<26,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6) ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo_port_mappings'(Rest,
							      Z1, Z2, F1, F2,
							      F3, F4, F5, F6);
'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(<<32,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6) ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo_privileged'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6);
'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(<<42,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6) ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo_parameters'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6);
'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(<<48,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6) ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo_force_pull_image'(Rest,
								 Z1, Z2, F1, F2,
								 F3, F4, F5,
								 F6);
'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(<<>>,
						       0, 0, F1, F2, F3, F4, F5,
						       F6) ->
    #'mesos.v1.ContainerInfo.DockerInfo'{image = F1,
					 network = F2,
					 port_mappings = lists:reverse(F3),
					 privileged = F4,
					 parameters = lists:reverse(F5),
					 force_pull_image = F6};
'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(Other,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6) ->
    'dg_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(Other,
							  Z1, Z2, F1, F2, F3,
							  F4, F5, F6).

'dg_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, F3, F4, F5,
							  F6);
'dg_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.ContainerInfo.DockerInfo_image'(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6);
      16 ->
	  'd_field_mesos.v1.ContainerInfo.DockerInfo_network'(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6);
      26 ->
	  'd_field_mesos.v1.ContainerInfo.DockerInfo_port_mappings'(Rest,
								    0, 0, F1,
								    F2, F3, F4,
								    F5, F6);
      32 ->
	  'd_field_mesos.v1.ContainerInfo.DockerInfo_privileged'(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5,
								 F6);
      42 ->
	  'd_field_mesos.v1.ContainerInfo.DockerInfo_parameters'(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5,
								 F6);
      48 ->
	  'd_field_mesos.v1.ContainerInfo.DockerInfo_force_pull_image'(Rest,
								       0, 0, F1,
								       F2, F3,
								       F4, F5,
								       F6);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.ContainerInfo.DockerInfo'(Rest, 0,
								0, F1, F2, F3,
								F4, F5, F6);
	    1 ->
		'skip_64_mesos.v1.ContainerInfo.DockerInfo'(Rest, 0, 0,
							    F1, F2, F3, F4, F5,
							    F6);
	    2 ->
		'skip_length_delimited_mesos.v1.ContainerInfo.DockerInfo'(Rest,
									  0, 0,
									  F1,
									  F2,
									  F3,
									  F4,
									  F5,
									  F6);
	    5 ->
		'skip_32_mesos.v1.ContainerInfo.DockerInfo'(Rest, 0, 0,
							    F1, F2, F3, F4, F5,
							    F6)
	  end
    end;
'dg_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(<<>>,
						      0, 0, F1, F2, F3, F4, F5,
						      F6) ->
    #'mesos.v1.ContainerInfo.DockerInfo'{image = F1,
					 network = F2,
					 port_mappings = lists:reverse(F3),
					 privileged = F4,
					 parameters = lists:reverse(F5),
					 force_pull_image = F6}.

'd_field_mesos.v1.ContainerInfo.DockerInfo_image'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo_image'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6);
'd_field_mesos.v1.ContainerInfo.DockerInfo_image'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, _, F2, F3, F4, F5,
						  F6) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(Rest2,
							   0, 0, NewFValue, F2,
							   F3, F4, F5, F6).


'd_field_mesos.v1.ContainerInfo.DockerInfo_network'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo_network'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6);
'd_field_mesos.v1.ContainerInfo.DockerInfo_network'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, _, F3, F4, F5,
						    F6) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue =
	'd_enum_mesos.v1.ContainerInfo.DockerInfo.Network'(Tmp),
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(Rest,
							   0, 0, F1, NewFValue,
							   F3, F4, F5, F6).


'd_field_mesos.v1.ContainerInfo.DockerInfo_port_mappings'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2, F3,
							  F4, F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo_port_mappings'(Rest,
							      N + 7,
							      X bsl N + Acc, F1,
							      F2, F3, F4, F5,
							      F6);
'd_field_mesos.v1.ContainerInfo.DockerInfo_port_mappings'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2, F3,
							  F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.ContainerInfo.DockerInfo.PortMapping'),
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(Rest2,
							   0, 0, F1, F2,
							   [NewFValue | F3], F4,
							   F5, F6).


'd_field_mesos.v1.ContainerInfo.DockerInfo_privileged'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo_privileged'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3, F4, F5,
							   F6);
'd_field_mesos.v1.ContainerInfo.DockerInfo_privileged'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, _,
						       F5, F6) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(Rest,
							   0, 0, F1, F2, F3,
							   NewFValue, F5, F6).


'd_field_mesos.v1.ContainerInfo.DockerInfo_parameters'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo_parameters'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3, F4, F5,
							   F6);
'd_field_mesos.v1.ContainerInfo.DockerInfo_parameters'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Parameter'),
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(Rest2,
							   0, 0, F1, F2, F3, F4,
							   [NewFValue | F5],
							   F6).


'd_field_mesos.v1.ContainerInfo.DockerInfo_force_pull_image'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F1, F2, F3,
							     F4, F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo.DockerInfo_force_pull_image'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F1, F2, F3, F4,
								 F5, F6);
'd_field_mesos.v1.ContainerInfo.DockerInfo_force_pull_image'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F1, F2, F3,
							     F4, F5, _) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, NewFValue).


'skip_varint_mesos.v1.ContainerInfo.DockerInfo'(<<1:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5,
						F6) ->
    'skip_varint_mesos.v1.ContainerInfo.DockerInfo'(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6);
'skip_varint_mesos.v1.ContainerInfo.DockerInfo'(<<0:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5,
						F6) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6).


'skip_length_delimited_mesos.v1.ContainerInfo.DockerInfo'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2, F3,
							  F4, F5, F6)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ContainerInfo.DockerInfo'(Rest,
							      N + 7,
							      X bsl N + Acc, F1,
							      F2, F3, F4, F5,
							      F6);
'skip_length_delimited_mesos.v1.ContainerInfo.DockerInfo'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2, F3,
							  F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(Rest2,
							   0, 0, F1, F2, F3, F4,
							   F5, F6).


'skip_32_mesos.v1.ContainerInfo.DockerInfo'(<<_:32,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6).


'skip_64_mesos.v1.ContainerInfo.DockerInfo'(<<_:64,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo.DockerInfo'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6).


'd_msg_mesos.v1.Volume'(Bin) ->
    'dfp_read_field_def_mesos.v1.Volume'(Bin, 0, 0,
					 undefined, undefined, undefined,
					 undefined).

'dfp_read_field_def_mesos.v1.Volume'(<<24,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4) ->
    'd_field_mesos.v1.Volume_mode'(Rest, Z1, Z2, F1, F2, F3,
				   F4);
'dfp_read_field_def_mesos.v1.Volume'(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4) ->
    'd_field_mesos.v1.Volume_container_path'(Rest, Z1, Z2,
					     F1, F2, F3, F4);
'dfp_read_field_def_mesos.v1.Volume'(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4) ->
    'd_field_mesos.v1.Volume_host_path'(Rest, Z1, Z2, F1,
					F2, F3, F4);
'dfp_read_field_def_mesos.v1.Volume'(<<34,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4) ->
    'd_field_mesos.v1.Volume_image'(Rest, Z1, Z2, F1, F2,
				    F3, F4);
'dfp_read_field_def_mesos.v1.Volume'(<<>>, 0, 0, F1, F2,
				     F3, F4) ->
    #'mesos.v1.Volume'{mode = F1, container_path = F2,
		       host_path = F3, image = F4};
'dfp_read_field_def_mesos.v1.Volume'(Other, Z1, Z2, F1,
				     F2, F3, F4) ->
    'dg_read_field_def_mesos.v1.Volume'(Other, Z1, Z2, F1,
					F2, F3, F4).

'dg_read_field_def_mesos.v1.Volume'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Volume'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4);
'dg_read_field_def_mesos.v1.Volume'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      24 ->
	  'd_field_mesos.v1.Volume_mode'(Rest, 0, 0, F1, F2, F3,
					 F4);
      10 ->
	  'd_field_mesos.v1.Volume_container_path'(Rest, 0, 0, F1,
						   F2, F3, F4);
      18 ->
	  'd_field_mesos.v1.Volume_host_path'(Rest, 0, 0, F1, F2,
					      F3, F4);
      34 ->
	  'd_field_mesos.v1.Volume_image'(Rest, 0, 0, F1, F2, F3,
					  F4);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Volume'(Rest, 0, 0, F1, F2, F3,
					      F4);
	    1 ->
		'skip_64_mesos.v1.Volume'(Rest, 0, 0, F1, F2, F3, F4);
	    2 ->
		'skip_length_delimited_mesos.v1.Volume'(Rest, 0, 0, F1,
							F2, F3, F4);
	    5 ->
		'skip_32_mesos.v1.Volume'(Rest, 0, 0, F1, F2, F3, F4)
	  end
    end;
'dg_read_field_def_mesos.v1.Volume'(<<>>, 0, 0, F1, F2,
				    F3, F4) ->
    #'mesos.v1.Volume'{mode = F1, container_path = F2,
		       host_path = F3, image = F4}.

'd_field_mesos.v1.Volume_mode'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_mesos.v1.Volume_mode'(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4);
'd_field_mesos.v1.Volume_mode'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3, F4) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_mesos.v1.Volume.Mode'(Tmp),
    'dfp_read_field_def_mesos.v1.Volume'(Rest, 0, 0,
					 NewFValue, F2, F3, F4).


'd_field_mesos.v1.Volume_container_path'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_mesos.v1.Volume_container_path'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4);
'd_field_mesos.v1.Volume_container_path'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, _, F3, F4) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Volume'(Rest2, 0, 0, F1,
					 NewFValue, F3, F4).


'd_field_mesos.v1.Volume_host_path'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_mesos.v1.Volume_host_path'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4);
'd_field_mesos.v1.Volume_host_path'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, _, F4) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Volume'(Rest2, 0, 0, F1,
					 F2, NewFValue, F4).


'd_field_mesos.v1.Volume_image'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_mesos.v1.Volume_image'(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4);
'd_field_mesos.v1.Volume_image'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Image'),
    'dfp_read_field_def_mesos.v1.Volume'(Rest2, 0, 0, F1,
					 F2, F3,
					 if F4 == undefined -> NewFValue;
					    true ->
						'merge_msg_mesos.v1.Image'(F4,
									   NewFValue)
					 end).


'skip_varint_mesos.v1.Volume'(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4) ->
    'skip_varint_mesos.v1.Volume'(Rest, Z1, Z2, F1, F2, F3,
				  F4);
'skip_varint_mesos.v1.Volume'(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4) ->
    'dfp_read_field_def_mesos.v1.Volume'(Rest, Z1, Z2, F1,
					 F2, F3, F4).


'skip_length_delimited_mesos.v1.Volume'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Volume'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4);
'skip_length_delimited_mesos.v1.Volume'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Volume'(Rest2, 0, 0, F1,
					 F2, F3, F4).


'skip_32_mesos.v1.Volume'(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4) ->
    'dfp_read_field_def_mesos.v1.Volume'(Rest, Z1, Z2, F1,
					 F2, F3, F4).


'skip_64_mesos.v1.Volume'(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4) ->
    'dfp_read_field_def_mesos.v1.Volume'(Rest, Z1, Z2, F1,
					 F2, F3, F4).


'd_msg_mesos.v1.ContainerInfo'(Bin) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo'(Bin, 0, 0,
						undefined, [], undefined,
						undefined, undefined).

'dfp_read_field_def_mesos.v1.ContainerInfo'(<<8,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.ContainerInfo_type'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5);
'dfp_read_field_def_mesos.v1.ContainerInfo'(<<18,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.ContainerInfo_volumes'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5);
'dfp_read_field_def_mesos.v1.ContainerInfo'(<<34,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.ContainerInfo_hostname'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5);
'dfp_read_field_def_mesos.v1.ContainerInfo'(<<26,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.ContainerInfo_docker'(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5);
'dfp_read_field_def_mesos.v1.ContainerInfo'(<<42,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.ContainerInfo_mesos'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5);
'dfp_read_field_def_mesos.v1.ContainerInfo'(<<>>, 0, 0,
					    F1, F2, F3, F4, F5) ->
    #'mesos.v1.ContainerInfo'{type = F1,
			      volumes = lists:reverse(F2), hostname = F3,
			      docker = F4, mesos = F5};
'dfp_read_field_def_mesos.v1.ContainerInfo'(Other, Z1,
					    Z2, F1, F2, F3, F4, F5) ->
    'dg_read_field_def_mesos.v1.ContainerInfo'(Other, Z1,
					       Z2, F1, F2, F3, F4, F5).

'dg_read_field_def_mesos.v1.ContainerInfo'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ContainerInfo'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5);
'dg_read_field_def_mesos.v1.ContainerInfo'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_mesos.v1.ContainerInfo_type'(Rest, 0, 0, F1,
						F2, F3, F4, F5);
      18 ->
	  'd_field_mesos.v1.ContainerInfo_volumes'(Rest, 0, 0, F1,
						   F2, F3, F4, F5);
      34 ->
	  'd_field_mesos.v1.ContainerInfo_hostname'(Rest, 0, 0,
						    F1, F2, F3, F4, F5);
      26 ->
	  'd_field_mesos.v1.ContainerInfo_docker'(Rest, 0, 0, F1,
						  F2, F3, F4, F5);
      42 ->
	  'd_field_mesos.v1.ContainerInfo_mesos'(Rest, 0, 0, F1,
						 F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.ContainerInfo'(Rest, 0, 0, F1, F2,
						     F3, F4, F5);
	    1 ->
		'skip_64_mesos.v1.ContainerInfo'(Rest, 0, 0, F1, F2, F3,
						 F4, F5);
	    2 ->
		'skip_length_delimited_mesos.v1.ContainerInfo'(Rest, 0,
							       0, F1, F2, F3,
							       F4, F5);
	    5 ->
		'skip_32_mesos.v1.ContainerInfo'(Rest, 0, 0, F1, F2, F3,
						 F4, F5)
	  end
    end;
'dg_read_field_def_mesos.v1.ContainerInfo'(<<>>, 0, 0,
					   F1, F2, F3, F4, F5) ->
    #'mesos.v1.ContainerInfo'{type = F1,
			      volumes = lists:reverse(F2), hostname = F3,
			      docker = F4, mesos = F5}.

'd_field_mesos.v1.ContainerInfo_type'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo_type'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.ContainerInfo_type'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F2, F3, F4, F5) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_mesos.v1.ContainerInfo.Type'(Tmp),
    'dfp_read_field_def_mesos.v1.ContainerInfo'(Rest, 0, 0,
						NewFValue, F2, F3, F4, F5).


'd_field_mesos.v1.ContainerInfo_volumes'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo_volumes'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.ContainerInfo_volumes'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Volume'),
    'dfp_read_field_def_mesos.v1.ContainerInfo'(Rest2, 0, 0,
						F1, [NewFValue | F2], F3, F4,
						F5).


'd_field_mesos.v1.ContainerInfo_hostname'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo_hostname'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4,
					      F5);
'd_field_mesos.v1.ContainerInfo_hostname'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, _, F4, F5) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.ContainerInfo'(Rest2, 0, 0,
						F1, F2, NewFValue, F4, F5).


'd_field_mesos.v1.ContainerInfo_docker'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo_docker'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.ContainerInfo_docker'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.ContainerInfo.DockerInfo'),
    'dfp_read_field_def_mesos.v1.ContainerInfo'(Rest2, 0, 0,
						F1, F2, F3,
						if F4 == undefined -> NewFValue;
						   true ->
						       'merge_msg_mesos.v1.ContainerInfo.DockerInfo'(F4,
												     NewFValue)
						end,
						F5).


'd_field_mesos.v1.ContainerInfo_mesos'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.ContainerInfo_mesos'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.ContainerInfo_mesos'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.ContainerInfo.MesosInfo'),
    'dfp_read_field_def_mesos.v1.ContainerInfo'(Rest2, 0, 0,
						F1, F2, F3, F4,
						if F5 == undefined -> NewFValue;
						   true ->
						       'merge_msg_mesos.v1.ContainerInfo.MesosInfo'(F5,
												    NewFValue)
						end).


'skip_varint_mesos.v1.ContainerInfo'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5) ->
    'skip_varint_mesos.v1.ContainerInfo'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5);
'skip_varint_mesos.v1.ContainerInfo'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5).


'skip_length_delimited_mesos.v1.ContainerInfo'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ContainerInfo'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5);
'skip_length_delimited_mesos.v1.ContainerInfo'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ContainerInfo'(Rest2, 0, 0,
						F1, F2, F3, F4, F5).


'skip_32_mesos.v1.ContainerInfo'(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5).


'skip_64_mesos.v1.ContainerInfo'(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_mesos.v1.ContainerInfo'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5).


'd_msg_mesos.v1.AgentID'(Bin) ->
    'dfp_read_field_def_mesos.v1.AgentID'(Bin, 0, 0,
					  undefined).

'dfp_read_field_def_mesos.v1.AgentID'(<<10,
					Rest/binary>>,
				      Z1, Z2, F1) ->
    'd_field_mesos.v1.AgentID_value'(Rest, Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.AgentID'(<<>>, 0, 0, F1) ->
    #'mesos.v1.AgentID'{value = F1};
'dfp_read_field_def_mesos.v1.AgentID'(Other, Z1, Z2,
				      F1) ->
    'dg_read_field_def_mesos.v1.AgentID'(Other, Z1, Z2, F1).

'dg_read_field_def_mesos.v1.AgentID'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.AgentID'(Rest, N + 7,
					 X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.AgentID'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_mesos.v1.AgentID_value'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.AgentID'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.AgentID'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.AgentID'(Rest, 0, 0,
							 F1);
	    5 -> 'skip_32_mesos.v1.AgentID'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.AgentID'(<<>>, 0, 0, F1) ->
    #'mesos.v1.AgentID'{value = F1}.

'd_field_mesos.v1.AgentID_value'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.AgentID_value'(Rest, N + 7,
				     X bsl N + Acc, F1);
'd_field_mesos.v1.AgentID_value'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.AgentID'(Rest2, 0, 0,
					  NewFValue).


'skip_varint_mesos.v1.AgentID'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1) ->
    'skip_varint_mesos.v1.AgentID'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.AgentID'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.AgentID'(Rest, Z1, Z2, F1).


'skip_length_delimited_mesos.v1.AgentID'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.AgentID'(Rest, N + 7,
					     X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.AgentID'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.AgentID'(Rest2, 0, 0, F1).


'skip_32_mesos.v1.AgentID'(<<_:32, Rest/binary>>, Z1,
			   Z2, F1) ->
    'dfp_read_field_def_mesos.v1.AgentID'(Rest, Z1, Z2, F1).


'skip_64_mesos.v1.AgentID'(<<_:64, Rest/binary>>, Z1,
			   Z2, F1) ->
    'dfp_read_field_def_mesos.v1.AgentID'(Rest, Z1, Z2, F1).


'd_msg_mesos.v1.Value.Text'(Bin) ->
    'dfp_read_field_def_mesos.v1.Value.Text'(Bin, 0, 0,
					     undefined).

'dfp_read_field_def_mesos.v1.Value.Text'(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1) ->
    'd_field_mesos.v1.Value.Text_value'(Rest, Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.Value.Text'(<<>>, 0, 0,
					 F1) ->
    #'mesos.v1.Value.Text'{value = F1};
'dfp_read_field_def_mesos.v1.Value.Text'(Other, Z1, Z2,
					 F1) ->
    'dg_read_field_def_mesos.v1.Value.Text'(Other, Z1, Z2,
					    F1).

'dg_read_field_def_mesos.v1.Value.Text'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Value.Text'(Rest, N + 7,
					    X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.Value.Text'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Value.Text_value'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.Value.Text'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.Value.Text'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Value.Text'(Rest, 0, 0,
							    F1);
	    5 -> 'skip_32_mesos.v1.Value.Text'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Value.Text'(<<>>, 0, 0,
					F1) ->
    #'mesos.v1.Value.Text'{value = F1}.

'd_field_mesos.v1.Value.Text_value'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Value.Text_value'(Rest, N + 7,
					X bsl N + Acc, F1);
'd_field_mesos.v1.Value.Text_value'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Value.Text'(Rest2, 0, 0,
					     NewFValue).


'skip_varint_mesos.v1.Value.Text'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Value.Text'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.Value.Text'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Value.Text'(Rest, Z1, Z2,
					     F1).


'skip_length_delimited_mesos.v1.Value.Text'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Value.Text'(Rest, N + 7,
						X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.Value.Text'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Value.Text'(Rest2, 0, 0,
					     F1).


'skip_32_mesos.v1.Value.Text'(<<_:32, Rest/binary>>, Z1,
			      Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Value.Text'(Rest, Z1, Z2,
					     F1).


'skip_64_mesos.v1.Value.Text'(<<_:64, Rest/binary>>, Z1,
			      Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Value.Text'(Rest, Z1, Z2,
					     F1).


'd_msg_mesos.v1.Value.Set'(Bin) ->
    'dfp_read_field_def_mesos.v1.Value.Set'(Bin, 0, 0, []).

'dfp_read_field_def_mesos.v1.Value.Set'(<<10,
					  Rest/binary>>,
					Z1, Z2, F1) ->
    'd_field_mesos.v1.Value.Set_item'(Rest, Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.Value.Set'(<<>>, 0, 0,
					F1) ->
    #'mesos.v1.Value.Set'{item = lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.Value.Set'(Other, Z1, Z2,
					F1) ->
    'dg_read_field_def_mesos.v1.Value.Set'(Other, Z1, Z2,
					   F1).

'dg_read_field_def_mesos.v1.Value.Set'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Value.Set'(Rest, N + 7,
					   X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.Value.Set'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_mesos.v1.Value.Set_item'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.Value.Set'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.Value.Set'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Value.Set'(Rest, 0, 0,
							   F1);
	    5 -> 'skip_32_mesos.v1.Value.Set'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Value.Set'(<<>>, 0, 0,
				       F1) ->
    #'mesos.v1.Value.Set'{item = lists:reverse(F1)}.

'd_field_mesos.v1.Value.Set_item'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Value.Set_item'(Rest, N + 7,
				      X bsl N + Acc, F1);
'd_field_mesos.v1.Value.Set_item'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Value.Set'(Rest2, 0, 0,
					    [NewFValue | F1]).


'skip_varint_mesos.v1.Value.Set'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Value.Set'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.Value.Set'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Value.Set'(Rest, Z1, Z2,
					    F1).


'skip_length_delimited_mesos.v1.Value.Set'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Value.Set'(Rest, N + 7,
					       X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.Value.Set'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Value.Set'(Rest2, 0, 0,
					    F1).


'skip_32_mesos.v1.Value.Set'(<<_:32, Rest/binary>>, Z1,
			     Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Value.Set'(Rest, Z1, Z2,
					    F1).


'skip_64_mesos.v1.Value.Set'(<<_:64, Rest/binary>>, Z1,
			     Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Value.Set'(Rest, Z1, Z2,
					    F1).


'd_msg_mesos.v1.Value.Range'(Bin) ->
    'dfp_read_field_def_mesos.v1.Value.Range'(Bin, 0, 0,
					      undefined, undefined).

'dfp_read_field_def_mesos.v1.Value.Range'(<<8,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Value.Range_begin'(Rest, Z1, Z2, F1,
					 F2);
'dfp_read_field_def_mesos.v1.Value.Range'(<<16,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Value.Range_end'(Rest, Z1, Z2, F1,
				       F2);
'dfp_read_field_def_mesos.v1.Value.Range'(<<>>, 0, 0,
					  F1, F2) ->
    #'mesos.v1.Value.Range'{'begin' = F1, 'end' = F2};
'dfp_read_field_def_mesos.v1.Value.Range'(Other, Z1, Z2,
					  F1, F2) ->
    'dg_read_field_def_mesos.v1.Value.Range'(Other, Z1, Z2,
					     F1, F2).

'dg_read_field_def_mesos.v1.Value.Range'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Value.Range'(Rest, N + 7,
					     X bsl N + Acc, F1, F2);
'dg_read_field_def_mesos.v1.Value.Range'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_mesos.v1.Value.Range_begin'(Rest, 0, 0, F1,
					       F2);
      16 ->
	  'd_field_mesos.v1.Value.Range_end'(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Value.Range'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_mesos.v1.Value.Range'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.Value.Range'(Rest, 0, 0,
							     F1, F2);
	    5 -> 'skip_32_mesos.v1.Value.Range'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.Value.Range'(<<>>, 0, 0, F1,
					 F2) ->
    #'mesos.v1.Value.Range'{'begin' = F1, 'end' = F2}.

'd_field_mesos.v1.Value.Range_begin'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Value.Range_begin'(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
'd_field_mesos.v1.Value.Range_begin'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F2) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.Value.Range'(Rest, 0, 0,
					      NewFValue, F2).


'd_field_mesos.v1.Value.Range_end'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Value.Range_end'(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
'd_field_mesos.v1.Value.Range_end'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, _) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.Value.Range'(Rest, 0, 0,
					      F1, NewFValue).


'skip_varint_mesos.v1.Value.Range'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.Value.Range'(Rest, Z1, Z2, F1,
				       F2);
'skip_varint_mesos.v1.Value.Range'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Value.Range'(Rest, Z1, Z2,
					      F1, F2).


'skip_length_delimited_mesos.v1.Value.Range'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Value.Range'(Rest,
						 N + 7, X bsl N + Acc, F1, F2);
'skip_length_delimited_mesos.v1.Value.Range'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Value.Range'(Rest2, 0, 0,
					      F1, F2).


'skip_32_mesos.v1.Value.Range'(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Value.Range'(Rest, Z1, Z2,
					      F1, F2).


'skip_64_mesos.v1.Value.Range'(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Value.Range'(Rest, Z1, Z2,
					      F1, F2).


'd_msg_mesos.v1.Value.Ranges'(Bin) ->
    'dfp_read_field_def_mesos.v1.Value.Ranges'(Bin, 0, 0,
					       []).

'dfp_read_field_def_mesos.v1.Value.Ranges'(<<10,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    'd_field_mesos.v1.Value.Ranges_range'(Rest, Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.Value.Ranges'(<<>>, 0, 0,
					   F1) ->
    #'mesos.v1.Value.Ranges'{range = lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.Value.Ranges'(Other, Z1,
					   Z2, F1) ->
    'dg_read_field_def_mesos.v1.Value.Ranges'(Other, Z1, Z2,
					      F1).

'dg_read_field_def_mesos.v1.Value.Ranges'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Value.Ranges'(Rest, N + 7,
					      X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.Value.Ranges'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Value.Ranges_range'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Value.Ranges'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.Value.Ranges'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Value.Ranges'(Rest, 0,
							      0, F1);
	    5 -> 'skip_32_mesos.v1.Value.Ranges'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Value.Ranges'(<<>>, 0, 0,
					  F1) ->
    #'mesos.v1.Value.Ranges'{range = lists:reverse(F1)}.

'd_field_mesos.v1.Value.Ranges_range'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Value.Ranges_range'(Rest, N + 7,
					  X bsl N + Acc, F1);
'd_field_mesos.v1.Value.Ranges_range'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Value.Range'),
    'dfp_read_field_def_mesos.v1.Value.Ranges'(Rest2, 0, 0,
					       [NewFValue | F1]).


'skip_varint_mesos.v1.Value.Ranges'(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Value.Ranges'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.Value.Ranges'(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Value.Ranges'(Rest, Z1, Z2,
					       F1).


'skip_length_delimited_mesos.v1.Value.Ranges'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Value.Ranges'(Rest,
						  N + 7, X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.Value.Ranges'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Value.Ranges'(Rest2, 0, 0,
					       F1).


'skip_32_mesos.v1.Value.Ranges'(<<_:32, Rest/binary>>,
				Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Value.Ranges'(Rest, Z1, Z2,
					       F1).


'skip_64_mesos.v1.Value.Ranges'(<<_:64, Rest/binary>>,
				Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Value.Ranges'(Rest, Z1, Z2,
					       F1).


'd_msg_mesos.v1.Value.Scalar'(Bin) ->
    'dfp_read_field_def_mesos.v1.Value.Scalar'(Bin, 0, 0,
					       undefined).

'dfp_read_field_def_mesos.v1.Value.Scalar'(<<9,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    'd_field_mesos.v1.Value.Scalar_value'(Rest, Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.Value.Scalar'(<<>>, 0, 0,
					   F1) ->
    #'mesos.v1.Value.Scalar'{value = F1};
'dfp_read_field_def_mesos.v1.Value.Scalar'(Other, Z1,
					   Z2, F1) ->
    'dg_read_field_def_mesos.v1.Value.Scalar'(Other, Z1, Z2,
					      F1).

'dg_read_field_def_mesos.v1.Value.Scalar'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Value.Scalar'(Rest, N + 7,
					      X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.Value.Scalar'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  'd_field_mesos.v1.Value.Scalar_value'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Value.Scalar'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.Value.Scalar'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Value.Scalar'(Rest, 0,
							      0, F1);
	    5 -> 'skip_32_mesos.v1.Value.Scalar'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Value.Scalar'(<<>>, 0, 0,
					  F1) ->
    #'mesos.v1.Value.Scalar'{value = F1}.

'd_field_mesos.v1.Value.Scalar_value'(<<Value:64/little-float,
					Rest/binary>>,
				      Z1, Z2, _) ->
    'dfp_read_field_def_mesos.v1.Value.Scalar'(Rest, Z1, Z2,
					       Value).


'skip_varint_mesos.v1.Value.Scalar'(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Value.Scalar'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.Value.Scalar'(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Value.Scalar'(Rest, Z1, Z2,
					       F1).


'skip_length_delimited_mesos.v1.Value.Scalar'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Value.Scalar'(Rest,
						  N + 7, X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.Value.Scalar'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Value.Scalar'(Rest2, 0, 0,
					       F1).


'skip_32_mesos.v1.Value.Scalar'(<<_:32, Rest/binary>>,
				Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Value.Scalar'(Rest, Z1, Z2,
					       F1).


'skip_64_mesos.v1.Value.Scalar'(<<_:64, Rest/binary>>,
				Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Value.Scalar'(Rest, Z1, Z2,
					       F1).


'd_msg_mesos.v1.Attribute'(Bin) ->
    'dfp_read_field_def_mesos.v1.Attribute'(Bin, 0, 0,
					    undefined, undefined, undefined,
					    undefined, undefined, undefined).

'dfp_read_field_def_mesos.v1.Attribute'(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_mesos.v1.Attribute_name'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6);
'dfp_read_field_def_mesos.v1.Attribute'(<<16,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_mesos.v1.Attribute_type'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6);
'dfp_read_field_def_mesos.v1.Attribute'(<<26,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_mesos.v1.Attribute_scalar'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6);
'dfp_read_field_def_mesos.v1.Attribute'(<<34,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_mesos.v1.Attribute_ranges'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6);
'dfp_read_field_def_mesos.v1.Attribute'(<<50,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_mesos.v1.Attribute_set'(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6);
'dfp_read_field_def_mesos.v1.Attribute'(<<42,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_mesos.v1.Attribute_text'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6);
'dfp_read_field_def_mesos.v1.Attribute'(<<>>, 0, 0, F1,
					F2, F3, F4, F5, F6) ->
    #'mesos.v1.Attribute'{name = F1, type = F2, scalar = F3,
			  ranges = F4, set = F5, text = F6};
'dfp_read_field_def_mesos.v1.Attribute'(Other, Z1, Z2,
					F1, F2, F3, F4, F5, F6) ->
    'dg_read_field_def_mesos.v1.Attribute'(Other, Z1, Z2,
					   F1, F2, F3, F4, F5, F6).

'dg_read_field_def_mesos.v1.Attribute'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Attribute'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6);
'dg_read_field_def_mesos.v1.Attribute'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Attribute_name'(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6);
      16 ->
	  'd_field_mesos.v1.Attribute_type'(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6);
      26 ->
	  'd_field_mesos.v1.Attribute_scalar'(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6);
      34 ->
	  'd_field_mesos.v1.Attribute_ranges'(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6);
      50 ->
	  'd_field_mesos.v1.Attribute_set'(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6);
      42 ->
	  'd_field_mesos.v1.Attribute_text'(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Attribute'(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6);
	    1 ->
		'skip_64_mesos.v1.Attribute'(Rest, 0, 0, F1, F2, F3, F4,
					     F5, F6);
	    2 ->
		'skip_length_delimited_mesos.v1.Attribute'(Rest, 0, 0,
							   F1, F2, F3, F4, F5,
							   F6);
	    5 ->
		'skip_32_mesos.v1.Attribute'(Rest, 0, 0, F1, F2, F3, F4,
					     F5, F6)
	  end
    end;
'dg_read_field_def_mesos.v1.Attribute'(<<>>, 0, 0, F1,
				       F2, F3, F4, F5, F6) ->
    #'mesos.v1.Attribute'{name = F1, type = F2, scalar = F3,
			  ranges = F4, set = F5, text = F6}.

'd_field_mesos.v1.Attribute_name'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.Attribute_name'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6);
'd_field_mesos.v1.Attribute_name'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Attribute'(Rest2, 0, 0,
					    NewFValue, F2, F3, F4, F5, F6).


'd_field_mesos.v1.Attribute_type'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.Attribute_type'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6);
'd_field_mesos.v1.Attribute_type'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, F4, F5, F6) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_mesos.v1.Value.Type'(Tmp),
    'dfp_read_field_def_mesos.v1.Attribute'(Rest, 0, 0, F1,
					    NewFValue, F3, F4, F5, F6).


'd_field_mesos.v1.Attribute_scalar'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.Attribute_scalar'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6);
'd_field_mesos.v1.Attribute_scalar'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Value.Scalar'),
    'dfp_read_field_def_mesos.v1.Attribute'(Rest2, 0, 0, F1,
					    F2,
					    if F3 == undefined -> NewFValue;
					       true ->
						   'merge_msg_mesos.v1.Value.Scalar'(F3,
										     NewFValue)
					    end,
					    F4, F5, F6).


'd_field_mesos.v1.Attribute_ranges'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.Attribute_ranges'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6);
'd_field_mesos.v1.Attribute_ranges'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Value.Ranges'),
    'dfp_read_field_def_mesos.v1.Attribute'(Rest2, 0, 0, F1,
					    F2, F3,
					    if F4 == undefined -> NewFValue;
					       true ->
						   'merge_msg_mesos.v1.Value.Ranges'(F4,
										     NewFValue)
					    end,
					    F5, F6).


'd_field_mesos.v1.Attribute_set'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.Attribute_set'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6);
'd_field_mesos.v1.Attribute_set'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Value.Set'),
    'dfp_read_field_def_mesos.v1.Attribute'(Rest2, 0, 0, F1,
					    F2, F3, F4,
					    if F5 == undefined -> NewFValue;
					       true ->
						   'merge_msg_mesos.v1.Value.Set'(F5,
										  NewFValue)
					    end,
					    F6).


'd_field_mesos.v1.Attribute_text'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.Attribute_text'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6);
'd_field_mesos.v1.Attribute_text'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Value.Text'),
    'dfp_read_field_def_mesos.v1.Attribute'(Rest2, 0, 0, F1,
					    F2, F3, F4, F5,
					    if F6 == undefined -> NewFValue;
					       true ->
						   'merge_msg_mesos.v1.Value.Text'(F6,
										   NewFValue)
					    end).


'skip_varint_mesos.v1.Attribute'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'skip_varint_mesos.v1.Attribute'(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6);
'skip_varint_mesos.v1.Attribute'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'dfp_read_field_def_mesos.v1.Attribute'(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6).


'skip_length_delimited_mesos.v1.Attribute'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Attribute'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6);
'skip_length_delimited_mesos.v1.Attribute'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Attribute'(Rest2, 0, 0, F1,
					    F2, F3, F4, F5, F6).


'skip_32_mesos.v1.Attribute'(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6) ->
    'dfp_read_field_def_mesos.v1.Attribute'(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6).


'skip_64_mesos.v1.Attribute'(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6) ->
    'dfp_read_field_def_mesos.v1.Attribute'(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6).


'd_msg_mesos.v1.Resource.RevocableInfo'(Bin) ->
    'dfp_read_field_def_mesos.v1.Resource.RevocableInfo'(Bin,
							 0, 0).

'dfp_read_field_def_mesos.v1.Resource.RevocableInfo'(<<>>,
						     0, 0) ->
    #'mesos.v1.Resource.RevocableInfo'{};
'dfp_read_field_def_mesos.v1.Resource.RevocableInfo'(Other,
						     Z1, Z2) ->
    'dg_read_field_def_mesos.v1.Resource.RevocableInfo'(Other,
							Z1, Z2).

'dg_read_field_def_mesos.v1.Resource.RevocableInfo'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Resource.RevocableInfo'(Rest,
							N + 7, X bsl N + Acc);
'dg_read_field_def_mesos.v1.Resource.RevocableInfo'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  'skip_varint_mesos.v1.Resource.RevocableInfo'(Rest, 0,
							0);
      1 ->
	  'skip_64_mesos.v1.Resource.RevocableInfo'(Rest, 0, 0);
      2 ->
	  'skip_length_delimited_mesos.v1.Resource.RevocableInfo'(Rest,
								  0, 0);
      5 ->
	  'skip_32_mesos.v1.Resource.RevocableInfo'(Rest, 0, 0)
    end;
'dg_read_field_def_mesos.v1.Resource.RevocableInfo'(<<>>,
						    0, 0) ->
    #'mesos.v1.Resource.RevocableInfo'{}.

'skip_varint_mesos.v1.Resource.RevocableInfo'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2) ->
    'skip_varint_mesos.v1.Resource.RevocableInfo'(Rest, Z1,
						  Z2);
'skip_varint_mesos.v1.Resource.RevocableInfo'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2) ->
    'dfp_read_field_def_mesos.v1.Resource.RevocableInfo'(Rest,
							 Z1, Z2).


'skip_length_delimited_mesos.v1.Resource.RevocableInfo'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Resource.RevocableInfo'(Rest,
							    N + 7,
							    X bsl N + Acc);
'skip_length_delimited_mesos.v1.Resource.RevocableInfo'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Resource.RevocableInfo'(Rest2,
							 0, 0).


'skip_32_mesos.v1.Resource.RevocableInfo'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2) ->
    'dfp_read_field_def_mesos.v1.Resource.RevocableInfo'(Rest,
							 Z1, Z2).


'skip_64_mesos.v1.Resource.RevocableInfo'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2) ->
    'dfp_read_field_def_mesos.v1.Resource.RevocableInfo'(Rest,
							 Z1, Z2).


'd_msg_mesos.v1.Resource.DiskInfo.Persistence'(Bin) ->
    'dfp_read_field_def_mesos.v1.Resource.DiskInfo.Persistence'(Bin,
								0, 0,
								undefined).

'dfp_read_field_def_mesos.v1.Resource.DiskInfo.Persistence'(<<10,
							      Rest/binary>>,
							    Z1, Z2, F1) ->
    'd_field_mesos.v1.Resource.DiskInfo.Persistence_id'(Rest,
							Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.Resource.DiskInfo.Persistence'(<<>>,
							    0, 0, F1) ->
    #'mesos.v1.Resource.DiskInfo.Persistence'{id = F1};
'dfp_read_field_def_mesos.v1.Resource.DiskInfo.Persistence'(Other,
							    Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.Resource.DiskInfo.Persistence'(Other,
							       Z1, Z2, F1).

'dg_read_field_def_mesos.v1.Resource.DiskInfo.Persistence'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Resource.DiskInfo.Persistence'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F1);
'dg_read_field_def_mesos.v1.Resource.DiskInfo.Persistence'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Resource.DiskInfo.Persistence_id'(Rest,
							      0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Resource.DiskInfo.Persistence'(Rest,
								     0, 0, F1);
	    1 ->
		'skip_64_mesos.v1.Resource.DiskInfo.Persistence'(Rest,
								 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Resource.DiskInfo.Persistence'(Rest,
									       0,
									       0,
									       F1);
	    5 ->
		'skip_32_mesos.v1.Resource.DiskInfo.Persistence'(Rest,
								 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Resource.DiskInfo.Persistence'(<<>>,
							   0, 0, F1) ->
    #'mesos.v1.Resource.DiskInfo.Persistence'{id = F1}.

'd_field_mesos.v1.Resource.DiskInfo.Persistence_id'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Resource.DiskInfo.Persistence_id'(Rest,
							N + 7, X bsl N + Acc,
							F1);
'd_field_mesos.v1.Resource.DiskInfo.Persistence_id'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Resource.DiskInfo.Persistence'(Rest2,
								0, 0,
								NewFValue).


'skip_varint_mesos.v1.Resource.DiskInfo.Persistence'(<<1:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Resource.DiskInfo.Persistence'(Rest,
							 Z1, Z2, F1);
'skip_varint_mesos.v1.Resource.DiskInfo.Persistence'(<<0:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Resource.DiskInfo.Persistence'(Rest,
								Z1, Z2, F1).


'skip_length_delimited_mesos.v1.Resource.DiskInfo.Persistence'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Resource.DiskInfo.Persistence'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F1);
'skip_length_delimited_mesos.v1.Resource.DiskInfo.Persistence'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Resource.DiskInfo.Persistence'(Rest2,
								0, 0, F1).


'skip_32_mesos.v1.Resource.DiskInfo.Persistence'(<<_:32,
						   Rest/binary>>,
						 Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Resource.DiskInfo.Persistence'(Rest,
								Z1, Z2, F1).


'skip_64_mesos.v1.Resource.DiskInfo.Persistence'(<<_:64,
						   Rest/binary>>,
						 Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Resource.DiskInfo.Persistence'(Rest,
								Z1, Z2, F1).


'd_msg_mesos.v1.Resource.DiskInfo'(Bin) ->
    'dfp_read_field_def_mesos.v1.Resource.DiskInfo'(Bin, 0,
						    0, undefined, undefined).

'dfp_read_field_def_mesos.v1.Resource.DiskInfo'(<<10,
						  Rest/binary>>,
						Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Resource.DiskInfo_persistence'(Rest,
						     Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.Resource.DiskInfo'(<<18,
						  Rest/binary>>,
						Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Resource.DiskInfo_volume'(Rest, Z1,
						Z2, F1, F2);
'dfp_read_field_def_mesos.v1.Resource.DiskInfo'(<<>>, 0,
						0, F1, F2) ->
    #'mesos.v1.Resource.DiskInfo'{persistence = F1,
				  volume = F2};
'dfp_read_field_def_mesos.v1.Resource.DiskInfo'(Other,
						Z1, Z2, F1, F2) ->
    'dg_read_field_def_mesos.v1.Resource.DiskInfo'(Other,
						   Z1, Z2, F1, F2).

'dg_read_field_def_mesos.v1.Resource.DiskInfo'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Resource.DiskInfo'(Rest,
						   N + 7, X bsl N + Acc, F1,
						   F2);
'dg_read_field_def_mesos.v1.Resource.DiskInfo'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Resource.DiskInfo_persistence'(Rest,
							   0, 0, F1, F2);
      18 ->
	  'd_field_mesos.v1.Resource.DiskInfo_volume'(Rest, 0, 0,
						      F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Resource.DiskInfo'(Rest, 0, 0, F1,
							 F2);
	    1 ->
		'skip_64_mesos.v1.Resource.DiskInfo'(Rest, 0, 0, F1,
						     F2);
	    2 ->
		'skip_length_delimited_mesos.v1.Resource.DiskInfo'(Rest,
								   0, 0, F1,
								   F2);
	    5 ->
		'skip_32_mesos.v1.Resource.DiskInfo'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.Resource.DiskInfo'(<<>>, 0,
					       0, F1, F2) ->
    #'mesos.v1.Resource.DiskInfo'{persistence = F1,
				  volume = F2}.

'd_field_mesos.v1.Resource.DiskInfo_persistence'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Resource.DiskInfo_persistence'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2);
'd_field_mesos.v1.Resource.DiskInfo_persistence'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.Resource.DiskInfo.Persistence'),
    'dfp_read_field_def_mesos.v1.Resource.DiskInfo'(Rest2,
						    0, 0,
						    if F1 == undefined ->
							   NewFValue;
						       true ->
							   'merge_msg_mesos.v1.Resource.DiskInfo.Persistence'(F1,
													      NewFValue)
						    end,
						    F2).


'd_field_mesos.v1.Resource.DiskInfo_volume'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Resource.DiskInfo_volume'(Rest, N + 7,
						X bsl N + Acc, F1, F2);
'd_field_mesos.v1.Resource.DiskInfo_volume'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Volume'),
    'dfp_read_field_def_mesos.v1.Resource.DiskInfo'(Rest2,
						    0, 0, F1,
						    if F2 == undefined ->
							   NewFValue;
						       true ->
							   'merge_msg_mesos.v1.Volume'(F2,
										       NewFValue)
						    end).


'skip_varint_mesos.v1.Resource.DiskInfo'(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.Resource.DiskInfo'(Rest, Z1, Z2,
					     F1, F2);
'skip_varint_mesos.v1.Resource.DiskInfo'(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Resource.DiskInfo'(Rest,
						    Z1, Z2, F1, F2).


'skip_length_delimited_mesos.v1.Resource.DiskInfo'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Resource.DiskInfo'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2);
'skip_length_delimited_mesos.v1.Resource.DiskInfo'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Resource.DiskInfo'(Rest2,
						    0, 0, F1, F2).


'skip_32_mesos.v1.Resource.DiskInfo'(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Resource.DiskInfo'(Rest,
						    Z1, Z2, F1, F2).


'skip_64_mesos.v1.Resource.DiskInfo'(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Resource.DiskInfo'(Rest,
						    Z1, Z2, F1, F2).


'd_msg_mesos.v1.Resource.ReservationInfo'(Bin) ->
    'dfp_read_field_def_mesos.v1.Resource.ReservationInfo'(Bin,
							   0, 0, undefined).

'dfp_read_field_def_mesos.v1.Resource.ReservationInfo'(<<10,
							 Rest/binary>>,
						       Z1, Z2, F1) ->
    'd_field_mesos.v1.Resource.ReservationInfo_principal'(Rest,
							  Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.Resource.ReservationInfo'(<<>>,
						       0, 0, F1) ->
    #'mesos.v1.Resource.ReservationInfo'{principal = F1};
'dfp_read_field_def_mesos.v1.Resource.ReservationInfo'(Other,
						       Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.Resource.ReservationInfo'(Other,
							  Z1, Z2, F1).

'dg_read_field_def_mesos.v1.Resource.ReservationInfo'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Resource.ReservationInfo'(Rest,
							  N + 7, X bsl N + Acc,
							  F1);
'dg_read_field_def_mesos.v1.Resource.ReservationInfo'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Resource.ReservationInfo_principal'(Rest,
								0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Resource.ReservationInfo'(Rest, 0,
								0, F1);
	    1 ->
		'skip_64_mesos.v1.Resource.ReservationInfo'(Rest, 0, 0,
							    F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Resource.ReservationInfo'(Rest,
									  0, 0,
									  F1);
	    5 ->
		'skip_32_mesos.v1.Resource.ReservationInfo'(Rest, 0, 0,
							    F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Resource.ReservationInfo'(<<>>,
						      0, 0, F1) ->
    #'mesos.v1.Resource.ReservationInfo'{principal = F1}.

'd_field_mesos.v1.Resource.ReservationInfo_principal'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Resource.ReservationInfo_principal'(Rest,
							  N + 7, X bsl N + Acc,
							  F1);
'd_field_mesos.v1.Resource.ReservationInfo_principal'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Resource.ReservationInfo'(Rest2,
							   0, 0, NewFValue).


'skip_varint_mesos.v1.Resource.ReservationInfo'(<<1:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Resource.ReservationInfo'(Rest,
						    Z1, Z2, F1);
'skip_varint_mesos.v1.Resource.ReservationInfo'(<<0:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Resource.ReservationInfo'(Rest,
							   Z1, Z2, F1).


'skip_length_delimited_mesos.v1.Resource.ReservationInfo'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Resource.ReservationInfo'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F1);
'skip_length_delimited_mesos.v1.Resource.ReservationInfo'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Resource.ReservationInfo'(Rest2,
							   0, 0, F1).


'skip_32_mesos.v1.Resource.ReservationInfo'(<<_:32,
					      Rest/binary>>,
					    Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Resource.ReservationInfo'(Rest,
							   Z1, Z2, F1).


'skip_64_mesos.v1.Resource.ReservationInfo'(<<_:64,
					      Rest/binary>>,
					    Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Resource.ReservationInfo'(Rest,
							   Z1, Z2, F1).


'd_msg_mesos.v1.Resource'(Bin) ->
    'dfp_read_field_def_mesos.v1.Resource'(Bin, 0, 0,
					   undefined, undefined, undefined,
					   undefined, undefined, undefined,
					   undefined, undefined, undefined).

'dfp_read_field_def_mesos.v1.Resource'(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    'd_field_mesos.v1.Resource_name'(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9);
'dfp_read_field_def_mesos.v1.Resource'(<<16,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    'd_field_mesos.v1.Resource_type'(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9);
'dfp_read_field_def_mesos.v1.Resource'(<<26,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    'd_field_mesos.v1.Resource_scalar'(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9);
'dfp_read_field_def_mesos.v1.Resource'(<<34,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    'd_field_mesos.v1.Resource_ranges'(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9);
'dfp_read_field_def_mesos.v1.Resource'(<<42,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    'd_field_mesos.v1.Resource_set'(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9);
'dfp_read_field_def_mesos.v1.Resource'(<<50,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    'd_field_mesos.v1.Resource_role'(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9);
'dfp_read_field_def_mesos.v1.Resource'(<<66,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    'd_field_mesos.v1.Resource_reservation'(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9);
'dfp_read_field_def_mesos.v1.Resource'(<<58,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    'd_field_mesos.v1.Resource_disk'(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9);
'dfp_read_field_def_mesos.v1.Resource'(<<74,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    'd_field_mesos.v1.Resource_revocable'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9);
'dfp_read_field_def_mesos.v1.Resource'(<<>>, 0, 0, F1,
				       F2, F3, F4, F5, F6, F7, F8, F9) ->
    #'mesos.v1.Resource'{name = F1, type = F2, scalar = F3,
			 ranges = F4, set = F5, role = F6, reservation = F7,
			 disk = F8, revocable = F9};
'dfp_read_field_def_mesos.v1.Resource'(Other, Z1, Z2,
				       F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    'dg_read_field_def_mesos.v1.Resource'(Other, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9).

'dg_read_field_def_mesos.v1.Resource'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Resource'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9);
'dg_read_field_def_mesos.v1.Resource'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Resource_name'(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9);
      16 ->
	  'd_field_mesos.v1.Resource_type'(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9);
      26 ->
	  'd_field_mesos.v1.Resource_scalar'(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9);
      34 ->
	  'd_field_mesos.v1.Resource_ranges'(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9);
      42 ->
	  'd_field_mesos.v1.Resource_set'(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9);
      50 ->
	  'd_field_mesos.v1.Resource_role'(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9);
      66 ->
	  'd_field_mesos.v1.Resource_reservation'(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9);
      58 ->
	  'd_field_mesos.v1.Resource_disk'(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9);
      74 ->
	  'd_field_mesos.v1.Resource_revocable'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Resource'(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, F9);
	    1 ->
		'skip_64_mesos.v1.Resource'(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9);
	    2 ->
		'skip_length_delimited_mesos.v1.Resource'(Rest, 0, 0,
							  F1, F2, F3, F4, F5,
							  F6, F7, F8, F9);
	    5 ->
		'skip_32_mesos.v1.Resource'(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9)
	  end
    end;
'dg_read_field_def_mesos.v1.Resource'(<<>>, 0, 0, F1,
				      F2, F3, F4, F5, F6, F7, F8, F9) ->
    #'mesos.v1.Resource'{name = F1, type = F2, scalar = F3,
			 ranges = F4, set = F5, role = F6, reservation = F7,
			 disk = F8, revocable = F9}.

'd_field_mesos.v1.Resource_name'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    'd_field_mesos.v1.Resource_name'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9);
'd_field_mesos.v1.Resource_name'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Resource'(Rest2, 0, 0,
					   NewFValue, F2, F3, F4, F5, F6, F7,
					   F8, F9).


'd_field_mesos.v1.Resource_type'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    'd_field_mesos.v1.Resource_type'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9);
'd_field_mesos.v1.Resource_type'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_mesos.v1.Value.Type'(Tmp),
    'dfp_read_field_def_mesos.v1.Resource'(Rest, 0, 0, F1,
					   NewFValue, F3, F4, F5, F6, F7, F8,
					   F9).


'd_field_mesos.v1.Resource_scalar'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    'd_field_mesos.v1.Resource_scalar'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9);
'd_field_mesos.v1.Resource_scalar'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				   F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Value.Scalar'),
    'dfp_read_field_def_mesos.v1.Resource'(Rest2, 0, 0, F1,
					   F2,
					   if F3 == undefined -> NewFValue;
					      true ->
						  'merge_msg_mesos.v1.Value.Scalar'(F3,
										    NewFValue)
					   end,
					   F4, F5, F6, F7, F8, F9).


'd_field_mesos.v1.Resource_ranges'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    'd_field_mesos.v1.Resource_ranges'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9);
'd_field_mesos.v1.Resource_ranges'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				   F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Value.Ranges'),
    'dfp_read_field_def_mesos.v1.Resource'(Rest2, 0, 0, F1,
					   F2, F3,
					   if F4 == undefined -> NewFValue;
					      true ->
						  'merge_msg_mesos.v1.Value.Ranges'(F4,
										    NewFValue)
					   end,
					   F5, F6, F7, F8, F9).


'd_field_mesos.v1.Resource_set'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    'd_field_mesos.v1.Resource_set'(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9);
'd_field_mesos.v1.Resource_set'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Value.Set'),
    'dfp_read_field_def_mesos.v1.Resource'(Rest2, 0, 0, F1,
					   F2, F3, F4,
					   if F5 == undefined -> NewFValue;
					      true ->
						  'merge_msg_mesos.v1.Value.Set'(F5,
										 NewFValue)
					   end,
					   F6, F7, F8, F9).


'd_field_mesos.v1.Resource_role'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    'd_field_mesos.v1.Resource_role'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9);
'd_field_mesos.v1.Resource_role'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Resource'(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, NewFValue, F7, F8,
					   F9).


'd_field_mesos.v1.Resource_reservation'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9)
    when N < 57 ->
    'd_field_mesos.v1.Resource_reservation'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9);
'd_field_mesos.v1.Resource_reservation'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.Resource.ReservationInfo'),
    'dfp_read_field_def_mesos.v1.Resource'(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6,
					   if F7 == undefined -> NewFValue;
					      true ->
						  'merge_msg_mesos.v1.Resource.ReservationInfo'(F7,
												NewFValue)
					   end,
					   F8, F9).


'd_field_mesos.v1.Resource_disk'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    'd_field_mesos.v1.Resource_disk'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9);
'd_field_mesos.v1.Resource_disk'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.Resource.DiskInfo'),
    'dfp_read_field_def_mesos.v1.Resource'(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7,
					   if F8 == undefined -> NewFValue;
					      true ->
						  'merge_msg_mesos.v1.Resource.DiskInfo'(F8,
											 NewFValue)
					   end,
					   F9).


'd_field_mesos.v1.Resource_revocable'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9)
    when N < 57 ->
    'd_field_mesos.v1.Resource_revocable'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9);
'd_field_mesos.v1.Resource_revocable'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.Resource.RevocableInfo'),
    'dfp_read_field_def_mesos.v1.Resource'(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8,
					   if F9 == undefined -> NewFValue;
					      true ->
						  'merge_msg_mesos.v1.Resource.RevocableInfo'(F9,
											      NewFValue)
					   end).


'skip_varint_mesos.v1.Resource'(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    'skip_varint_mesos.v1.Resource'(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9);
'skip_varint_mesos.v1.Resource'(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    'dfp_read_field_def_mesos.v1.Resource'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9).


'skip_length_delimited_mesos.v1.Resource'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Resource'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9);
'skip_length_delimited_mesos.v1.Resource'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Resource'(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9).


'skip_32_mesos.v1.Resource'(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    'dfp_read_field_def_mesos.v1.Resource'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9).


'skip_64_mesos.v1.Resource'(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    'dfp_read_field_def_mesos.v1.Resource'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9).


'd_msg_mesos.v1.AgentInfo'(Bin) ->
    'dfp_read_field_def_mesos.v1.AgentInfo'(Bin, 0, 0,
					    undefined, undefined, [], [],
					    undefined).

'dfp_read_field_def_mesos.v1.AgentInfo'(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.AgentInfo_hostname'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5);
'dfp_read_field_def_mesos.v1.AgentInfo'(<<64,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.AgentInfo_port'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5);
'dfp_read_field_def_mesos.v1.AgentInfo'(<<26,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.AgentInfo_resources'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5);
'dfp_read_field_def_mesos.v1.AgentInfo'(<<42,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.AgentInfo_attributes'(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5);
'dfp_read_field_def_mesos.v1.AgentInfo'(<<50,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.AgentInfo_id'(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5);
'dfp_read_field_def_mesos.v1.AgentInfo'(<<>>, 0, 0, F1,
					F2, F3, F4, F5) ->
    #'mesos.v1.AgentInfo'{hostname = F1, port = F2,
			  resources = lists:reverse(F3),
			  attributes = lists:reverse(F4), id = F5};
'dfp_read_field_def_mesos.v1.AgentInfo'(Other, Z1, Z2,
					F1, F2, F3, F4, F5) ->
    'dg_read_field_def_mesos.v1.AgentInfo'(Other, Z1, Z2,
					   F1, F2, F3, F4, F5).

'dg_read_field_def_mesos.v1.AgentInfo'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.AgentInfo'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5);
'dg_read_field_def_mesos.v1.AgentInfo'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.AgentInfo_hostname'(Rest, 0, 0, F1,
						F2, F3, F4, F5);
      64 ->
	  'd_field_mesos.v1.AgentInfo_port'(Rest, 0, 0, F1, F2,
					    F3, F4, F5);
      26 ->
	  'd_field_mesos.v1.AgentInfo_resources'(Rest, 0, 0, F1,
						 F2, F3, F4, F5);
      42 ->
	  'd_field_mesos.v1.AgentInfo_attributes'(Rest, 0, 0, F1,
						  F2, F3, F4, F5);
      50 ->
	  'd_field_mesos.v1.AgentInfo_id'(Rest, 0, 0, F1, F2, F3,
					  F4, F5);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.AgentInfo'(Rest, 0, 0, F1, F2, F3,
						 F4, F5);
	    1 ->
		'skip_64_mesos.v1.AgentInfo'(Rest, 0, 0, F1, F2, F3, F4,
					     F5);
	    2 ->
		'skip_length_delimited_mesos.v1.AgentInfo'(Rest, 0, 0,
							   F1, F2, F3, F4, F5);
	    5 ->
		'skip_32_mesos.v1.AgentInfo'(Rest, 0, 0, F1, F2, F3, F4,
					     F5)
	  end
    end;
'dg_read_field_def_mesos.v1.AgentInfo'(<<>>, 0, 0, F1,
				       F2, F3, F4, F5) ->
    #'mesos.v1.AgentInfo'{hostname = F1, port = F2,
			  resources = lists:reverse(F3),
			  attributes = lists:reverse(F4), id = F5}.

'd_field_mesos.v1.AgentInfo_hostname'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.AgentInfo_hostname'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.AgentInfo_hostname'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.AgentInfo'(Rest2, 0, 0,
					    NewFValue, F2, F3, F4, F5).


'd_field_mesos.v1.AgentInfo_port'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.AgentInfo_port'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.AgentInfo_port'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, F4, F5) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'dfp_read_field_def_mesos.v1.AgentInfo'(Rest, 0, 0, F1,
					    NewFValue, F3, F4, F5).


'd_field_mesos.v1.AgentInfo_resources'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.AgentInfo_resources'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.AgentInfo_resources'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Resource'),
    'dfp_read_field_def_mesos.v1.AgentInfo'(Rest2, 0, 0, F1,
					    F2, [NewFValue | F3], F4, F5).


'd_field_mesos.v1.AgentInfo_attributes'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.AgentInfo_attributes'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.AgentInfo_attributes'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Attribute'),
    'dfp_read_field_def_mesos.v1.AgentInfo'(Rest2, 0, 0, F1,
					    F2, F3, [NewFValue | F4], F5).


'd_field_mesos.v1.AgentInfo_id'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.AgentInfo_id'(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.AgentInfo_id'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.AgentID'),
    'dfp_read_field_def_mesos.v1.AgentInfo'(Rest2, 0, 0, F1,
					    F2, F3, F4,
					    if F5 == undefined -> NewFValue;
					       true ->
						   'merge_msg_mesos.v1.AgentID'(F5,
										NewFValue)
					    end).


'skip_varint_mesos.v1.AgentInfo'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5) ->
    'skip_varint_mesos.v1.AgentInfo'(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5);
'skip_varint_mesos.v1.AgentInfo'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_mesos.v1.AgentInfo'(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5).


'skip_length_delimited_mesos.v1.AgentInfo'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.AgentInfo'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5);
'skip_length_delimited_mesos.v1.AgentInfo'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.AgentInfo'(Rest2, 0, 0, F1,
					    F2, F3, F4, F5).


'skip_32_mesos.v1.AgentInfo'(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_mesos.v1.AgentInfo'(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5).


'skip_64_mesos.v1.AgentInfo'(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_mesos.v1.AgentInfo'(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5).


'd_msg_mesos.v1.Request'(Bin) ->
    'dfp_read_field_def_mesos.v1.Request'(Bin, 0, 0,
					  undefined, []).

'dfp_read_field_def_mesos.v1.Request'(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Request_agent_id'(Rest, Z1, Z2, F1,
					F2);
'dfp_read_field_def_mesos.v1.Request'(<<18,
					Rest/binary>>,
				      Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Request_resources'(Rest, Z1, Z2, F1,
					 F2);
'dfp_read_field_def_mesos.v1.Request'(<<>>, 0, 0, F1,
				      F2) ->
    #'mesos.v1.Request'{agent_id = F1,
			resources = lists:reverse(F2)};
'dfp_read_field_def_mesos.v1.Request'(Other, Z1, Z2, F1,
				      F2) ->
    'dg_read_field_def_mesos.v1.Request'(Other, Z1, Z2, F1,
					 F2).

'dg_read_field_def_mesos.v1.Request'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Request'(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
'dg_read_field_def_mesos.v1.Request'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Request_agent_id'(Rest, 0, 0, F1, F2);
      18 ->
	  'd_field_mesos.v1.Request_resources'(Rest, 0, 0, F1,
					       F2);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.Request'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_mesos.v1.Request'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.Request'(Rest, 0, 0, F1,
							 F2);
	    5 -> 'skip_32_mesos.v1.Request'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.Request'(<<>>, 0, 0, F1,
				     F2) ->
    #'mesos.v1.Request'{agent_id = F1,
			resources = lists:reverse(F2)}.

'd_field_mesos.v1.Request_agent_id'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Request_agent_id'(Rest, N + 7,
					X bsl N + Acc, F1, F2);
'd_field_mesos.v1.Request_agent_id'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.AgentID'),
    'dfp_read_field_def_mesos.v1.Request'(Rest2, 0, 0,
					  if F1 == undefined -> NewFValue;
					     true ->
						 'merge_msg_mesos.v1.AgentID'(F1,
									      NewFValue)
					  end,
					  F2).


'd_field_mesos.v1.Request_resources'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Request_resources'(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
'd_field_mesos.v1.Request_resources'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Resource'),
    'dfp_read_field_def_mesos.v1.Request'(Rest2, 0, 0, F1,
					  [NewFValue | F2]).


'skip_varint_mesos.v1.Request'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.Request'(Rest, Z1, Z2, F1, F2);
'skip_varint_mesos.v1.Request'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Request'(Rest, Z1, Z2, F1,
					  F2).


'skip_length_delimited_mesos.v1.Request'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Request'(Rest, N + 7,
					     X bsl N + Acc, F1, F2);
'skip_length_delimited_mesos.v1.Request'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Request'(Rest2, 0, 0, F1,
					  F2).


'skip_32_mesos.v1.Request'(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Request'(Rest, Z1, Z2, F1,
					  F2).


'skip_64_mesos.v1.Request'(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Request'(Rest, Z1, Z2, F1,
					  F2).


'd_msg_mesos.v1.scheduler.Call.Request'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Request'(Bin,
							 0, 0, []).

'dfp_read_field_def_mesos.v1.scheduler.Call.Request'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F1) ->
    'd_field_mesos.v1.scheduler.Call.Request_requests'(Rest,
						       Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.scheduler.Call.Request'(<<>>,
						     0, 0, F1) ->
    #'mesos.v1.scheduler.Call.Request'{requests =
					   lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.scheduler.Call.Request'(Other,
						     Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Request'(Other,
							Z1, Z2, F1).

'dg_read_field_def_mesos.v1.scheduler.Call.Request'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Request'(Rest,
							N + 7, X bsl N + Acc,
							F1);
'dg_read_field_def_mesos.v1.scheduler.Call.Request'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Call.Request_requests'(Rest,
							     0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Call.Request'(Rest, 0,
							      0, F1);
	    1 ->
		'skip_64_mesos.v1.scheduler.Call.Request'(Rest, 0, 0,
							  F1);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Call.Request'(Rest,
									0, 0,
									F1);
	    5 ->
		'skip_32_mesos.v1.scheduler.Call.Request'(Rest, 0, 0,
							  F1)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Call.Request'(<<>>,
						    0, 0, F1) ->
    #'mesos.v1.scheduler.Call.Request'{requests =
					   lists:reverse(F1)}.

'd_field_mesos.v1.scheduler.Call.Request_requests'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Request_requests'(Rest,
						       N + 7, X bsl N + Acc,
						       F1);
'd_field_mesos.v1.scheduler.Call.Request_requests'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Request'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Request'(Rest2,
							 0, 0,
							 [NewFValue | F1]).


'skip_varint_mesos.v1.scheduler.Call.Request'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1) ->
    'skip_varint_mesos.v1.scheduler.Call.Request'(Rest, Z1,
						  Z2, F1);
'skip_varint_mesos.v1.scheduler.Call.Request'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Request'(Rest,
							 Z1, Z2, F1).


'skip_length_delimited_mesos.v1.scheduler.Call.Request'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Call.Request'(Rest,
							    N + 7,
							    X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.scheduler.Call.Request'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Call.Request'(Rest2,
							 0, 0, F1).


'skip_32_mesos.v1.scheduler.Call.Request'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Request'(Rest,
							 Z1, Z2, F1).


'skip_64_mesos.v1.scheduler.Call.Request'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Request'(Rest,
							 Z1, Z2, F1).


'd_msg_mesos.v1.ExecutorID'(Bin) ->
    'dfp_read_field_def_mesos.v1.ExecutorID'(Bin, 0, 0,
					     undefined).

'dfp_read_field_def_mesos.v1.ExecutorID'(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1) ->
    'd_field_mesos.v1.ExecutorID_value'(Rest, Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.ExecutorID'(<<>>, 0, 0,
					 F1) ->
    #'mesos.v1.ExecutorID'{value = F1};
'dfp_read_field_def_mesos.v1.ExecutorID'(Other, Z1, Z2,
					 F1) ->
    'dg_read_field_def_mesos.v1.ExecutorID'(Other, Z1, Z2,
					    F1).

'dg_read_field_def_mesos.v1.ExecutorID'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ExecutorID'(Rest, N + 7,
					    X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.ExecutorID'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.ExecutorID_value'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.ExecutorID'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.ExecutorID'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.ExecutorID'(Rest, 0, 0,
							    F1);
	    5 -> 'skip_32_mesos.v1.ExecutorID'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.ExecutorID'(<<>>, 0, 0,
					F1) ->
    #'mesos.v1.ExecutorID'{value = F1}.

'd_field_mesos.v1.ExecutorID_value'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.ExecutorID_value'(Rest, N + 7,
					X bsl N + Acc, F1);
'd_field_mesos.v1.ExecutorID_value'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.ExecutorID'(Rest2, 0, 0,
					     NewFValue).


'skip_varint_mesos.v1.ExecutorID'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1) ->
    'skip_varint_mesos.v1.ExecutorID'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.ExecutorID'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.ExecutorID'(Rest, Z1, Z2,
					     F1).


'skip_length_delimited_mesos.v1.ExecutorID'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ExecutorID'(Rest, N + 7,
						X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.ExecutorID'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ExecutorID'(Rest2, 0, 0,
					     F1).


'skip_32_mesos.v1.ExecutorID'(<<_:32, Rest/binary>>, Z1,
			      Z2, F1) ->
    'dfp_read_field_def_mesos.v1.ExecutorID'(Rest, Z1, Z2,
					     F1).


'skip_64_mesos.v1.ExecutorID'(<<_:64, Rest/binary>>, Z1,
			      Z2, F1) ->
    'dfp_read_field_def_mesos.v1.ExecutorID'(Rest, Z1, Z2,
					     F1).


'd_msg_mesos.v1.scheduler.Call.Message'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Message'(Bin,
							 0, 0, undefined,
							 undefined, undefined).

'dfp_read_field_def_mesos.v1.scheduler.Call.Message'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Call.Message_agent_id'(Rest,
						       Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Call.Message'(<<18,
						       Rest/binary>>,
						     Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Call.Message_executor_id'(Rest,
							  Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Call.Message'(<<26,
						       Rest/binary>>,
						     Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Call.Message_data'(Rest, Z1,
						   Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Call.Message'(<<>>,
						     0, 0, F1, F2, F3) ->
    #'mesos.v1.scheduler.Call.Message'{agent_id = F1,
				       executor_id = F2, data = F3};
'dfp_read_field_def_mesos.v1.scheduler.Call.Message'(Other,
						     Z1, Z2, F1, F2, F3) ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Message'(Other,
							Z1, Z2, F1, F2, F3).

'dg_read_field_def_mesos.v1.scheduler.Call.Message'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Message'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3);
'dg_read_field_def_mesos.v1.scheduler.Call.Message'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Call.Message_agent_id'(Rest,
							     0, 0, F1, F2, F3);
      18 ->
	  'd_field_mesos.v1.scheduler.Call.Message_executor_id'(Rest,
								0, 0, F1, F2,
								F3);
      26 ->
	  'd_field_mesos.v1.scheduler.Call.Message_data'(Rest, 0,
							 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Call.Message'(Rest, 0,
							      0, F1, F2, F3);
	    1 ->
		'skip_64_mesos.v1.scheduler.Call.Message'(Rest, 0, 0,
							  F1, F2, F3);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Call.Message'(Rest,
									0, 0,
									F1, F2,
									F3);
	    5 ->
		'skip_32_mesos.v1.scheduler.Call.Message'(Rest, 0, 0,
							  F1, F2, F3)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Call.Message'(<<>>,
						    0, 0, F1, F2, F3) ->
    #'mesos.v1.scheduler.Call.Message'{agent_id = F1,
				       executor_id = F2, data = F3}.

'd_field_mesos.v1.scheduler.Call.Message_agent_id'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Message_agent_id'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3);
'd_field_mesos.v1.scheduler.Call.Message_agent_id'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.AgentID'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Message'(Rest2,
							 0, 0,
							 if F1 == undefined ->
								NewFValue;
							    true ->
								'merge_msg_mesos.v1.AgentID'(F1,
											     NewFValue)
							 end,
							 F2, F3).


'd_field_mesos.v1.scheduler.Call.Message_executor_id'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Message_executor_id'(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, F3);
'd_field_mesos.v1.scheduler.Call.Message_executor_id'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ExecutorID'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Message'(Rest2,
							 0, 0, F1,
							 if F2 == undefined ->
								NewFValue;
							    true ->
								'merge_msg_mesos.v1.ExecutorID'(F2,
												NewFValue)
							 end,
							 F3).


'd_field_mesos.v1.scheduler.Call.Message_data'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Message_data'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3);
'd_field_mesos.v1.scheduler.Call.Message_data'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Message'(Rest2,
							 0, 0, F1, F2,
							 NewFValue).


'skip_varint_mesos.v1.scheduler.Call.Message'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1, F2, F3) ->
    'skip_varint_mesos.v1.scheduler.Call.Message'(Rest, Z1,
						  Z2, F1, F2, F3);
'skip_varint_mesos.v1.scheduler.Call.Message'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Message'(Rest,
							 Z1, Z2, F1, F2, F3).


'skip_length_delimited_mesos.v1.scheduler.Call.Message'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Call.Message'(Rest,
							    N + 7,
							    X bsl N + Acc, F1,
							    F2, F3);
'skip_length_delimited_mesos.v1.scheduler.Call.Message'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Call.Message'(Rest2,
							 0, 0, F1, F2, F3).


'skip_32_mesos.v1.scheduler.Call.Message'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Message'(Rest,
							 Z1, Z2, F1, F2, F3).


'skip_64_mesos.v1.scheduler.Call.Message'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Message'(Rest,
							 Z1, Z2, F1, F2, F3).


'd_msg_mesos.v1.TaskID'(Bin) ->
    'dfp_read_field_def_mesos.v1.TaskID'(Bin, 0, 0,
					 undefined).

'dfp_read_field_def_mesos.v1.TaskID'(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1) ->
    'd_field_mesos.v1.TaskID_value'(Rest, Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.TaskID'(<<>>, 0, 0, F1) ->
    #'mesos.v1.TaskID'{value = F1};
'dfp_read_field_def_mesos.v1.TaskID'(Other, Z1, Z2,
				     F1) ->
    'dg_read_field_def_mesos.v1.TaskID'(Other, Z1, Z2, F1).

'dg_read_field_def_mesos.v1.TaskID'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.TaskID'(Rest, N + 7,
					X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.TaskID'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_mesos.v1.TaskID_value'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.TaskID'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.TaskID'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.TaskID'(Rest, 0, 0, F1);
	    5 -> 'skip_32_mesos.v1.TaskID'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.TaskID'(<<>>, 0, 0, F1) ->
    #'mesos.v1.TaskID'{value = F1}.

'd_field_mesos.v1.TaskID_value'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.TaskID_value'(Rest, N + 7,
				    X bsl N + Acc, F1);
'd_field_mesos.v1.TaskID_value'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.TaskID'(Rest2, 0, 0,
					 NewFValue).


'skip_varint_mesos.v1.TaskID'(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1) ->
    'skip_varint_mesos.v1.TaskID'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.TaskID'(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.TaskID'(Rest, Z1, Z2, F1).


'skip_length_delimited_mesos.v1.TaskID'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.TaskID'(Rest, N + 7,
					    X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.TaskID'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.TaskID'(Rest2, 0, 0, F1).


'skip_32_mesos.v1.TaskID'(<<_:32, Rest/binary>>, Z1, Z2,
			  F1) ->
    'dfp_read_field_def_mesos.v1.TaskID'(Rest, Z1, Z2, F1).


'skip_64_mesos.v1.TaskID'(<<_:64, Rest/binary>>, Z1, Z2,
			  F1) ->
    'dfp_read_field_def_mesos.v1.TaskID'(Rest, Z1, Z2, F1).


'd_msg_mesos.v1.scheduler.Call.Reconcile.Task'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(Bin,
								0, 0, undefined,
								undefined).

'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(<<10,
							      Rest/binary>>,
							    Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.scheduler.Call.Reconcile.Task_task_id'(Rest,
							     Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(<<18,
							      Rest/binary>>,
							    Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.scheduler.Call.Reconcile.Task_agent_id'(Rest,
							      Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(<<>>,
							    0, 0, F1, F2) ->
    #'mesos.v1.scheduler.Call.Reconcile.Task'{task_id = F1,
					      agent_id = F2};
'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(Other,
							    Z1, Z2, F1, F2) ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(Other,
							       Z1, Z2, F1, F2).

'dg_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F1, F2);
'dg_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Call.Reconcile.Task_task_id'(Rest,
								   0, 0, F1,
								   F2);
      18 ->
	  'd_field_mesos.v1.scheduler.Call.Reconcile.Task_agent_id'(Rest,
								    0, 0, F1,
								    F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Call.Reconcile.Task'(Rest,
								     0, 0, F1,
								     F2);
	    1 ->
		'skip_64_mesos.v1.scheduler.Call.Reconcile.Task'(Rest,
								 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Call.Reconcile.Task'(Rest,
									       0,
									       0,
									       F1,
									       F2);
	    5 ->
		'skip_32_mesos.v1.scheduler.Call.Reconcile.Task'(Rest,
								 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(<<>>,
							   0, 0, F1, F2) ->
    #'mesos.v1.scheduler.Call.Reconcile.Task'{task_id = F1,
					      agent_id = F2}.

'd_field_mesos.v1.scheduler.Call.Reconcile.Task_task_id'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Reconcile.Task_task_id'(Rest,
							     N + 7,
							     X bsl N + Acc, F1,
							     F2);
'd_field_mesos.v1.scheduler.Call.Reconcile.Task_task_id'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.TaskID'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(Rest2,
								0, 0,
								if F1 ==
								     undefined ->
								       NewFValue;
								   true ->
								       'merge_msg_mesos.v1.TaskID'(F1,
												   NewFValue)
								end,
								F2).


'd_field_mesos.v1.scheduler.Call.Reconcile.Task_agent_id'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Reconcile.Task_agent_id'(Rest,
							      N + 7,
							      X bsl N + Acc, F1,
							      F2);
'd_field_mesos.v1.scheduler.Call.Reconcile.Task_agent_id'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.AgentID'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(Rest2,
								0, 0, F1,
								if F2 ==
								     undefined ->
								       NewFValue;
								   true ->
								       'merge_msg_mesos.v1.AgentID'(F2,
												    NewFValue)
								end).


'skip_varint_mesos.v1.scheduler.Call.Reconcile.Task'(<<1:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.scheduler.Call.Reconcile.Task'(Rest,
							 Z1, Z2, F1, F2);
'skip_varint_mesos.v1.scheduler.Call.Reconcile.Task'(<<0:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(Rest,
								Z1, Z2, F1, F2).


'skip_length_delimited_mesos.v1.scheduler.Call.Reconcile.Task'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Call.Reconcile.Task'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F1, F2);
'skip_length_delimited_mesos.v1.scheduler.Call.Reconcile.Task'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F1,
							       F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(Rest2,
								0, 0, F1, F2).


'skip_32_mesos.v1.scheduler.Call.Reconcile.Task'(<<_:32,
						   Rest/binary>>,
						 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(Rest,
								Z1, Z2, F1, F2).


'skip_64_mesos.v1.scheduler.Call.Reconcile.Task'(<<_:64,
						   Rest/binary>>,
						 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile.Task'(Rest,
								Z1, Z2, F1, F2).


'd_msg_mesos.v1.scheduler.Call.Reconcile'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile'(Bin,
							   0, 0, []).

'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile'(<<10,
							 Rest/binary>>,
						       Z1, Z2, F1) ->
    'd_field_mesos.v1.scheduler.Call.Reconcile_tasks'(Rest,
						      Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile'(<<>>,
						       0, 0, F1) ->
    #'mesos.v1.scheduler.Call.Reconcile'{tasks =
					     lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile'(Other,
						       Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Reconcile'(Other,
							  Z1, Z2, F1).

'dg_read_field_def_mesos.v1.scheduler.Call.Reconcile'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Reconcile'(Rest,
							  N + 7, X bsl N + Acc,
							  F1);
'dg_read_field_def_mesos.v1.scheduler.Call.Reconcile'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Call.Reconcile_tasks'(Rest,
							    0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Call.Reconcile'(Rest, 0,
								0, F1);
	    1 ->
		'skip_64_mesos.v1.scheduler.Call.Reconcile'(Rest, 0, 0,
							    F1);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Call.Reconcile'(Rest,
									  0, 0,
									  F1);
	    5 ->
		'skip_32_mesos.v1.scheduler.Call.Reconcile'(Rest, 0, 0,
							    F1)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Call.Reconcile'(<<>>,
						      0, 0, F1) ->
    #'mesos.v1.scheduler.Call.Reconcile'{tasks =
					     lists:reverse(F1)}.

'd_field_mesos.v1.scheduler.Call.Reconcile_tasks'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Reconcile_tasks'(Rest,
						      N + 7, X bsl N + Acc, F1);
'd_field_mesos.v1.scheduler.Call.Reconcile_tasks'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Call.Reconcile.Task'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile'(Rest2,
							   0, 0,
							   [NewFValue | F1]).


'skip_varint_mesos.v1.scheduler.Call.Reconcile'(<<1:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F1) ->
    'skip_varint_mesos.v1.scheduler.Call.Reconcile'(Rest,
						    Z1, Z2, F1);
'skip_varint_mesos.v1.scheduler.Call.Reconcile'(<<0:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile'(Rest,
							   Z1, Z2, F1).


'skip_length_delimited_mesos.v1.scheduler.Call.Reconcile'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Call.Reconcile'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F1);
'skip_length_delimited_mesos.v1.scheduler.Call.Reconcile'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile'(Rest2,
							   0, 0, F1).


'skip_32_mesos.v1.scheduler.Call.Reconcile'(<<_:32,
					      Rest/binary>>,
					    Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile'(Rest,
							   Z1, Z2, F1).


'skip_64_mesos.v1.scheduler.Call.Reconcile'(<<_:64,
					      Rest/binary>>,
					    Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Reconcile'(Rest,
							   Z1, Z2, F1).


'd_msg_mesos.v1.scheduler.Call.Acknowledge'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(Bin,
							     0, 0, undefined,
							     undefined,
							     undefined).

'dfp_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(<<10,
							   Rest/binary>>,
							 Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Call.Acknowledge_agent_id'(Rest,
							   Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(<<18,
							   Rest/binary>>,
							 Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Call.Acknowledge_task_id'(Rest,
							  Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(<<26,
							   Rest/binary>>,
							 Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Call.Acknowledge_uuid'(Rest,
						       Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(<<>>,
							 0, 0, F1, F2, F3) ->
    #'mesos.v1.scheduler.Call.Acknowledge'{agent_id = F1,
					   task_id = F2, uuid = F3};
'dfp_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(Other,
							 Z1, Z2, F1, F2, F3) ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(Other,
							    Z1, Z2, F1, F2, F3).

'dg_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(Rest,
							    N + 7,
							    X bsl N + Acc, F1,
							    F2, F3);
'dg_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Call.Acknowledge_agent_id'(Rest,
								 0, 0, F1, F2,
								 F3);
      18 ->
	  'd_field_mesos.v1.scheduler.Call.Acknowledge_task_id'(Rest,
								0, 0, F1, F2,
								F3);
      26 ->
	  'd_field_mesos.v1.scheduler.Call.Acknowledge_uuid'(Rest,
							     0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Call.Acknowledge'(Rest,
								  0, 0, F1, F2,
								  F3);
	    1 ->
		'skip_64_mesos.v1.scheduler.Call.Acknowledge'(Rest, 0,
							      0, F1, F2, F3);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Call.Acknowledge'(Rest,
									    0,
									    0,
									    F1,
									    F2,
									    F3);
	    5 ->
		'skip_32_mesos.v1.scheduler.Call.Acknowledge'(Rest, 0,
							      0, F1, F2, F3)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(<<>>,
							0, 0, F1, F2, F3) ->
    #'mesos.v1.scheduler.Call.Acknowledge'{agent_id = F1,
					   task_id = F2, uuid = F3}.

'd_field_mesos.v1.scheduler.Call.Acknowledge_agent_id'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Acknowledge_agent_id'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3);
'd_field_mesos.v1.scheduler.Call.Acknowledge_agent_id'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.AgentID'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(Rest2,
							     0, 0,
							     if F1 ==
								  undefined ->
								    NewFValue;
								true ->
								    'merge_msg_mesos.v1.AgentID'(F1,
												 NewFValue)
							     end,
							     F2, F3).


'd_field_mesos.v1.scheduler.Call.Acknowledge_task_id'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Acknowledge_task_id'(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, F3);
'd_field_mesos.v1.scheduler.Call.Acknowledge_task_id'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.TaskID'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(Rest2,
							     0, 0, F1,
							     if F2 ==
								  undefined ->
								    NewFValue;
								true ->
								    'merge_msg_mesos.v1.TaskID'(F2,
												NewFValue)
							     end,
							     F3).


'd_field_mesos.v1.scheduler.Call.Acknowledge_uuid'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Acknowledge_uuid'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3);
'd_field_mesos.v1.scheduler.Call.Acknowledge_uuid'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(Rest2,
							     0, 0, F1, F2,
							     NewFValue).


'skip_varint_mesos.v1.scheduler.Call.Acknowledge'(<<1:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F1, F2, F3) ->
    'skip_varint_mesos.v1.scheduler.Call.Acknowledge'(Rest,
						      Z1, Z2, F1, F2, F3);
'skip_varint_mesos.v1.scheduler.Call.Acknowledge'(<<0:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(Rest,
							     Z1, Z2, F1, F2,
							     F3).


'skip_length_delimited_mesos.v1.scheduler.Call.Acknowledge'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Call.Acknowledge'(Rest,
								N + 7,
								X bsl N + Acc,
								F1, F2, F3);
'skip_length_delimited_mesos.v1.scheduler.Call.Acknowledge'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2,
							    F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(Rest2,
							     0, 0, F1, F2, F3).


'skip_32_mesos.v1.scheduler.Call.Acknowledge'(<<_:32,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(Rest,
							     Z1, Z2, F1, F2,
							     F3).


'skip_64_mesos.v1.scheduler.Call.Acknowledge'(<<_:64,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Acknowledge'(Rest,
							     Z1, Z2, F1, F2,
							     F3).


'd_msg_mesos.v1.scheduler.Call.Shutdown'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Shutdown'(Bin,
							  0, 0, undefined,
							  undefined).

'dfp_read_field_def_mesos.v1.scheduler.Call.Shutdown'(<<10,
							Rest/binary>>,
						      Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.scheduler.Call.Shutdown_executor_id'(Rest,
							   Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.scheduler.Call.Shutdown'(<<18,
							Rest/binary>>,
						      Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.scheduler.Call.Shutdown_agent_id'(Rest,
							Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.scheduler.Call.Shutdown'(<<>>,
						      0, 0, F1, F2) ->
    #'mesos.v1.scheduler.Call.Shutdown'{executor_id = F1,
					agent_id = F2};
'dfp_read_field_def_mesos.v1.scheduler.Call.Shutdown'(Other,
						      Z1, Z2, F1, F2) ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Shutdown'(Other,
							 Z1, Z2, F1, F2).

'dg_read_field_def_mesos.v1.scheduler.Call.Shutdown'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Shutdown'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2);
'dg_read_field_def_mesos.v1.scheduler.Call.Shutdown'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Call.Shutdown_executor_id'(Rest,
								 0, 0, F1, F2);
      18 ->
	  'd_field_mesos.v1.scheduler.Call.Shutdown_agent_id'(Rest,
							      0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Call.Shutdown'(Rest, 0,
							       0, F1, F2);
	    1 ->
		'skip_64_mesos.v1.scheduler.Call.Shutdown'(Rest, 0, 0,
							   F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Call.Shutdown'(Rest,
									 0, 0,
									 F1,
									 F2);
	    5 ->
		'skip_32_mesos.v1.scheduler.Call.Shutdown'(Rest, 0, 0,
							   F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Call.Shutdown'(<<>>,
						     0, 0, F1, F2) ->
    #'mesos.v1.scheduler.Call.Shutdown'{executor_id = F1,
					agent_id = F2}.

'd_field_mesos.v1.scheduler.Call.Shutdown_executor_id'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Shutdown_executor_id'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2);
'd_field_mesos.v1.scheduler.Call.Shutdown_executor_id'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ExecutorID'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Shutdown'(Rest2,
							  0, 0,
							  if F1 == undefined ->
								 NewFValue;
							     true ->
								 'merge_msg_mesos.v1.ExecutorID'(F1,
												 NewFValue)
							  end,
							  F2).


'd_field_mesos.v1.scheduler.Call.Shutdown_agent_id'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Shutdown_agent_id'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2);
'd_field_mesos.v1.scheduler.Call.Shutdown_agent_id'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.AgentID'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Shutdown'(Rest2,
							  0, 0, F1,
							  if F2 == undefined ->
								 NewFValue;
							     true ->
								 'merge_msg_mesos.v1.AgentID'(F2,
											      NewFValue)
							  end).


'skip_varint_mesos.v1.scheduler.Call.Shutdown'(<<1:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.scheduler.Call.Shutdown'(Rest, Z1,
						   Z2, F1, F2);
'skip_varint_mesos.v1.scheduler.Call.Shutdown'(<<0:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Shutdown'(Rest,
							  Z1, Z2, F1, F2).


'skip_length_delimited_mesos.v1.scheduler.Call.Shutdown'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Call.Shutdown'(Rest,
							     N + 7,
							     X bsl N + Acc, F1,
							     F2);
'skip_length_delimited_mesos.v1.scheduler.Call.Shutdown'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Call.Shutdown'(Rest2,
							  0, 0, F1, F2).


'skip_32_mesos.v1.scheduler.Call.Shutdown'(<<_:32,
					     Rest/binary>>,
					   Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Shutdown'(Rest,
							  Z1, Z2, F1, F2).


'skip_64_mesos.v1.scheduler.Call.Shutdown'(<<_:64,
					     Rest/binary>>,
					   Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Shutdown'(Rest,
							  Z1, Z2, F1, F2).


'd_msg_mesos.v1.scheduler.Call.Kill'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Kill'(Bin,
						      0, 0, undefined,
						      undefined).

'dfp_read_field_def_mesos.v1.scheduler.Call.Kill'(<<10,
						    Rest/binary>>,
						  Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.scheduler.Call.Kill_task_id'(Rest, Z1,
						   Z2, F1, F2);
'dfp_read_field_def_mesos.v1.scheduler.Call.Kill'(<<18,
						    Rest/binary>>,
						  Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.scheduler.Call.Kill_agent_id'(Rest,
						    Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.scheduler.Call.Kill'(<<>>,
						  0, 0, F1, F2) ->
    #'mesos.v1.scheduler.Call.Kill'{task_id = F1,
				    agent_id = F2};
'dfp_read_field_def_mesos.v1.scheduler.Call.Kill'(Other,
						  Z1, Z2, F1, F2) ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Kill'(Other,
						     Z1, Z2, F1, F2).

'dg_read_field_def_mesos.v1.scheduler.Call.Kill'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Kill'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2);
'dg_read_field_def_mesos.v1.scheduler.Call.Kill'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Call.Kill_task_id'(Rest, 0,
							 0, F1, F2);
      18 ->
	  'd_field_mesos.v1.scheduler.Call.Kill_agent_id'(Rest, 0,
							  0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Call.Kill'(Rest, 0, 0,
							   F1, F2);
	    1 ->
		'skip_64_mesos.v1.scheduler.Call.Kill'(Rest, 0, 0, F1,
						       F2);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Call.Kill'(Rest,
								     0, 0, F1,
								     F2);
	    5 ->
		'skip_32_mesos.v1.scheduler.Call.Kill'(Rest, 0, 0, F1,
						       F2)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Call.Kill'(<<>>,
						 0, 0, F1, F2) ->
    #'mesos.v1.scheduler.Call.Kill'{task_id = F1,
				    agent_id = F2}.

'd_field_mesos.v1.scheduler.Call.Kill_task_id'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Kill_task_id'(Rest,
						   N + 7, X bsl N + Acc, F1,
						   F2);
'd_field_mesos.v1.scheduler.Call.Kill_task_id'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.TaskID'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Kill'(Rest2,
						      0, 0,
						      if F1 == undefined ->
							     NewFValue;
							 true ->
							     'merge_msg_mesos.v1.TaskID'(F1,
											 NewFValue)
						      end,
						      F2).


'd_field_mesos.v1.scheduler.Call.Kill_agent_id'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Kill_agent_id'(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2);
'd_field_mesos.v1.scheduler.Call.Kill_agent_id'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.AgentID'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Kill'(Rest2,
						      0, 0, F1,
						      if F2 == undefined ->
							     NewFValue;
							 true ->
							     'merge_msg_mesos.v1.AgentID'(F2,
											  NewFValue)
						      end).


'skip_varint_mesos.v1.scheduler.Call.Kill'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.scheduler.Call.Kill'(Rest, Z1, Z2,
					       F1, F2);
'skip_varint_mesos.v1.scheduler.Call.Kill'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Kill'(Rest,
						      Z1, Z2, F1, F2).


'skip_length_delimited_mesos.v1.scheduler.Call.Kill'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Call.Kill'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2);
'skip_length_delimited_mesos.v1.scheduler.Call.Kill'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Call.Kill'(Rest2,
						      0, 0, F1, F2).


'skip_32_mesos.v1.scheduler.Call.Kill'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Kill'(Rest,
						      Z1, Z2, F1, F2).


'skip_64_mesos.v1.scheduler.Call.Kill'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Kill'(Rest,
						      Z1, Z2, F1, F2).


'd_msg_mesos.v1.Filters'(Bin) ->
    'dfp_read_field_def_mesos.v1.Filters'(Bin, 0, 0,
					  undefined).

'dfp_read_field_def_mesos.v1.Filters'(<<9,
					Rest/binary>>,
				      Z1, Z2, F1) ->
    'd_field_mesos.v1.Filters_refuse_seconds'(Rest, Z1, Z2,
					      F1);
'dfp_read_field_def_mesos.v1.Filters'(<<>>, 0, 0, F1) ->
    #'mesos.v1.Filters'{refuse_seconds = F1};
'dfp_read_field_def_mesos.v1.Filters'(Other, Z1, Z2,
				      F1) ->
    'dg_read_field_def_mesos.v1.Filters'(Other, Z1, Z2, F1).

'dg_read_field_def_mesos.v1.Filters'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Filters'(Rest, N + 7,
					 X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.Filters'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  'd_field_mesos.v1.Filters_refuse_seconds'(Rest, 0, 0,
						    F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.Filters'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.Filters'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Filters'(Rest, 0, 0,
							 F1);
	    5 -> 'skip_32_mesos.v1.Filters'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Filters'(<<>>, 0, 0, F1) ->
    #'mesos.v1.Filters'{refuse_seconds = F1}.

'd_field_mesos.v1.Filters_refuse_seconds'(<<Value:64/little-float,
					    Rest/binary>>,
					  Z1, Z2, _) ->
    'dfp_read_field_def_mesos.v1.Filters'(Rest, Z1, Z2,
					  Value).


'skip_varint_mesos.v1.Filters'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Filters'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.Filters'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Filters'(Rest, Z1, Z2, F1).


'skip_length_delimited_mesos.v1.Filters'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Filters'(Rest, N + 7,
					     X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.Filters'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Filters'(Rest2, 0, 0, F1).


'skip_32_mesos.v1.Filters'(<<_:32, Rest/binary>>, Z1,
			   Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Filters'(Rest, Z1, Z2, F1).


'skip_64_mesos.v1.Filters'(<<_:64, Rest/binary>>, Z1,
			   Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Filters'(Rest, Z1, Z2, F1).


'd_msg_mesos.v1.OfferID'(Bin) ->
    'dfp_read_field_def_mesos.v1.OfferID'(Bin, 0, 0,
					  undefined).

'dfp_read_field_def_mesos.v1.OfferID'(<<10,
					Rest/binary>>,
				      Z1, Z2, F1) ->
    'd_field_mesos.v1.OfferID_value'(Rest, Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.OfferID'(<<>>, 0, 0, F1) ->
    #'mesos.v1.OfferID'{value = F1};
'dfp_read_field_def_mesos.v1.OfferID'(Other, Z1, Z2,
				      F1) ->
    'dg_read_field_def_mesos.v1.OfferID'(Other, Z1, Z2, F1).

'dg_read_field_def_mesos.v1.OfferID'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.OfferID'(Rest, N + 7,
					 X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.OfferID'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_mesos.v1.OfferID_value'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.OfferID'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.OfferID'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.OfferID'(Rest, 0, 0,
							 F1);
	    5 -> 'skip_32_mesos.v1.OfferID'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.OfferID'(<<>>, 0, 0, F1) ->
    #'mesos.v1.OfferID'{value = F1}.

'd_field_mesos.v1.OfferID_value'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.OfferID_value'(Rest, N + 7,
				     X bsl N + Acc, F1);
'd_field_mesos.v1.OfferID_value'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.OfferID'(Rest2, 0, 0,
					  NewFValue).


'skip_varint_mesos.v1.OfferID'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1) ->
    'skip_varint_mesos.v1.OfferID'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.OfferID'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.OfferID'(Rest, Z1, Z2, F1).


'skip_length_delimited_mesos.v1.OfferID'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.OfferID'(Rest, N + 7,
					     X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.OfferID'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.OfferID'(Rest2, 0, 0, F1).


'skip_32_mesos.v1.OfferID'(<<_:32, Rest/binary>>, Z1,
			   Z2, F1) ->
    'dfp_read_field_def_mesos.v1.OfferID'(Rest, Z1, Z2, F1).


'skip_64_mesos.v1.OfferID'(<<_:64, Rest/binary>>, Z1,
			   Z2, F1) ->
    'dfp_read_field_def_mesos.v1.OfferID'(Rest, Z1, Z2, F1).


'd_msg_mesos.v1.scheduler.Call.Decline'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Decline'(Bin,
							 0, 0, [], undefined).

'dfp_read_field_def_mesos.v1.scheduler.Call.Decline'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.scheduler.Call.Decline_offer_ids'(Rest,
							Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.scheduler.Call.Decline'(<<18,
						       Rest/binary>>,
						     Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.scheduler.Call.Decline_filters'(Rest,
						      Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.scheduler.Call.Decline'(<<>>,
						     0, 0, F1, F2) ->
    #'mesos.v1.scheduler.Call.Decline'{offer_ids =
					   lists:reverse(F1),
				       filters = F2};
'dfp_read_field_def_mesos.v1.scheduler.Call.Decline'(Other,
						     Z1, Z2, F1, F2) ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Decline'(Other,
							Z1, Z2, F1, F2).

'dg_read_field_def_mesos.v1.scheduler.Call.Decline'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Decline'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2);
'dg_read_field_def_mesos.v1.scheduler.Call.Decline'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Call.Decline_offer_ids'(Rest,
							      0, 0, F1, F2);
      18 ->
	  'd_field_mesos.v1.scheduler.Call.Decline_filters'(Rest,
							    0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Call.Decline'(Rest, 0,
							      0, F1, F2);
	    1 ->
		'skip_64_mesos.v1.scheduler.Call.Decline'(Rest, 0, 0,
							  F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Call.Decline'(Rest,
									0, 0,
									F1, F2);
	    5 ->
		'skip_32_mesos.v1.scheduler.Call.Decline'(Rest, 0, 0,
							  F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Call.Decline'(<<>>,
						    0, 0, F1, F2) ->
    #'mesos.v1.scheduler.Call.Decline'{offer_ids =
					   lists:reverse(F1),
				       filters = F2}.

'd_field_mesos.v1.scheduler.Call.Decline_offer_ids'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Decline_offer_ids'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2);
'd_field_mesos.v1.scheduler.Call.Decline_offer_ids'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.OfferID'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Decline'(Rest2,
							 0, 0, [NewFValue | F1],
							 F2).


'd_field_mesos.v1.scheduler.Call.Decline_filters'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Decline_filters'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2);
'd_field_mesos.v1.scheduler.Call.Decline_filters'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Filters'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Decline'(Rest2,
							 0, 0, F1,
							 if F2 == undefined ->
								NewFValue;
							    true ->
								'merge_msg_mesos.v1.Filters'(F2,
											     NewFValue)
							 end).


'skip_varint_mesos.v1.scheduler.Call.Decline'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.scheduler.Call.Decline'(Rest, Z1,
						  Z2, F1, F2);
'skip_varint_mesos.v1.scheduler.Call.Decline'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Decline'(Rest,
							 Z1, Z2, F1, F2).


'skip_length_delimited_mesos.v1.scheduler.Call.Decline'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Call.Decline'(Rest,
							    N + 7,
							    X bsl N + Acc, F1,
							    F2);
'skip_length_delimited_mesos.v1.scheduler.Call.Decline'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Call.Decline'(Rest2,
							 0, 0, F1, F2).


'skip_32_mesos.v1.scheduler.Call.Decline'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Decline'(Rest,
							 Z1, Z2, F1, F2).


'skip_64_mesos.v1.scheduler.Call.Decline'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Decline'(Rest,
							 Z1, Z2, F1, F2).


'd_msg_mesos.v1.Offer.Operation.Destroy'(Bin) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Destroy'(Bin,
							  0, 0, []).

'dfp_read_field_def_mesos.v1.Offer.Operation.Destroy'(<<10,
							Rest/binary>>,
						      Z1, Z2, F1) ->
    'd_field_mesos.v1.Offer.Operation.Destroy_volumes'(Rest,
						       Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.Offer.Operation.Destroy'(<<>>,
						      0, 0, F1) ->
    #'mesos.v1.Offer.Operation.Destroy'{volumes =
					    lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.Offer.Operation.Destroy'(Other,
						      Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.Offer.Operation.Destroy'(Other,
							 Z1, Z2, F1).

'dg_read_field_def_mesos.v1.Offer.Operation.Destroy'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Offer.Operation.Destroy'(Rest,
							 N + 7, X bsl N + Acc,
							 F1);
'dg_read_field_def_mesos.v1.Offer.Operation.Destroy'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Offer.Operation.Destroy_volumes'(Rest,
							     0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Offer.Operation.Destroy'(Rest, 0,
							       0, F1);
	    1 ->
		'skip_64_mesos.v1.Offer.Operation.Destroy'(Rest, 0, 0,
							   F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Offer.Operation.Destroy'(Rest,
									 0, 0,
									 F1);
	    5 ->
		'skip_32_mesos.v1.Offer.Operation.Destroy'(Rest, 0, 0,
							   F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Offer.Operation.Destroy'(<<>>,
						     0, 0, F1) ->
    #'mesos.v1.Offer.Operation.Destroy'{volumes =
					    lists:reverse(F1)}.

'd_field_mesos.v1.Offer.Operation.Destroy_volumes'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Offer.Operation.Destroy_volumes'(Rest,
						       N + 7, X bsl N + Acc,
						       F1);
'd_field_mesos.v1.Offer.Operation.Destroy_volumes'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Resource'),
    'dfp_read_field_def_mesos.v1.Offer.Operation.Destroy'(Rest2,
							  0, 0,
							  [NewFValue | F1]).


'skip_varint_mesos.v1.Offer.Operation.Destroy'(<<1:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Offer.Operation.Destroy'(Rest, Z1,
						   Z2, F1);
'skip_varint_mesos.v1.Offer.Operation.Destroy'(<<0:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Destroy'(Rest,
							  Z1, Z2, F1).


'skip_length_delimited_mesos.v1.Offer.Operation.Destroy'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Offer.Operation.Destroy'(Rest,
							     N + 7,
							     X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.Offer.Operation.Destroy'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Offer.Operation.Destroy'(Rest2,
							  0, 0, F1).


'skip_32_mesos.v1.Offer.Operation.Destroy'(<<_:32,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Destroy'(Rest,
							  Z1, Z2, F1).


'skip_64_mesos.v1.Offer.Operation.Destroy'(<<_:64,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Destroy'(Rest,
							  Z1, Z2, F1).


'd_msg_mesos.v1.Offer.Operation.Create'(Bin) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Create'(Bin,
							 0, 0, []).

'dfp_read_field_def_mesos.v1.Offer.Operation.Create'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F1) ->
    'd_field_mesos.v1.Offer.Operation.Create_volumes'(Rest,
						      Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.Offer.Operation.Create'(<<>>,
						     0, 0, F1) ->
    #'mesos.v1.Offer.Operation.Create'{volumes =
					   lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.Offer.Operation.Create'(Other,
						     Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.Offer.Operation.Create'(Other,
							Z1, Z2, F1).

'dg_read_field_def_mesos.v1.Offer.Operation.Create'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Offer.Operation.Create'(Rest,
							N + 7, X bsl N + Acc,
							F1);
'dg_read_field_def_mesos.v1.Offer.Operation.Create'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Offer.Operation.Create_volumes'(Rest,
							    0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Offer.Operation.Create'(Rest, 0,
							      0, F1);
	    1 ->
		'skip_64_mesos.v1.Offer.Operation.Create'(Rest, 0, 0,
							  F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Offer.Operation.Create'(Rest,
									0, 0,
									F1);
	    5 ->
		'skip_32_mesos.v1.Offer.Operation.Create'(Rest, 0, 0,
							  F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Offer.Operation.Create'(<<>>,
						    0, 0, F1) ->
    #'mesos.v1.Offer.Operation.Create'{volumes =
					   lists:reverse(F1)}.

'd_field_mesos.v1.Offer.Operation.Create_volumes'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Offer.Operation.Create_volumes'(Rest,
						      N + 7, X bsl N + Acc, F1);
'd_field_mesos.v1.Offer.Operation.Create_volumes'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Resource'),
    'dfp_read_field_def_mesos.v1.Offer.Operation.Create'(Rest2,
							 0, 0,
							 [NewFValue | F1]).


'skip_varint_mesos.v1.Offer.Operation.Create'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Offer.Operation.Create'(Rest, Z1,
						  Z2, F1);
'skip_varint_mesos.v1.Offer.Operation.Create'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Create'(Rest,
							 Z1, Z2, F1).


'skip_length_delimited_mesos.v1.Offer.Operation.Create'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Offer.Operation.Create'(Rest,
							    N + 7,
							    X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.Offer.Operation.Create'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Offer.Operation.Create'(Rest2,
							 0, 0, F1).


'skip_32_mesos.v1.Offer.Operation.Create'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Create'(Rest,
							 Z1, Z2, F1).


'skip_64_mesos.v1.Offer.Operation.Create'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Create'(Rest,
							 Z1, Z2, F1).


'd_msg_mesos.v1.Offer.Operation.Unreserve'(Bin) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Unreserve'(Bin,
							    0, 0, []).

'dfp_read_field_def_mesos.v1.Offer.Operation.Unreserve'(<<10,
							  Rest/binary>>,
							Z1, Z2, F1) ->
    'd_field_mesos.v1.Offer.Operation.Unreserve_resources'(Rest,
							   Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.Offer.Operation.Unreserve'(<<>>,
							0, 0, F1) ->
    #'mesos.v1.Offer.Operation.Unreserve'{resources =
					      lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.Offer.Operation.Unreserve'(Other,
							Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.Offer.Operation.Unreserve'(Other,
							   Z1, Z2, F1).

'dg_read_field_def_mesos.v1.Offer.Operation.Unreserve'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Offer.Operation.Unreserve'(Rest,
							   N + 7, X bsl N + Acc,
							   F1);
'dg_read_field_def_mesos.v1.Offer.Operation.Unreserve'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Offer.Operation.Unreserve_resources'(Rest,
								 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Offer.Operation.Unreserve'(Rest,
								 0, 0, F1);
	    1 ->
		'skip_64_mesos.v1.Offer.Operation.Unreserve'(Rest, 0, 0,
							     F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Offer.Operation.Unreserve'(Rest,
									   0, 0,
									   F1);
	    5 ->
		'skip_32_mesos.v1.Offer.Operation.Unreserve'(Rest, 0, 0,
							     F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Offer.Operation.Unreserve'(<<>>,
						       0, 0, F1) ->
    #'mesos.v1.Offer.Operation.Unreserve'{resources =
					      lists:reverse(F1)}.

'd_field_mesos.v1.Offer.Operation.Unreserve_resources'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Offer.Operation.Unreserve_resources'(Rest,
							   N + 7, X bsl N + Acc,
							   F1);
'd_field_mesos.v1.Offer.Operation.Unreserve_resources'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Resource'),
    'dfp_read_field_def_mesos.v1.Offer.Operation.Unreserve'(Rest2,
							    0, 0,
							    [NewFValue | F1]).


'skip_varint_mesos.v1.Offer.Operation.Unreserve'(<<1:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Offer.Operation.Unreserve'(Rest,
						     Z1, Z2, F1);
'skip_varint_mesos.v1.Offer.Operation.Unreserve'(<<0:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Unreserve'(Rest,
							    Z1, Z2, F1).


'skip_length_delimited_mesos.v1.Offer.Operation.Unreserve'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Offer.Operation.Unreserve'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F1);
'skip_length_delimited_mesos.v1.Offer.Operation.Unreserve'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Offer.Operation.Unreserve'(Rest2,
							    0, 0, F1).


'skip_32_mesos.v1.Offer.Operation.Unreserve'(<<_:32,
					       Rest/binary>>,
					     Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Unreserve'(Rest,
							    Z1, Z2, F1).


'skip_64_mesos.v1.Offer.Operation.Unreserve'(<<_:64,
					       Rest/binary>>,
					     Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Unreserve'(Rest,
							    Z1, Z2, F1).


'd_msg_mesos.v1.Offer.Operation.Reserve'(Bin) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Reserve'(Bin,
							  0, 0, []).

'dfp_read_field_def_mesos.v1.Offer.Operation.Reserve'(<<10,
							Rest/binary>>,
						      Z1, Z2, F1) ->
    'd_field_mesos.v1.Offer.Operation.Reserve_resources'(Rest,
							 Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.Offer.Operation.Reserve'(<<>>,
						      0, 0, F1) ->
    #'mesos.v1.Offer.Operation.Reserve'{resources =
					    lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.Offer.Operation.Reserve'(Other,
						      Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.Offer.Operation.Reserve'(Other,
							 Z1, Z2, F1).

'dg_read_field_def_mesos.v1.Offer.Operation.Reserve'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Offer.Operation.Reserve'(Rest,
							 N + 7, X bsl N + Acc,
							 F1);
'dg_read_field_def_mesos.v1.Offer.Operation.Reserve'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Offer.Operation.Reserve_resources'(Rest,
							       0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Offer.Operation.Reserve'(Rest, 0,
							       0, F1);
	    1 ->
		'skip_64_mesos.v1.Offer.Operation.Reserve'(Rest, 0, 0,
							   F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Offer.Operation.Reserve'(Rest,
									 0, 0,
									 F1);
	    5 ->
		'skip_32_mesos.v1.Offer.Operation.Reserve'(Rest, 0, 0,
							   F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Offer.Operation.Reserve'(<<>>,
						     0, 0, F1) ->
    #'mesos.v1.Offer.Operation.Reserve'{resources =
					    lists:reverse(F1)}.

'd_field_mesos.v1.Offer.Operation.Reserve_resources'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Offer.Operation.Reserve_resources'(Rest,
							 N + 7, X bsl N + Acc,
							 F1);
'd_field_mesos.v1.Offer.Operation.Reserve_resources'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Resource'),
    'dfp_read_field_def_mesos.v1.Offer.Operation.Reserve'(Rest2,
							  0, 0,
							  [NewFValue | F1]).


'skip_varint_mesos.v1.Offer.Operation.Reserve'(<<1:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Offer.Operation.Reserve'(Rest, Z1,
						   Z2, F1);
'skip_varint_mesos.v1.Offer.Operation.Reserve'(<<0:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Reserve'(Rest,
							  Z1, Z2, F1).


'skip_length_delimited_mesos.v1.Offer.Operation.Reserve'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Offer.Operation.Reserve'(Rest,
							     N + 7,
							     X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.Offer.Operation.Reserve'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Offer.Operation.Reserve'(Rest2,
							  0, 0, F1).


'skip_32_mesos.v1.Offer.Operation.Reserve'(<<_:32,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Reserve'(Rest,
							  Z1, Z2, F1).


'skip_64_mesos.v1.Offer.Operation.Reserve'(<<_:64,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Reserve'(Rest,
							  Z1, Z2, F1).


'd_msg_mesos.v1.Port'(Bin) ->
    'dfp_read_field_def_mesos.v1.Port'(Bin, 0, 0, undefined,
				       undefined, undefined).

'dfp_read_field_def_mesos.v1.Port'(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.Port_number'(Rest, Z1, Z2, F1, F2,
				   F3);
'dfp_read_field_def_mesos.v1.Port'(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.Port_name'(Rest, Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.Port'(<<26, Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.Port_protocol'(Rest, Z1, Z2, F1, F2,
				     F3);
'dfp_read_field_def_mesos.v1.Port'(<<>>, 0, 0, F1, F2,
				   F3) ->
    #'mesos.v1.Port'{number = F1, name = F2, protocol = F3};
'dfp_read_field_def_mesos.v1.Port'(Other, Z1, Z2, F1,
				   F2, F3) ->
    'dg_read_field_def_mesos.v1.Port'(Other, Z1, Z2, F1, F2,
				      F3).

'dg_read_field_def_mesos.v1.Port'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Port'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3);
'dg_read_field_def_mesos.v1.Port'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_mesos.v1.Port_number'(Rest, 0, 0, F1, F2, F3);
      18 ->
	  'd_field_mesos.v1.Port_name'(Rest, 0, 0, F1, F2, F3);
      26 ->
	  'd_field_mesos.v1.Port_protocol'(Rest, 0, 0, F1, F2,
					   F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Port'(Rest, 0, 0, F1, F2, F3);
	    1 -> 'skip_64_mesos.v1.Port'(Rest, 0, 0, F1, F2, F3);
	    2 ->
		'skip_length_delimited_mesos.v1.Port'(Rest, 0, 0, F1,
						      F2, F3);
	    5 -> 'skip_32_mesos.v1.Port'(Rest, 0, 0, F1, F2, F3)
	  end
    end;
'dg_read_field_def_mesos.v1.Port'(<<>>, 0, 0, F1, F2,
				  F3) ->
    #'mesos.v1.Port'{number = F1, name = F2, protocol = F3}.

'd_field_mesos.v1.Port_number'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.Port_number'(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3);
'd_field_mesos.v1.Port_number'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.Port'(Rest, 0, 0,
				       NewFValue, F2, F3).


'd_field_mesos.v1.Port_name'(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.Port_name'(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3);
'd_field_mesos.v1.Port_name'(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Port'(Rest2, 0, 0, F1,
				       NewFValue, F3).


'd_field_mesos.v1.Port_protocol'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.Port_protocol'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3);
'd_field_mesos.v1.Port_protocol'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Port'(Rest2, 0, 0, F1, F2,
				       NewFValue).


'skip_varint_mesos.v1.Port'(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3) ->
    'skip_varint_mesos.v1.Port'(Rest, Z1, Z2, F1, F2, F3);
'skip_varint_mesos.v1.Port'(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.Port'(Rest, Z1, Z2, F1, F2,
				       F3).


'skip_length_delimited_mesos.v1.Port'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Port'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3);
'skip_length_delimited_mesos.v1.Port'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Port'(Rest2, 0, 0, F1, F2,
				       F3).


'skip_32_mesos.v1.Port'(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.Port'(Rest, Z1, Z2, F1, F2,
				       F3).


'skip_64_mesos.v1.Port'(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.Port'(Rest, Z1, Z2, F1, F2,
				       F3).


'd_msg_mesos.v1.Ports'(Bin) ->
    'dfp_read_field_def_mesos.v1.Ports'(Bin, 0, 0, []).

'dfp_read_field_def_mesos.v1.Ports'(<<10, Rest/binary>>,
				    Z1, Z2, F1) ->
    'd_field_mesos.v1.Ports_ports'(Rest, Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.Ports'(<<>>, 0, 0, F1) ->
    #'mesos.v1.Ports'{ports = lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.Ports'(Other, Z1, Z2,
				    F1) ->
    'dg_read_field_def_mesos.v1.Ports'(Other, Z1, Z2, F1).

'dg_read_field_def_mesos.v1.Ports'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Ports'(Rest, N + 7,
				       X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.Ports'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_mesos.v1.Ports_ports'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.Ports'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.Ports'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Ports'(Rest, 0, 0, F1);
	    5 -> 'skip_32_mesos.v1.Ports'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Ports'(<<>>, 0, 0, F1) ->
    #'mesos.v1.Ports'{ports = lists:reverse(F1)}.

'd_field_mesos.v1.Ports_ports'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Ports_ports'(Rest, N + 7,
				   X bsl N + Acc, F1);
'd_field_mesos.v1.Ports_ports'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Port'),
    'dfp_read_field_def_mesos.v1.Ports'(Rest2, 0, 0,
					[NewFValue | F1]).


'skip_varint_mesos.v1.Ports'(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Ports'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.Ports'(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Ports'(Rest, Z1, Z2, F1).


'skip_length_delimited_mesos.v1.Ports'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Ports'(Rest, N + 7,
					   X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.Ports'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Ports'(Rest2, 0, 0, F1).


'skip_32_mesos.v1.Ports'(<<_:32, Rest/binary>>, Z1, Z2,
			 F1) ->
    'dfp_read_field_def_mesos.v1.Ports'(Rest, Z1, Z2, F1).


'skip_64_mesos.v1.Ports'(<<_:64, Rest/binary>>, Z1, Z2,
			 F1) ->
    'dfp_read_field_def_mesos.v1.Ports'(Rest, Z1, Z2, F1).


'd_msg_mesos.v1.DiscoveryInfo'(Bin) ->
    'dfp_read_field_def_mesos.v1.DiscoveryInfo'(Bin, 0, 0,
						undefined, undefined, undefined,
						undefined, undefined, undefined,
						undefined).

'dfp_read_field_def_mesos.v1.DiscoveryInfo'(<<8,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6,
					    F7) ->
    'd_field_mesos.v1.DiscoveryInfo_visibility'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.DiscoveryInfo'(<<18,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6,
					    F7) ->
    'd_field_mesos.v1.DiscoveryInfo_name'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.DiscoveryInfo'(<<26,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6,
					    F7) ->
    'd_field_mesos.v1.DiscoveryInfo_environment'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6,
						 F7);
'dfp_read_field_def_mesos.v1.DiscoveryInfo'(<<34,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6,
					    F7) ->
    'd_field_mesos.v1.DiscoveryInfo_location'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.DiscoveryInfo'(<<42,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6,
					    F7) ->
    'd_field_mesos.v1.DiscoveryInfo_version'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.DiscoveryInfo'(<<50,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6,
					    F7) ->
    'd_field_mesos.v1.DiscoveryInfo_ports'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.DiscoveryInfo'(<<58,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6,
					    F7) ->
    'd_field_mesos.v1.DiscoveryInfo_labels'(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.DiscoveryInfo'(<<>>, 0, 0,
					    F1, F2, F3, F4, F5, F6, F7) ->
    #'mesos.v1.DiscoveryInfo'{visibility = F1, name = F2,
			      environment = F3, location = F4, version = F5,
			      ports = F6, labels = F7};
'dfp_read_field_def_mesos.v1.DiscoveryInfo'(Other, Z1,
					    Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dg_read_field_def_mesos.v1.DiscoveryInfo'(Other, Z1,
					       Z2, F1, F2, F3, F4, F5, F6, F7).

'dg_read_field_def_mesos.v1.DiscoveryInfo'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.DiscoveryInfo'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7);
'dg_read_field_def_mesos.v1.DiscoveryInfo'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6,
					   F7) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_mesos.v1.DiscoveryInfo_visibility'(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7);
      18 ->
	  'd_field_mesos.v1.DiscoveryInfo_name'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7);
      26 ->
	  'd_field_mesos.v1.DiscoveryInfo_environment'(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7);
      34 ->
	  'd_field_mesos.v1.DiscoveryInfo_location'(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7);
      42 ->
	  'd_field_mesos.v1.DiscoveryInfo_version'(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7);
      50 ->
	  'd_field_mesos.v1.DiscoveryInfo_ports'(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7);
      58 ->
	  'd_field_mesos.v1.DiscoveryInfo_labels'(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.DiscoveryInfo'(Rest, 0, 0, F1, F2,
						     F3, F4, F5, F6, F7);
	    1 ->
		'skip_64_mesos.v1.DiscoveryInfo'(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7);
	    2 ->
		'skip_length_delimited_mesos.v1.DiscoveryInfo'(Rest, 0,
							       0, F1, F2, F3,
							       F4, F5, F6, F7);
	    5 ->
		'skip_32_mesos.v1.DiscoveryInfo'(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7)
	  end
    end;
'dg_read_field_def_mesos.v1.DiscoveryInfo'(<<>>, 0, 0,
					   F1, F2, F3, F4, F5, F6, F7) ->
    #'mesos.v1.DiscoveryInfo'{visibility = F1, name = F2,
			      environment = F3, location = F4, version = F5,
			      ports = F6, labels = F7}.

'd_field_mesos.v1.DiscoveryInfo_visibility'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.DiscoveryInfo_visibility'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7);
'd_field_mesos.v1.DiscoveryInfo_visibility'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F2, F3, F4, F5, F6,
					    F7) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue =
	'd_enum_mesos.v1.DiscoveryInfo.Visibility'(Tmp),
    'dfp_read_field_def_mesos.v1.DiscoveryInfo'(Rest, 0, 0,
						NewFValue, F2, F3, F4, F5, F6,
						F7).


'd_field_mesos.v1.DiscoveryInfo_name'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.DiscoveryInfo_name'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7);
'd_field_mesos.v1.DiscoveryInfo_name'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, _, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.DiscoveryInfo'(Rest2, 0, 0,
						F1, NewFValue, F3, F4, F5, F6,
						F7).


'd_field_mesos.v1.DiscoveryInfo_environment'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.DiscoveryInfo_environment'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7);
'd_field_mesos.v1.DiscoveryInfo_environment'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, _, F4, F5, F6,
					     F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.DiscoveryInfo'(Rest2, 0, 0,
						F1, F2, NewFValue, F4, F5, F6,
						F7).


'd_field_mesos.v1.DiscoveryInfo_location'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.DiscoveryInfo_location'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7);
'd_field_mesos.v1.DiscoveryInfo_location'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, _, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.DiscoveryInfo'(Rest2, 0, 0,
						F1, F2, F3, NewFValue, F5, F6,
						F7).


'd_field_mesos.v1.DiscoveryInfo_version'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.DiscoveryInfo_version'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7);
'd_field_mesos.v1.DiscoveryInfo_version'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, _, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.DiscoveryInfo'(Rest2, 0, 0,
						F1, F2, F3, F4, NewFValue, F6,
						F7).


'd_field_mesos.v1.DiscoveryInfo_ports'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.DiscoveryInfo_ports'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7);
'd_field_mesos.v1.DiscoveryInfo_ports'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Ports'),
    'dfp_read_field_def_mesos.v1.DiscoveryInfo'(Rest2, 0, 0,
						F1, F2, F3, F4, F5,
						if F6 == undefined -> NewFValue;
						   true ->
						       'merge_msg_mesos.v1.Ports'(F6,
										  NewFValue)
						end,
						F7).


'd_field_mesos.v1.DiscoveryInfo_labels'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.DiscoveryInfo_labels'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7);
'd_field_mesos.v1.DiscoveryInfo_labels'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Labels'),
    'dfp_read_field_def_mesos.v1.DiscoveryInfo'(Rest2, 0, 0,
						F1, F2, F3, F4, F5, F6,
						if F7 == undefined -> NewFValue;
						   true ->
						       'merge_msg_mesos.v1.Labels'(F7,
										   NewFValue)
						end).


'skip_varint_mesos.v1.DiscoveryInfo'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'skip_varint_mesos.v1.DiscoveryInfo'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7);
'skip_varint_mesos.v1.DiscoveryInfo'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_mesos.v1.DiscoveryInfo'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7).


'skip_length_delimited_mesos.v1.DiscoveryInfo'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.DiscoveryInfo'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7);
'skip_length_delimited_mesos.v1.DiscoveryInfo'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.DiscoveryInfo'(Rest2, 0, 0,
						F1, F2, F3, F4, F5, F6, F7).


'skip_32_mesos.v1.DiscoveryInfo'(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_mesos.v1.DiscoveryInfo'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7).


'skip_64_mesos.v1.DiscoveryInfo'(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_mesos.v1.DiscoveryInfo'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7).


'd_msg_mesos.v1.Environment.Variable'(Bin) ->
    'dfp_read_field_def_mesos.v1.Environment.Variable'(Bin,
						       0, 0, undefined,
						       undefined).

'dfp_read_field_def_mesos.v1.Environment.Variable'(<<10,
						     Rest/binary>>,
						   Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Environment.Variable_name'(Rest, Z1,
						 Z2, F1, F2);
'dfp_read_field_def_mesos.v1.Environment.Variable'(<<18,
						     Rest/binary>>,
						   Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Environment.Variable_value'(Rest, Z1,
						  Z2, F1, F2);
'dfp_read_field_def_mesos.v1.Environment.Variable'(<<>>,
						   0, 0, F1, F2) ->
    #'mesos.v1.Environment.Variable'{name = F1, value = F2};
'dfp_read_field_def_mesos.v1.Environment.Variable'(Other,
						   Z1, Z2, F1, F2) ->
    'dg_read_field_def_mesos.v1.Environment.Variable'(Other,
						      Z1, Z2, F1, F2).

'dg_read_field_def_mesos.v1.Environment.Variable'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Environment.Variable'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2);
'dg_read_field_def_mesos.v1.Environment.Variable'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Environment.Variable_name'(Rest, 0, 0,
						       F1, F2);
      18 ->
	  'd_field_mesos.v1.Environment.Variable_value'(Rest, 0,
							0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Environment.Variable'(Rest, 0, 0,
							    F1, F2);
	    1 ->
		'skip_64_mesos.v1.Environment.Variable'(Rest, 0, 0, F1,
							F2);
	    2 ->
		'skip_length_delimited_mesos.v1.Environment.Variable'(Rest,
								      0, 0, F1,
								      F2);
	    5 ->
		'skip_32_mesos.v1.Environment.Variable'(Rest, 0, 0, F1,
							F2)
	  end
    end;
'dg_read_field_def_mesos.v1.Environment.Variable'(<<>>,
						  0, 0, F1, F2) ->
    #'mesos.v1.Environment.Variable'{name = F1, value = F2}.

'd_field_mesos.v1.Environment.Variable_name'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Environment.Variable_name'(Rest,
						 N + 7, X bsl N + Acc, F1, F2);
'd_field_mesos.v1.Environment.Variable_name'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Environment.Variable'(Rest2,
						       0, 0, NewFValue, F2).


'd_field_mesos.v1.Environment.Variable_value'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Environment.Variable_value'(Rest,
						  N + 7, X bsl N + Acc, F1, F2);
'd_field_mesos.v1.Environment.Variable_value'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Environment.Variable'(Rest2,
						       0, 0, F1, NewFValue).


'skip_varint_mesos.v1.Environment.Variable'(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.Environment.Variable'(Rest, Z1,
						Z2, F1, F2);
'skip_varint_mesos.v1.Environment.Variable'(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Environment.Variable'(Rest,
						       Z1, Z2, F1, F2).


'skip_length_delimited_mesos.v1.Environment.Variable'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Environment.Variable'(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2);
'skip_length_delimited_mesos.v1.Environment.Variable'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Environment.Variable'(Rest2,
						       0, 0, F1, F2).


'skip_32_mesos.v1.Environment.Variable'(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Environment.Variable'(Rest,
						       Z1, Z2, F1, F2).


'skip_64_mesos.v1.Environment.Variable'(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Environment.Variable'(Rest,
						       Z1, Z2, F1, F2).


'd_msg_mesos.v1.Environment'(Bin) ->
    'dfp_read_field_def_mesos.v1.Environment'(Bin, 0, 0,
					      []).

'dfp_read_field_def_mesos.v1.Environment'(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    'd_field_mesos.v1.Environment_variables'(Rest, Z1, Z2,
					     F1);
'dfp_read_field_def_mesos.v1.Environment'(<<>>, 0, 0,
					  F1) ->
    #'mesos.v1.Environment'{variables = lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.Environment'(Other, Z1, Z2,
					  F1) ->
    'dg_read_field_def_mesos.v1.Environment'(Other, Z1, Z2,
					     F1).

'dg_read_field_def_mesos.v1.Environment'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Environment'(Rest, N + 7,
					     X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.Environment'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Environment_variables'(Rest, 0, 0,
						   F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.Environment'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.Environment'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Environment'(Rest, 0, 0,
							     F1);
	    5 -> 'skip_32_mesos.v1.Environment'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Environment'(<<>>, 0, 0,
					 F1) ->
    #'mesos.v1.Environment'{variables = lists:reverse(F1)}.

'd_field_mesos.v1.Environment_variables'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Environment_variables'(Rest, N + 7,
					     X bsl N + Acc, F1);
'd_field_mesos.v1.Environment_variables'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.Environment.Variable'),
    'dfp_read_field_def_mesos.v1.Environment'(Rest2, 0, 0,
					      [NewFValue | F1]).


'skip_varint_mesos.v1.Environment'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Environment'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.Environment'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Environment'(Rest, Z1, Z2,
					      F1).


'skip_length_delimited_mesos.v1.Environment'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Environment'(Rest,
						 N + 7, X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.Environment'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Environment'(Rest2, 0, 0,
					      F1).


'skip_32_mesos.v1.Environment'(<<_:32, Rest/binary>>,
			       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Environment'(Rest, Z1, Z2,
					      F1).


'skip_64_mesos.v1.Environment'(<<_:64, Rest/binary>>,
			       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Environment'(Rest, Z1, Z2,
					      F1).


'd_msg_mesos.v1.CommandInfo.URI'(Bin) ->
    'dfp_read_field_def_mesos.v1.CommandInfo.URI'(Bin, 0, 0,
						  undefined, undefined,
						  undefined, undefined).

'dfp_read_field_def_mesos.v1.CommandInfo.URI'(<<10,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4) ->
    'd_field_mesos.v1.CommandInfo.URI_value'(Rest, Z1, Z2,
					     F1, F2, F3, F4);
'dfp_read_field_def_mesos.v1.CommandInfo.URI'(<<16,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4) ->
    'd_field_mesos.v1.CommandInfo.URI_executable'(Rest, Z1,
						  Z2, F1, F2, F3, F4);
'dfp_read_field_def_mesos.v1.CommandInfo.URI'(<<24,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4) ->
    'd_field_mesos.v1.CommandInfo.URI_extract'(Rest, Z1, Z2,
					       F1, F2, F3, F4);
'dfp_read_field_def_mesos.v1.CommandInfo.URI'(<<32,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4) ->
    'd_field_mesos.v1.CommandInfo.URI_cache'(Rest, Z1, Z2,
					     F1, F2, F3, F4);
'dfp_read_field_def_mesos.v1.CommandInfo.URI'(<<>>, 0,
					      0, F1, F2, F3, F4) ->
    #'mesos.v1.CommandInfo.URI'{value = F1, executable = F2,
				extract = F3, cache = F4};
'dfp_read_field_def_mesos.v1.CommandInfo.URI'(Other, Z1,
					      Z2, F1, F2, F3, F4) ->
    'dg_read_field_def_mesos.v1.CommandInfo.URI'(Other, Z1,
						 Z2, F1, F2, F3, F4).

'dg_read_field_def_mesos.v1.CommandInfo.URI'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.CommandInfo.URI'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4);
'dg_read_field_def_mesos.v1.CommandInfo.URI'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.CommandInfo.URI_value'(Rest, 0, 0, F1,
						   F2, F3, F4);
      16 ->
	  'd_field_mesos.v1.CommandInfo.URI_executable'(Rest, 0,
							0, F1, F2, F3, F4);
      24 ->
	  'd_field_mesos.v1.CommandInfo.URI_extract'(Rest, 0, 0,
						     F1, F2, F3, F4);
      32 ->
	  'd_field_mesos.v1.CommandInfo.URI_cache'(Rest, 0, 0, F1,
						   F2, F3, F4);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.CommandInfo.URI'(Rest, 0, 0, F1,
						       F2, F3, F4);
	    1 ->
		'skip_64_mesos.v1.CommandInfo.URI'(Rest, 0, 0, F1, F2,
						   F3, F4);
	    2 ->
		'skip_length_delimited_mesos.v1.CommandInfo.URI'(Rest,
								 0, 0, F1, F2,
								 F3, F4);
	    5 ->
		'skip_32_mesos.v1.CommandInfo.URI'(Rest, 0, 0, F1, F2,
						   F3, F4)
	  end
    end;
'dg_read_field_def_mesos.v1.CommandInfo.URI'(<<>>, 0, 0,
					     F1, F2, F3, F4) ->
    #'mesos.v1.CommandInfo.URI'{value = F1, executable = F2,
				extract = F3, cache = F4}.

'd_field_mesos.v1.CommandInfo.URI_value'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_mesos.v1.CommandInfo.URI_value'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4);
'd_field_mesos.v1.CommandInfo.URI_value'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.CommandInfo.URI'(Rest2, 0,
						  0, NewFValue, F2, F3, F4).


'd_field_mesos.v1.CommandInfo.URI_executable'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_mesos.v1.CommandInfo.URI_executable'(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4);
'd_field_mesos.v1.CommandInfo.URI_executable'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, _, F3, F4) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_mesos.v1.CommandInfo.URI'(Rest, 0,
						  0, F1, NewFValue, F3, F4).


'd_field_mesos.v1.CommandInfo.URI_extract'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_mesos.v1.CommandInfo.URI_extract'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4);
'd_field_mesos.v1.CommandInfo.URI_extract'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, _, F4) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_mesos.v1.CommandInfo.URI'(Rest, 0,
						  0, F1, F2, NewFValue, F4).


'd_field_mesos.v1.CommandInfo.URI_cache'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_mesos.v1.CommandInfo.URI_cache'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4);
'd_field_mesos.v1.CommandInfo.URI_cache'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, _) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_mesos.v1.CommandInfo.URI'(Rest, 0,
						  0, F1, F2, F3, NewFValue).


'skip_varint_mesos.v1.CommandInfo.URI'(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4) ->
    'skip_varint_mesos.v1.CommandInfo.URI'(Rest, Z1, Z2, F1,
					   F2, F3, F4);
'skip_varint_mesos.v1.CommandInfo.URI'(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4) ->
    'dfp_read_field_def_mesos.v1.CommandInfo.URI'(Rest, Z1,
						  Z2, F1, F2, F3, F4).


'skip_length_delimited_mesos.v1.CommandInfo.URI'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.CommandInfo.URI'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4);
'skip_length_delimited_mesos.v1.CommandInfo.URI'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.CommandInfo.URI'(Rest2, 0,
						  0, F1, F2, F3, F4).


'skip_32_mesos.v1.CommandInfo.URI'(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4) ->
    'dfp_read_field_def_mesos.v1.CommandInfo.URI'(Rest, Z1,
						  Z2, F1, F2, F3, F4).


'skip_64_mesos.v1.CommandInfo.URI'(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4) ->
    'dfp_read_field_def_mesos.v1.CommandInfo.URI'(Rest, Z1,
						  Z2, F1, F2, F3, F4).


'd_msg_mesos.v1.CommandInfo.ContainerInfo'(Bin) ->
    'dfp_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(Bin,
							    0, 0, undefined,
							    []).

'dfp_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(<<10,
							  Rest/binary>>,
							Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.CommandInfo.ContainerInfo_image'(Rest,
						       Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(<<18,
							  Rest/binary>>,
							Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.CommandInfo.ContainerInfo_options'(Rest,
							 Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(<<>>,
							0, 0, F1, F2) ->
    #'mesos.v1.CommandInfo.ContainerInfo'{image = F1,
					  options = lists:reverse(F2)};
'dfp_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(Other,
							Z1, Z2, F1, F2) ->
    'dg_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(Other,
							   Z1, Z2, F1, F2).

'dg_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2);
'dg_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.CommandInfo.ContainerInfo_image'(Rest,
							     0, 0, F1, F2);
      18 ->
	  'd_field_mesos.v1.CommandInfo.ContainerInfo_options'(Rest,
							       0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.CommandInfo.ContainerInfo'(Rest,
								 0, 0, F1, F2);
	    1 ->
		'skip_64_mesos.v1.CommandInfo.ContainerInfo'(Rest, 0, 0,
							     F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.CommandInfo.ContainerInfo'(Rest,
									   0, 0,
									   F1,
									   F2);
	    5 ->
		'skip_32_mesos.v1.CommandInfo.ContainerInfo'(Rest, 0, 0,
							     F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(<<>>,
						       0, 0, F1, F2) ->
    #'mesos.v1.CommandInfo.ContainerInfo'{image = F1,
					  options = lists:reverse(F2)}.

'd_field_mesos.v1.CommandInfo.ContainerInfo_image'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.CommandInfo.ContainerInfo_image'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2);
'd_field_mesos.v1.CommandInfo.ContainerInfo_image'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(Rest2,
							    0, 0, NewFValue,
							    F2).


'd_field_mesos.v1.CommandInfo.ContainerInfo_options'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.CommandInfo.ContainerInfo_options'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2);
'd_field_mesos.v1.CommandInfo.ContainerInfo_options'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(Rest2,
							    0, 0, F1,
							    [NewFValue | F2]).


'skip_varint_mesos.v1.CommandInfo.ContainerInfo'(<<1:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.CommandInfo.ContainerInfo'(Rest,
						     Z1, Z2, F1, F2);
'skip_varint_mesos.v1.CommandInfo.ContainerInfo'(<<0:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(Rest,
							    Z1, Z2, F1, F2).


'skip_length_delimited_mesos.v1.CommandInfo.ContainerInfo'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.CommandInfo.ContainerInfo'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F1, F2);
'skip_length_delimited_mesos.v1.CommandInfo.ContainerInfo'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(Rest2,
							    0, 0, F1, F2).


'skip_32_mesos.v1.CommandInfo.ContainerInfo'(<<_:32,
					       Rest/binary>>,
					     Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(Rest,
							    Z1, Z2, F1, F2).


'skip_64_mesos.v1.CommandInfo.ContainerInfo'(<<_:64,
					       Rest/binary>>,
					     Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.CommandInfo.ContainerInfo'(Rest,
							    Z1, Z2, F1, F2).


'd_msg_mesos.v1.CommandInfo'(Bin) ->
    'dfp_read_field_def_mesos.v1.CommandInfo'(Bin, 0, 0,
					      undefined, [], undefined,
					      undefined, undefined, [],
					      undefined).

'dfp_read_field_def_mesos.v1.CommandInfo'(<<34,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.CommandInfo_container'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.CommandInfo'(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.CommandInfo_uris'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.CommandInfo'(<<18,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.CommandInfo_environment'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.CommandInfo'(<<48,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.CommandInfo_shell'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.CommandInfo'(<<26,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.CommandInfo_value'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.CommandInfo'(<<58,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.CommandInfo_arguments'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.CommandInfo'(<<42,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.CommandInfo_user'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.CommandInfo'(<<>>, 0, 0,
					  F1, F2, F3, F4, F5, F6, F7) ->
    #'mesos.v1.CommandInfo'{container = F1,
			    uris = lists:reverse(F2), environment = F3,
			    shell = F4, value = F5,
			    arguments = lists:reverse(F6), user = F7};
'dfp_read_field_def_mesos.v1.CommandInfo'(Other, Z1, Z2,
					  F1, F2, F3, F4, F5, F6, F7) ->
    'dg_read_field_def_mesos.v1.CommandInfo'(Other, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7).

'dg_read_field_def_mesos.v1.CommandInfo'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.CommandInfo'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7);
'dg_read_field_def_mesos.v1.CommandInfo'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      34 ->
	  'd_field_mesos.v1.CommandInfo_container'(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7);
      10 ->
	  'd_field_mesos.v1.CommandInfo_uris'(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7);
      18 ->
	  'd_field_mesos.v1.CommandInfo_environment'(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6,
						     F7);
      48 ->
	  'd_field_mesos.v1.CommandInfo_shell'(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7);
      26 ->
	  'd_field_mesos.v1.CommandInfo_value'(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7);
      58 ->
	  'd_field_mesos.v1.CommandInfo_arguments'(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7);
      42 ->
	  'd_field_mesos.v1.CommandInfo_user'(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.CommandInfo'(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7);
	    1 ->
		'skip_64_mesos.v1.CommandInfo'(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6, F7);
	    2 ->
		'skip_length_delimited_mesos.v1.CommandInfo'(Rest, 0, 0,
							     F1, F2, F3, F4, F5,
							     F6, F7);
	    5 ->
		'skip_32_mesos.v1.CommandInfo'(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6, F7)
	  end
    end;
'dg_read_field_def_mesos.v1.CommandInfo'(<<>>, 0, 0, F1,
					 F2, F3, F4, F5, F6, F7) ->
    #'mesos.v1.CommandInfo'{container = F1,
			    uris = lists:reverse(F2), environment = F3,
			    shell = F4, value = F5,
			    arguments = lists:reverse(F6), user = F7}.

'd_field_mesos.v1.CommandInfo_container'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.CommandInfo_container'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7);
'd_field_mesos.v1.CommandInfo_container'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.CommandInfo.ContainerInfo'),
    'dfp_read_field_def_mesos.v1.CommandInfo'(Rest2, 0, 0,
					      if F1 == undefined -> NewFValue;
						 true ->
						     'merge_msg_mesos.v1.CommandInfo.ContainerInfo'(F1,
												    NewFValue)
					      end,
					      F2, F3, F4, F5, F6, F7).


'd_field_mesos.v1.CommandInfo_uris'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.CommandInfo_uris'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7);
'd_field_mesos.v1.CommandInfo_uris'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.CommandInfo.URI'),
    'dfp_read_field_def_mesos.v1.CommandInfo'(Rest2, 0, 0,
					      F1, [NewFValue | F2], F3, F4, F5,
					      F6, F7).


'd_field_mesos.v1.CommandInfo_environment'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.CommandInfo_environment'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7);
'd_field_mesos.v1.CommandInfo_environment'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6,
					   F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Environment'),
    'dfp_read_field_def_mesos.v1.CommandInfo'(Rest2, 0, 0,
					      F1, F2,
					      if F3 == undefined -> NewFValue;
						 true ->
						     'merge_msg_mesos.v1.Environment'(F3,
										      NewFValue)
					      end,
					      F4, F5, F6, F7).


'd_field_mesos.v1.CommandInfo_shell'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.CommandInfo_shell'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7);
'd_field_mesos.v1.CommandInfo_shell'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, _, F5, F6, F7) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_mesos.v1.CommandInfo'(Rest, 0, 0,
					      F1, F2, F3, NewFValue, F5, F6,
					      F7).


'd_field_mesos.v1.CommandInfo_value'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.CommandInfo_value'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7);
'd_field_mesos.v1.CommandInfo_value'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, _, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.CommandInfo'(Rest2, 0, 0,
					      F1, F2, F3, F4, NewFValue, F6,
					      F7).


'd_field_mesos.v1.CommandInfo_arguments'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.CommandInfo_arguments'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7);
'd_field_mesos.v1.CommandInfo_arguments'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.CommandInfo'(Rest2, 0, 0,
					      F1, F2, F3, F4, F5,
					      [NewFValue | F6], F7).


'd_field_mesos.v1.CommandInfo_user'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.CommandInfo_user'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7);
'd_field_mesos.v1.CommandInfo_user'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.CommandInfo'(Rest2, 0, 0,
					      F1, F2, F3, F4, F5, F6,
					      NewFValue).


'skip_varint_mesos.v1.CommandInfo'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'skip_varint_mesos.v1.CommandInfo'(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7);
'skip_varint_mesos.v1.CommandInfo'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_mesos.v1.CommandInfo'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7).


'skip_length_delimited_mesos.v1.CommandInfo'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.CommandInfo'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7);
'skip_length_delimited_mesos.v1.CommandInfo'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6,
					     F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.CommandInfo'(Rest2, 0, 0,
					      F1, F2, F3, F4, F5, F6, F7).


'skip_32_mesos.v1.CommandInfo'(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_mesos.v1.CommandInfo'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7).


'skip_64_mesos.v1.CommandInfo'(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_mesos.v1.CommandInfo'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7).


'd_msg_mesos.v1.HealthCheck.HTTP'(Bin) ->
    'dfp_read_field_def_mesos.v1.HealthCheck.HTTP'(Bin, 0,
						   0, undefined, undefined, []).

'dfp_read_field_def_mesos.v1.HealthCheck.HTTP'(<<8,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.HealthCheck.HTTP_port'(Rest, Z1, Z2,
					     F1, F2, F3);
'dfp_read_field_def_mesos.v1.HealthCheck.HTTP'(<<18,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.HealthCheck.HTTP_path'(Rest, Z1, Z2,
					     F1, F2, F3);
'dfp_read_field_def_mesos.v1.HealthCheck.HTTP'(<<32,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.HealthCheck.HTTP_statuses'(Rest, Z1,
						 Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.HealthCheck.HTTP'(<<>>, 0,
					       0, F1, F2, F3) ->
    #'mesos.v1.HealthCheck.HTTP'{port = F1, path = F2,
				 statuses = lists:reverse(F3)};
'dfp_read_field_def_mesos.v1.HealthCheck.HTTP'(Other,
					       Z1, Z2, F1, F2, F3) ->
    'dg_read_field_def_mesos.v1.HealthCheck.HTTP'(Other, Z1,
						  Z2, F1, F2, F3).

'dg_read_field_def_mesos.v1.HealthCheck.HTTP'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.HealthCheck.HTTP'(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3);
'dg_read_field_def_mesos.v1.HealthCheck.HTTP'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_mesos.v1.HealthCheck.HTTP_port'(Rest, 0, 0, F1,
						   F2, F3);
      18 ->
	  'd_field_mesos.v1.HealthCheck.HTTP_path'(Rest, 0, 0, F1,
						   F2, F3);
      32 ->
	  'd_field_mesos.v1.HealthCheck.HTTP_statuses'(Rest, 0, 0,
						       F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.HealthCheck.HTTP'(Rest, 0, 0, F1,
							F2, F3);
	    1 ->
		'skip_64_mesos.v1.HealthCheck.HTTP'(Rest, 0, 0, F1, F2,
						    F3);
	    2 ->
		'skip_length_delimited_mesos.v1.HealthCheck.HTTP'(Rest,
								  0, 0, F1, F2,
								  F3);
	    5 ->
		'skip_32_mesos.v1.HealthCheck.HTTP'(Rest, 0, 0, F1, F2,
						    F3)
	  end
    end;
'dg_read_field_def_mesos.v1.HealthCheck.HTTP'(<<>>, 0,
					      0, F1, F2, F3) ->
    #'mesos.v1.HealthCheck.HTTP'{port = F1, path = F2,
				 statuses = lists:reverse(F3)}.

'd_field_mesos.v1.HealthCheck.HTTP_port'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.HealthCheck.HTTP_port'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3);
'd_field_mesos.v1.HealthCheck.HTTP_port'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F2, F3) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.HealthCheck.HTTP'(Rest, 0,
						   0, NewFValue, F2, F3).


'd_field_mesos.v1.HealthCheck.HTTP_path'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.HealthCheck.HTTP_path'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3);
'd_field_mesos.v1.HealthCheck.HTTP_path'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.HealthCheck.HTTP'(Rest2, 0,
						   0, F1, NewFValue, F3).


'd_field_mesos.v1.HealthCheck.HTTP_statuses'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.HealthCheck.HTTP_statuses'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3);
'd_field_mesos.v1.HealthCheck.HTTP_statuses'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.HealthCheck.HTTP'(Rest, 0,
						   0, F1, F2, [NewFValue | F3]).


'skip_varint_mesos.v1.HealthCheck.HTTP'(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3) ->
    'skip_varint_mesos.v1.HealthCheck.HTTP'(Rest, Z1, Z2,
					    F1, F2, F3);
'skip_varint_mesos.v1.HealthCheck.HTTP'(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.HealthCheck.HTTP'(Rest, Z1,
						   Z2, F1, F2, F3).


'skip_length_delimited_mesos.v1.HealthCheck.HTTP'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.HealthCheck.HTTP'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3);
'skip_length_delimited_mesos.v1.HealthCheck.HTTP'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.HealthCheck.HTTP'(Rest2, 0,
						   0, F1, F2, F3).


'skip_32_mesos.v1.HealthCheck.HTTP'(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.HealthCheck.HTTP'(Rest, Z1,
						   Z2, F1, F2, F3).


'skip_64_mesos.v1.HealthCheck.HTTP'(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.HealthCheck.HTTP'(Rest, Z1,
						   Z2, F1, F2, F3).


'd_msg_mesos.v1.HealthCheck'(Bin) ->
    'dfp_read_field_def_mesos.v1.HealthCheck'(Bin, 0, 0,
					      undefined, undefined, undefined,
					      undefined, undefined, undefined,
					      undefined).

'dfp_read_field_def_mesos.v1.HealthCheck'(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.HealthCheck_http'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.HealthCheck'(<<17,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.HealthCheck_delay_seconds'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6,
						 F7);
'dfp_read_field_def_mesos.v1.HealthCheck'(<<25,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.HealthCheck_interval_seconds'(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, F7);
'dfp_read_field_def_mesos.v1.HealthCheck'(<<33,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.HealthCheck_timeout_seconds'(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7);
'dfp_read_field_def_mesos.v1.HealthCheck'(<<40,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.HealthCheck_consecutive_failures'(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7);
'dfp_read_field_def_mesos.v1.HealthCheck'(<<49,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.HealthCheck_grace_period_seconds'(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7);
'dfp_read_field_def_mesos.v1.HealthCheck'(<<58,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.HealthCheck_command'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.HealthCheck'(<<>>, 0, 0,
					  F1, F2, F3, F4, F5, F6, F7) ->
    #'mesos.v1.HealthCheck'{http = F1, delay_seconds = F2,
			    interval_seconds = F3, timeout_seconds = F4,
			    consecutive_failures = F5,
			    grace_period_seconds = F6, command = F7};
'dfp_read_field_def_mesos.v1.HealthCheck'(Other, Z1, Z2,
					  F1, F2, F3, F4, F5, F6, F7) ->
    'dg_read_field_def_mesos.v1.HealthCheck'(Other, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7).

'dg_read_field_def_mesos.v1.HealthCheck'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.HealthCheck'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7);
'dg_read_field_def_mesos.v1.HealthCheck'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.HealthCheck_http'(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7);
      17 ->
	  'd_field_mesos.v1.HealthCheck_delay_seconds'(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7);
      25 ->
	  'd_field_mesos.v1.HealthCheck_interval_seconds'(Rest, 0,
							  0, F1, F2, F3, F4, F5,
							  F6, F7);
      33 ->
	  'd_field_mesos.v1.HealthCheck_timeout_seconds'(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7);
      40 ->
	  'd_field_mesos.v1.HealthCheck_consecutive_failures'(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7);
      49 ->
	  'd_field_mesos.v1.HealthCheck_grace_period_seconds'(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7);
      58 ->
	  'd_field_mesos.v1.HealthCheck_command'(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.HealthCheck'(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7);
	    1 ->
		'skip_64_mesos.v1.HealthCheck'(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6, F7);
	    2 ->
		'skip_length_delimited_mesos.v1.HealthCheck'(Rest, 0, 0,
							     F1, F2, F3, F4, F5,
							     F6, F7);
	    5 ->
		'skip_32_mesos.v1.HealthCheck'(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6, F7)
	  end
    end;
'dg_read_field_def_mesos.v1.HealthCheck'(<<>>, 0, 0, F1,
					 F2, F3, F4, F5, F6, F7) ->
    #'mesos.v1.HealthCheck'{http = F1, delay_seconds = F2,
			    interval_seconds = F3, timeout_seconds = F4,
			    consecutive_failures = F5,
			    grace_period_seconds = F6, command = F7}.

'd_field_mesos.v1.HealthCheck_http'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.HealthCheck_http'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7);
'd_field_mesos.v1.HealthCheck_http'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.HealthCheck.HTTP'),
    'dfp_read_field_def_mesos.v1.HealthCheck'(Rest2, 0, 0,
					      if F1 == undefined -> NewFValue;
						 true ->
						     'merge_msg_mesos.v1.HealthCheck.HTTP'(F1,
											   NewFValue)
					      end,
					      F2, F3, F4, F5, F6, F7).


'd_field_mesos.v1.HealthCheck_delay_seconds'(<<Value:64/little-float,
					       Rest/binary>>,
					     Z1, Z2, F1, _, F3, F4, F5, F6,
					     F7) ->
    'dfp_read_field_def_mesos.v1.HealthCheck'(Rest, Z1, Z2,
					      F1, Value, F3, F4, F5, F6, F7).


'd_field_mesos.v1.HealthCheck_interval_seconds'(<<Value:64/little-float,
						  Rest/binary>>,
						Z1, Z2, F1, F2, _, F4, F5, F6,
						F7) ->
    'dfp_read_field_def_mesos.v1.HealthCheck'(Rest, Z1, Z2,
					      F1, F2, Value, F4, F5, F6, F7).


'd_field_mesos.v1.HealthCheck_timeout_seconds'(<<Value:64/little-float,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, F3, _, F5, F6,
					       F7) ->
    'dfp_read_field_def_mesos.v1.HealthCheck'(Rest, Z1, Z2,
					      F1, F2, F3, Value, F5, F6, F7).


'd_field_mesos.v1.HealthCheck_consecutive_failures'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.HealthCheck_consecutive_failures'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7);
'd_field_mesos.v1.HealthCheck_consecutive_failures'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, _,
						    F6, F7) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.HealthCheck'(Rest, 0, 0,
					      F1, F2, F3, F4, NewFValue, F6,
					      F7).


'd_field_mesos.v1.HealthCheck_grace_period_seconds'(<<Value:64/little-float,
						      Rest/binary>>,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    _, F7) ->
    'dfp_read_field_def_mesos.v1.HealthCheck'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, Value, F7).


'd_field_mesos.v1.HealthCheck_command'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.HealthCheck_command'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7);
'd_field_mesos.v1.HealthCheck_command'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.CommandInfo'),
    'dfp_read_field_def_mesos.v1.HealthCheck'(Rest2, 0, 0,
					      F1, F2, F3, F4, F5, F6,
					      if F7 == undefined -> NewFValue;
						 true ->
						     'merge_msg_mesos.v1.CommandInfo'(F7,
										      NewFValue)
					      end).


'skip_varint_mesos.v1.HealthCheck'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'skip_varint_mesos.v1.HealthCheck'(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7);
'skip_varint_mesos.v1.HealthCheck'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_mesos.v1.HealthCheck'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7).


'skip_length_delimited_mesos.v1.HealthCheck'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.HealthCheck'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7);
'skip_length_delimited_mesos.v1.HealthCheck'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6,
					     F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.HealthCheck'(Rest2, 0, 0,
					      F1, F2, F3, F4, F5, F6, F7).


'skip_32_mesos.v1.HealthCheck'(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_mesos.v1.HealthCheck'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7).


'skip_64_mesos.v1.HealthCheck'(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_mesos.v1.HealthCheck'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7).


'd_msg_mesos.v1.FrameworkID'(Bin) ->
    'dfp_read_field_def_mesos.v1.FrameworkID'(Bin, 0, 0,
					      undefined).

'dfp_read_field_def_mesos.v1.FrameworkID'(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    'd_field_mesos.v1.FrameworkID_value'(Rest, Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.FrameworkID'(<<>>, 0, 0,
					  F1) ->
    #'mesos.v1.FrameworkID'{value = F1};
'dfp_read_field_def_mesos.v1.FrameworkID'(Other, Z1, Z2,
					  F1) ->
    'dg_read_field_def_mesos.v1.FrameworkID'(Other, Z1, Z2,
					     F1).

'dg_read_field_def_mesos.v1.FrameworkID'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.FrameworkID'(Rest, N + 7,
					     X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.FrameworkID'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.FrameworkID_value'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.FrameworkID'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.FrameworkID'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.FrameworkID'(Rest, 0, 0,
							     F1);
	    5 -> 'skip_32_mesos.v1.FrameworkID'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.FrameworkID'(<<>>, 0, 0,
					 F1) ->
    #'mesos.v1.FrameworkID'{value = F1}.

'd_field_mesos.v1.FrameworkID_value'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.FrameworkID_value'(Rest, N + 7,
					 X bsl N + Acc, F1);
'd_field_mesos.v1.FrameworkID_value'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.FrameworkID'(Rest2, 0, 0,
					      NewFValue).


'skip_varint_mesos.v1.FrameworkID'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    'skip_varint_mesos.v1.FrameworkID'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.FrameworkID'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.FrameworkID'(Rest, Z1, Z2,
					      F1).


'skip_length_delimited_mesos.v1.FrameworkID'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.FrameworkID'(Rest,
						 N + 7, X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.FrameworkID'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.FrameworkID'(Rest2, 0, 0,
					      F1).


'skip_32_mesos.v1.FrameworkID'(<<_:32, Rest/binary>>,
			       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.FrameworkID'(Rest, Z1, Z2,
					      F1).


'skip_64_mesos.v1.FrameworkID'(<<_:64, Rest/binary>>,
			       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.FrameworkID'(Rest, Z1, Z2,
					      F1).


'd_msg_mesos.v1.ExecutorInfo'(Bin) ->
    'dfp_read_field_def_mesos.v1.ExecutorInfo'(Bin, 0, 0,
					       undefined, undefined, undefined,
					       undefined, [], undefined,
					       undefined, undefined, undefined).

'dfp_read_field_def_mesos.v1.ExecutorInfo'(<<10,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9) ->
    'd_field_mesos.v1.ExecutorInfo_executor_id'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9);
'dfp_read_field_def_mesos.v1.ExecutorInfo'(<<66,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9) ->
    'd_field_mesos.v1.ExecutorInfo_framework_id'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9);
'dfp_read_field_def_mesos.v1.ExecutorInfo'(<<58,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9) ->
    'd_field_mesos.v1.ExecutorInfo_command'(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9);
'dfp_read_field_def_mesos.v1.ExecutorInfo'(<<90,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9) ->
    'd_field_mesos.v1.ExecutorInfo_container'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9);
'dfp_read_field_def_mesos.v1.ExecutorInfo'(<<42,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9) ->
    'd_field_mesos.v1.ExecutorInfo_resources'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9);
'dfp_read_field_def_mesos.v1.ExecutorInfo'(<<74,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9) ->
    'd_field_mesos.v1.ExecutorInfo_name'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9);
'dfp_read_field_def_mesos.v1.ExecutorInfo'(<<82,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9) ->
    'd_field_mesos.v1.ExecutorInfo_source'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9);
'dfp_read_field_def_mesos.v1.ExecutorInfo'(<<34,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9) ->
    'd_field_mesos.v1.ExecutorInfo_data'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9);
'dfp_read_field_def_mesos.v1.ExecutorInfo'(<<98,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9) ->
    'd_field_mesos.v1.ExecutorInfo_discovery'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9);
'dfp_read_field_def_mesos.v1.ExecutorInfo'(<<>>, 0, 0,
					   F1, F2, F3, F4, F5, F6, F7, F8,
					   F9) ->
    #'mesos.v1.ExecutorInfo'{executor_id = F1,
			     framework_id = F2, command = F3, container = F4,
			     resources = lists:reverse(F5), name = F6,
			     source = F7, data = F8, discovery = F9};
'dfp_read_field_def_mesos.v1.ExecutorInfo'(Other, Z1,
					   Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					   F9) ->
    'dg_read_field_def_mesos.v1.ExecutorInfo'(Other, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9).

'dg_read_field_def_mesos.v1.ExecutorInfo'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ExecutorInfo'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9);
'dg_read_field_def_mesos.v1.ExecutorInfo'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.ExecutorInfo_executor_id'(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9);
      66 ->
	  'd_field_mesos.v1.ExecutorInfo_framework_id'(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9);
      58 ->
	  'd_field_mesos.v1.ExecutorInfo_command'(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9);
      90 ->
	  'd_field_mesos.v1.ExecutorInfo_container'(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9);
      42 ->
	  'd_field_mesos.v1.ExecutorInfo_resources'(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9);
      74 ->
	  'd_field_mesos.v1.ExecutorInfo_name'(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9);
      82 ->
	  'd_field_mesos.v1.ExecutorInfo_source'(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8,
						 F9);
      34 ->
	  'd_field_mesos.v1.ExecutorInfo_data'(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9);
      98 ->
	  'd_field_mesos.v1.ExecutorInfo_discovery'(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.ExecutorInfo'(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6, F7, F8, F9);
	    1 ->
		'skip_64_mesos.v1.ExecutorInfo'(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, F9);
	    2 ->
		'skip_length_delimited_mesos.v1.ExecutorInfo'(Rest, 0,
							      0, F1, F2, F3, F4,
							      F5, F6, F7, F8,
							      F9);
	    5 ->
		'skip_32_mesos.v1.ExecutorInfo'(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, F9)
	  end
    end;
'dg_read_field_def_mesos.v1.ExecutorInfo'(<<>>, 0, 0,
					  F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    #'mesos.v1.ExecutorInfo'{executor_id = F1,
			     framework_id = F2, command = F3, container = F4,
			     resources = lists:reverse(F5), name = F6,
			     source = F7, data = F8, discovery = F9}.

'd_field_mesos.v1.ExecutorInfo_executor_id'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9)
    when N < 57 ->
    'd_field_mesos.v1.ExecutorInfo_executor_id'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9);
'd_field_mesos.v1.ExecutorInfo_executor_id'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ExecutorID'),
    'dfp_read_field_def_mesos.v1.ExecutorInfo'(Rest2, 0, 0,
					       if F1 == undefined -> NewFValue;
						  true ->
						      'merge_msg_mesos.v1.ExecutorID'(F1,
										      NewFValue)
					       end,
					       F2, F3, F4, F5, F6, F7, F8, F9).


'd_field_mesos.v1.ExecutorInfo_framework_id'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9)
    when N < 57 ->
    'd_field_mesos.v1.ExecutorInfo_framework_id'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9);
'd_field_mesos.v1.ExecutorInfo_framework_id'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.FrameworkID'),
    'dfp_read_field_def_mesos.v1.ExecutorInfo'(Rest2, 0, 0,
					       F1,
					       if F2 == undefined -> NewFValue;
						  true ->
						      'merge_msg_mesos.v1.FrameworkID'(F2,
										       NewFValue)
					       end,
					       F3, F4, F5, F6, F7, F8, F9).


'd_field_mesos.v1.ExecutorInfo_command'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9)
    when N < 57 ->
    'd_field_mesos.v1.ExecutorInfo_command'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9);
'd_field_mesos.v1.ExecutorInfo_command'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.CommandInfo'),
    'dfp_read_field_def_mesos.v1.ExecutorInfo'(Rest2, 0, 0,
					       F1, F2,
					       if F3 == undefined -> NewFValue;
						  true ->
						      'merge_msg_mesos.v1.CommandInfo'(F3,
										       NewFValue)
					       end,
					       F4, F5, F6, F7, F8, F9).


'd_field_mesos.v1.ExecutorInfo_container'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9)
    when N < 57 ->
    'd_field_mesos.v1.ExecutorInfo_container'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9);
'd_field_mesos.v1.ExecutorInfo_container'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ContainerInfo'),
    'dfp_read_field_def_mesos.v1.ExecutorInfo'(Rest2, 0, 0,
					       F1, F2, F3,
					       if F4 == undefined -> NewFValue;
						  true ->
						      'merge_msg_mesos.v1.ContainerInfo'(F4,
											 NewFValue)
					       end,
					       F5, F6, F7, F8, F9).


'd_field_mesos.v1.ExecutorInfo_resources'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9)
    when N < 57 ->
    'd_field_mesos.v1.ExecutorInfo_resources'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9);
'd_field_mesos.v1.ExecutorInfo_resources'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Resource'),
    'dfp_read_field_def_mesos.v1.ExecutorInfo'(Rest2, 0, 0,
					       F1, F2, F3, F4, [NewFValue | F5],
					       F6, F7, F8, F9).


'd_field_mesos.v1.ExecutorInfo_name'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    'd_field_mesos.v1.ExecutorInfo_name'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9);
'd_field_mesos.v1.ExecutorInfo_name'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, _, F7, F8,
				     F9) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.ExecutorInfo'(Rest2, 0, 0,
					       F1, F2, F3, F4, F5, NewFValue,
					       F7, F8, F9).


'd_field_mesos.v1.ExecutorInfo_source'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9)
    when N < 57 ->
    'd_field_mesos.v1.ExecutorInfo_source'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9);
'd_field_mesos.v1.ExecutorInfo_source'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, _, F8,
				       F9) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.ExecutorInfo'(Rest2, 0, 0,
					       F1, F2, F3, F4, F5, F6,
					       NewFValue, F8, F9).


'd_field_mesos.v1.ExecutorInfo_data'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    'd_field_mesos.v1.ExecutorInfo_data'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9);
'd_field_mesos.v1.ExecutorInfo_data'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, _,
				     F9) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_mesos.v1.ExecutorInfo'(Rest2, 0, 0,
					       F1, F2, F3, F4, F5, F6, F7,
					       NewFValue, F9).


'd_field_mesos.v1.ExecutorInfo_discovery'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9)
    when N < 57 ->
    'd_field_mesos.v1.ExecutorInfo_discovery'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9);
'd_field_mesos.v1.ExecutorInfo_discovery'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.DiscoveryInfo'),
    'dfp_read_field_def_mesos.v1.ExecutorInfo'(Rest2, 0, 0,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       if F9 == undefined -> NewFValue;
						  true ->
						      'merge_msg_mesos.v1.DiscoveryInfo'(F9,
											 NewFValue)
					       end).


'skip_varint_mesos.v1.ExecutorInfo'(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				    F9) ->
    'skip_varint_mesos.v1.ExecutorInfo'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9);
'skip_varint_mesos.v1.ExecutorInfo'(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				    F9) ->
    'dfp_read_field_def_mesos.v1.ExecutorInfo'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9).


'skip_length_delimited_mesos.v1.ExecutorInfo'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ExecutorInfo'(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9);
'skip_length_delimited_mesos.v1.ExecutorInfo'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ExecutorInfo'(Rest2, 0, 0,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9).


'skip_32_mesos.v1.ExecutorInfo'(<<_:32, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    'dfp_read_field_def_mesos.v1.ExecutorInfo'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9).


'skip_64_mesos.v1.ExecutorInfo'(<<_:64, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    'dfp_read_field_def_mesos.v1.ExecutorInfo'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9).


'd_msg_mesos.v1.TaskInfo'(Bin) ->
    'dfp_read_field_def_mesos.v1.TaskInfo'(Bin, 0, 0,
					   undefined, undefined, undefined, [],
					   undefined, undefined, undefined,
					   undefined, undefined, undefined,
					   undefined).

'dfp_read_field_def_mesos.v1.TaskInfo'(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    'd_field_mesos.v1.TaskInfo_name'(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11);
'dfp_read_field_def_mesos.v1.TaskInfo'(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    'd_field_mesos.v1.TaskInfo_task_id'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11);
'dfp_read_field_def_mesos.v1.TaskInfo'(<<26,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    'd_field_mesos.v1.TaskInfo_agent_id'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11);
'dfp_read_field_def_mesos.v1.TaskInfo'(<<34,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    'd_field_mesos.v1.TaskInfo_resources'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11);
'dfp_read_field_def_mesos.v1.TaskInfo'(<<42,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    'd_field_mesos.v1.TaskInfo_executor'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11);
'dfp_read_field_def_mesos.v1.TaskInfo'(<<58,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    'd_field_mesos.v1.TaskInfo_command'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11);
'dfp_read_field_def_mesos.v1.TaskInfo'(<<74,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    'd_field_mesos.v1.TaskInfo_container'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11);
'dfp_read_field_def_mesos.v1.TaskInfo'(<<50,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    'd_field_mesos.v1.TaskInfo_data'(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11);
'dfp_read_field_def_mesos.v1.TaskInfo'(<<66,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    'd_field_mesos.v1.TaskInfo_health_check'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11);
'dfp_read_field_def_mesos.v1.TaskInfo'(<<82,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    'd_field_mesos.v1.TaskInfo_labels'(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11);
'dfp_read_field_def_mesos.v1.TaskInfo'(<<90,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    'd_field_mesos.v1.TaskInfo_discovery'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11);
'dfp_read_field_def_mesos.v1.TaskInfo'(<<>>, 0, 0, F1,
				       F2, F3, F4, F5, F6, F7, F8, F9, F10,
				       F11) ->
    #'mesos.v1.TaskInfo'{name = F1, task_id = F2,
			 agent_id = F3, resources = lists:reverse(F4),
			 executor = F5, command = F6, container = F7, data = F8,
			 health_check = F9, labels = F10, discovery = F11};
'dfp_read_field_def_mesos.v1.TaskInfo'(Other, Z1, Z2,
				       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				       F11) ->
    'dg_read_field_def_mesos.v1.TaskInfo'(Other, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11).

'dg_read_field_def_mesos.v1.TaskInfo'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.TaskInfo'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11);
'dg_read_field_def_mesos.v1.TaskInfo'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.TaskInfo_name'(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11);
      18 ->
	  'd_field_mesos.v1.TaskInfo_task_id'(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11);
      26 ->
	  'd_field_mesos.v1.TaskInfo_agent_id'(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11);
      34 ->
	  'd_field_mesos.v1.TaskInfo_resources'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11);
      42 ->
	  'd_field_mesos.v1.TaskInfo_executor'(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11);
      58 ->
	  'd_field_mesos.v1.TaskInfo_command'(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11);
      74 ->
	  'd_field_mesos.v1.TaskInfo_container'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11);
      50 ->
	  'd_field_mesos.v1.TaskInfo_data'(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11);
      66 ->
	  'd_field_mesos.v1.TaskInfo_health_check'(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11);
      82 ->
	  'd_field_mesos.v1.TaskInfo_labels'(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11);
      90 ->
	  'd_field_mesos.v1.TaskInfo_discovery'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.TaskInfo'(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, F9, F10,
						F11);
	    1 ->
		'skip_64_mesos.v1.TaskInfo'(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9, F10, F11);
	    2 ->
		'skip_length_delimited_mesos.v1.TaskInfo'(Rest, 0, 0,
							  F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11);
	    5 ->
		'skip_32_mesos.v1.TaskInfo'(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9, F10, F11)
	  end
    end;
'dg_read_field_def_mesos.v1.TaskInfo'(<<>>, 0, 0, F1,
				      F2, F3, F4, F5, F6, F7, F8, F9, F10,
				      F11) ->
    #'mesos.v1.TaskInfo'{name = F1, task_id = F2,
			 agent_id = F3, resources = lists:reverse(F4),
			 executor = F5, command = F6, container = F7, data = F8,
			 health_check = F9, labels = F10, discovery = F11}.

'd_field_mesos.v1.TaskInfo_name'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.TaskInfo_name'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11);
'd_field_mesos.v1.TaskInfo_name'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				 F11) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest2, 0, 0,
					   NewFValue, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11).


'd_field_mesos.v1.TaskInfo_task_id'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.TaskInfo_task_id'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11);
'd_field_mesos.v1.TaskInfo_task_id'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.TaskID'),
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest2, 0, 0, F1,
					   if F2 == undefined -> NewFValue;
					      true ->
						  'merge_msg_mesos.v1.TaskID'(F2,
									      NewFValue)
					   end,
					   F3, F4, F5, F6, F7, F8, F9, F10,
					   F11).


'd_field_mesos.v1.TaskInfo_agent_id'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.TaskInfo_agent_id'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11);
'd_field_mesos.v1.TaskInfo_agent_id'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.AgentID'),
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest2, 0, 0, F1,
					   F2,
					   if F3 == undefined -> NewFValue;
					      true ->
						  'merge_msg_mesos.v1.AgentID'(F3,
									       NewFValue)
					   end,
					   F4, F5, F6, F7, F8, F9, F10, F11).


'd_field_mesos.v1.TaskInfo_resources'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.TaskInfo_resources'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11);
'd_field_mesos.v1.TaskInfo_resources'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Resource'),
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest2, 0, 0, F1,
					   F2, F3, [NewFValue | F4], F5, F6, F7,
					   F8, F9, F10, F11).


'd_field_mesos.v1.TaskInfo_executor'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.TaskInfo_executor'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11);
'd_field_mesos.v1.TaskInfo_executor'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ExecutorInfo'),
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest2, 0, 0, F1,
					   F2, F3, F4,
					   if F5 == undefined -> NewFValue;
					      true ->
						  'merge_msg_mesos.v1.ExecutorInfo'(F5,
										    NewFValue)
					   end,
					   F6, F7, F8, F9, F10, F11).


'd_field_mesos.v1.TaskInfo_command'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.TaskInfo_command'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11);
'd_field_mesos.v1.TaskInfo_command'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.CommandInfo'),
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest2, 0, 0, F1,
					   F2, F3, F4, F5,
					   if F6 == undefined -> NewFValue;
					      true ->
						  'merge_msg_mesos.v1.CommandInfo'(F6,
										   NewFValue)
					   end,
					   F7, F8, F9, F10, F11).


'd_field_mesos.v1.TaskInfo_container'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.TaskInfo_container'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11);
'd_field_mesos.v1.TaskInfo_container'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ContainerInfo'),
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6,
					   if F7 == undefined -> NewFValue;
					      true ->
						  'merge_msg_mesos.v1.ContainerInfo'(F7,
										     NewFValue)
					   end,
					   F8, F9, F10, F11).


'd_field_mesos.v1.TaskInfo_data'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.TaskInfo_data'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11);
'd_field_mesos.v1.TaskInfo_data'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9, F10,
				 F11) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, NewFValue,
					   F9, F10, F11).


'd_field_mesos.v1.TaskInfo_health_check'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.TaskInfo_health_check'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11);
'd_field_mesos.v1.TaskInfo_health_check'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.HealthCheck'),
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8,
					   if F9 == undefined -> NewFValue;
					      true ->
						  'merge_msg_mesos.v1.HealthCheck'(F9,
										   NewFValue)
					   end,
					   F10, F11).


'd_field_mesos.v1.TaskInfo_labels'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.TaskInfo_labels'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11);
'd_field_mesos.v1.TaskInfo_labels'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Labels'),
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9,
					   if F10 == undefined -> NewFValue;
					      true ->
						  'merge_msg_mesos.v1.Labels'(F10,
									      NewFValue)
					   end,
					   F11).


'd_field_mesos.v1.TaskInfo_discovery'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.TaskInfo_discovery'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11);
'd_field_mesos.v1.TaskInfo_discovery'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.DiscoveryInfo'),
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   if F11 == undefined -> NewFValue;
					      true ->
						  'merge_msg_mesos.v1.DiscoveryInfo'(F11,
										     NewFValue)
					   end).


'skip_varint_mesos.v1.TaskInfo'(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    'skip_varint_mesos.v1.TaskInfo'(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11);
'skip_varint_mesos.v1.TaskInfo'(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11).


'skip_length_delimited_mesos.v1.TaskInfo'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.TaskInfo'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11);
'skip_length_delimited_mesos.v1.TaskInfo'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11).


'skip_32_mesos.v1.TaskInfo'(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11).


'skip_64_mesos.v1.TaskInfo'(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    'dfp_read_field_def_mesos.v1.TaskInfo'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11).


'd_msg_mesos.v1.Offer.Operation.Launch'(Bin) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Launch'(Bin,
							 0, 0, []).

'dfp_read_field_def_mesos.v1.Offer.Operation.Launch'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F1) ->
    'd_field_mesos.v1.Offer.Operation.Launch_task_infos'(Rest,
							 Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.Offer.Operation.Launch'(<<>>,
						     0, 0, F1) ->
    #'mesos.v1.Offer.Operation.Launch'{task_infos =
					   lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.Offer.Operation.Launch'(Other,
						     Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.Offer.Operation.Launch'(Other,
							Z1, Z2, F1).

'dg_read_field_def_mesos.v1.Offer.Operation.Launch'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Offer.Operation.Launch'(Rest,
							N + 7, X bsl N + Acc,
							F1);
'dg_read_field_def_mesos.v1.Offer.Operation.Launch'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Offer.Operation.Launch_task_infos'(Rest,
							       0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Offer.Operation.Launch'(Rest, 0,
							      0, F1);
	    1 ->
		'skip_64_mesos.v1.Offer.Operation.Launch'(Rest, 0, 0,
							  F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Offer.Operation.Launch'(Rest,
									0, 0,
									F1);
	    5 ->
		'skip_32_mesos.v1.Offer.Operation.Launch'(Rest, 0, 0,
							  F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Offer.Operation.Launch'(<<>>,
						    0, 0, F1) ->
    #'mesos.v1.Offer.Operation.Launch'{task_infos =
					   lists:reverse(F1)}.

'd_field_mesos.v1.Offer.Operation.Launch_task_infos'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Offer.Operation.Launch_task_infos'(Rest,
							 N + 7, X bsl N + Acc,
							 F1);
'd_field_mesos.v1.Offer.Operation.Launch_task_infos'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.TaskInfo'),
    'dfp_read_field_def_mesos.v1.Offer.Operation.Launch'(Rest2,
							 0, 0,
							 [NewFValue | F1]).


'skip_varint_mesos.v1.Offer.Operation.Launch'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Offer.Operation.Launch'(Rest, Z1,
						  Z2, F1);
'skip_varint_mesos.v1.Offer.Operation.Launch'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Launch'(Rest,
							 Z1, Z2, F1).


'skip_length_delimited_mesos.v1.Offer.Operation.Launch'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Offer.Operation.Launch'(Rest,
							    N + 7,
							    X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.Offer.Operation.Launch'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Offer.Operation.Launch'(Rest2,
							 0, 0, F1).


'skip_32_mesos.v1.Offer.Operation.Launch'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Launch'(Rest,
							 Z1, Z2, F1).


'skip_64_mesos.v1.Offer.Operation.Launch'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation.Launch'(Rest,
							 Z1, Z2, F1).


'd_msg_mesos.v1.Offer.Operation'(Bin) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation'(Bin, 0, 0,
						  undefined, undefined,
						  undefined, undefined,
						  undefined, undefined).

'dfp_read_field_def_mesos.v1.Offer.Operation'(<<8,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_mesos.v1.Offer.Operation_type'(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6);
'dfp_read_field_def_mesos.v1.Offer.Operation'(<<18,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_mesos.v1.Offer.Operation_launch'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6);
'dfp_read_field_def_mesos.v1.Offer.Operation'(<<26,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_mesos.v1.Offer.Operation_reserve'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6);
'dfp_read_field_def_mesos.v1.Offer.Operation'(<<34,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_mesos.v1.Offer.Operation_unreserve'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6);
'dfp_read_field_def_mesos.v1.Offer.Operation'(<<42,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_mesos.v1.Offer.Operation_create'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6);
'dfp_read_field_def_mesos.v1.Offer.Operation'(<<50,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_mesos.v1.Offer.Operation_destroy'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6);
'dfp_read_field_def_mesos.v1.Offer.Operation'(<<>>, 0,
					      0, F1, F2, F3, F4, F5, F6) ->
    #'mesos.v1.Offer.Operation'{type = F1, launch = F2,
				reserve = F3, unreserve = F4, create = F5,
				destroy = F6};
'dfp_read_field_def_mesos.v1.Offer.Operation'(Other, Z1,
					      Z2, F1, F2, F3, F4, F5, F6) ->
    'dg_read_field_def_mesos.v1.Offer.Operation'(Other, Z1,
						 Z2, F1, F2, F3, F4, F5, F6).

'dg_read_field_def_mesos.v1.Offer.Operation'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Offer.Operation'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6);
'dg_read_field_def_mesos.v1.Offer.Operation'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_mesos.v1.Offer.Operation_type'(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6);
      18 ->
	  'd_field_mesos.v1.Offer.Operation_launch'(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6);
      26 ->
	  'd_field_mesos.v1.Offer.Operation_reserve'(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6);
      34 ->
	  'd_field_mesos.v1.Offer.Operation_unreserve'(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6);
      42 ->
	  'd_field_mesos.v1.Offer.Operation_create'(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6);
      50 ->
	  'd_field_mesos.v1.Offer.Operation_destroy'(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Offer.Operation'(Rest, 0, 0, F1,
						       F2, F3, F4, F5, F6);
	    1 ->
		'skip_64_mesos.v1.Offer.Operation'(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6);
	    2 ->
		'skip_length_delimited_mesos.v1.Offer.Operation'(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5,
								 F6);
	    5 ->
		'skip_32_mesos.v1.Offer.Operation'(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6)
	  end
    end;
'dg_read_field_def_mesos.v1.Offer.Operation'(<<>>, 0, 0,
					     F1, F2, F3, F4, F5, F6) ->
    #'mesos.v1.Offer.Operation'{type = F1, launch = F2,
				reserve = F3, unreserve = F4, create = F5,
				destroy = F6}.

'd_field_mesos.v1.Offer.Operation_type'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.Offer.Operation_type'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6);
'd_field_mesos.v1.Offer.Operation_type'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F2, F3, F4, F5, F6) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_mesos.v1.Offer.Operation.Type'(Tmp),
    'dfp_read_field_def_mesos.v1.Offer.Operation'(Rest, 0,
						  0, NewFValue, F2, F3, F4, F5,
						  F6).


'd_field_mesos.v1.Offer.Operation_launch'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.Offer.Operation_launch'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6);
'd_field_mesos.v1.Offer.Operation_launch'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.Offer.Operation.Launch'),
    'dfp_read_field_def_mesos.v1.Offer.Operation'(Rest2, 0,
						  0, F1,
						  if F2 == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_mesos.v1.Offer.Operation.Launch'(F2,
												     NewFValue)
						  end,
						  F3, F4, F5, F6).


'd_field_mesos.v1.Offer.Operation_reserve'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.Offer.Operation_reserve'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6);
'd_field_mesos.v1.Offer.Operation_reserve'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.Offer.Operation.Reserve'),
    'dfp_read_field_def_mesos.v1.Offer.Operation'(Rest2, 0,
						  0, F1, F2,
						  if F3 == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_mesos.v1.Offer.Operation.Reserve'(F3,
												      NewFValue)
						  end,
						  F4, F5, F6).


'd_field_mesos.v1.Offer.Operation_unreserve'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.Offer.Operation_unreserve'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6);
'd_field_mesos.v1.Offer.Operation_unreserve'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.Offer.Operation.Unreserve'),
    'dfp_read_field_def_mesos.v1.Offer.Operation'(Rest2, 0,
						  0, F1, F2, F3,
						  if F4 == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_mesos.v1.Offer.Operation.Unreserve'(F4,
													NewFValue)
						  end,
						  F5, F6).


'd_field_mesos.v1.Offer.Operation_create'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.Offer.Operation_create'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6);
'd_field_mesos.v1.Offer.Operation_create'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.Offer.Operation.Create'),
    'dfp_read_field_def_mesos.v1.Offer.Operation'(Rest2, 0,
						  0, F1, F2, F3, F4,
						  if F5 == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_mesos.v1.Offer.Operation.Create'(F5,
												     NewFValue)
						  end,
						  F6).


'd_field_mesos.v1.Offer.Operation_destroy'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_mesos.v1.Offer.Operation_destroy'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6);
'd_field_mesos.v1.Offer.Operation_destroy'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.Offer.Operation.Destroy'),
    'dfp_read_field_def_mesos.v1.Offer.Operation'(Rest2, 0,
						  0, F1, F2, F3, F4, F5,
						  if F6 == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_mesos.v1.Offer.Operation.Destroy'(F6,
												      NewFValue)
						  end).


'skip_varint_mesos.v1.Offer.Operation'(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'skip_varint_mesos.v1.Offer.Operation'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6);
'skip_varint_mesos.v1.Offer.Operation'(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6).


'skip_length_delimited_mesos.v1.Offer.Operation'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Offer.Operation'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6);
'skip_length_delimited_mesos.v1.Offer.Operation'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5,
						 F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Offer.Operation'(Rest2, 0,
						  0, F1, F2, F3, F4, F5, F6).


'skip_32_mesos.v1.Offer.Operation'(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6).


'skip_64_mesos.v1.Offer.Operation'(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'dfp_read_field_def_mesos.v1.Offer.Operation'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6).


'd_msg_mesos.v1.scheduler.Call.Accept'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Accept'(Bin,
							0, 0, [], [],
							undefined).

'dfp_read_field_def_mesos.v1.scheduler.Call.Accept'(<<10,
						      Rest/binary>>,
						    Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Call.Accept_offer_ids'(Rest,
						       Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Call.Accept'(<<18,
						      Rest/binary>>,
						    Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Call.Accept_operations'(Rest,
							Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Call.Accept'(<<26,
						      Rest/binary>>,
						    Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Call.Accept_filters'(Rest,
						     Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Call.Accept'(<<>>,
						    0, 0, F1, F2, F3) ->
    #'mesos.v1.scheduler.Call.Accept'{offer_ids =
					  lists:reverse(F1),
				      operations = lists:reverse(F2),
				      filters = F3};
'dfp_read_field_def_mesos.v1.scheduler.Call.Accept'(Other,
						    Z1, Z2, F1, F2, F3) ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Accept'(Other,
						       Z1, Z2, F1, F2, F3).

'dg_read_field_def_mesos.v1.scheduler.Call.Accept'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Accept'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3);
'dg_read_field_def_mesos.v1.scheduler.Call.Accept'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Call.Accept_offer_ids'(Rest,
							     0, 0, F1, F2, F3);
      18 ->
	  'd_field_mesos.v1.scheduler.Call.Accept_operations'(Rest,
							      0, 0, F1, F2, F3);
      26 ->
	  'd_field_mesos.v1.scheduler.Call.Accept_filters'(Rest,
							   0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Call.Accept'(Rest, 0, 0,
							     F1, F2, F3);
	    1 ->
		'skip_64_mesos.v1.scheduler.Call.Accept'(Rest, 0, 0, F1,
							 F2, F3);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Call.Accept'(Rest,
								       0, 0, F1,
								       F2, F3);
	    5 ->
		'skip_32_mesos.v1.scheduler.Call.Accept'(Rest, 0, 0, F1,
							 F2, F3)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Call.Accept'(<<>>,
						   0, 0, F1, F2, F3) ->
    #'mesos.v1.scheduler.Call.Accept'{offer_ids =
					  lists:reverse(F1),
				      operations = lists:reverse(F2),
				      filters = F3}.

'd_field_mesos.v1.scheduler.Call.Accept_offer_ids'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Accept_offer_ids'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3);
'd_field_mesos.v1.scheduler.Call.Accept_offer_ids'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.OfferID'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Accept'(Rest2,
							0, 0, [NewFValue | F1],
							F2, F3).


'd_field_mesos.v1.scheduler.Call.Accept_operations'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Accept_operations'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3);
'd_field_mesos.v1.scheduler.Call.Accept_operations'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Offer.Operation'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Accept'(Rest2,
							0, 0, F1,
							[NewFValue | F2], F3).


'd_field_mesos.v1.scheduler.Call.Accept_filters'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Accept_filters'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3);
'd_field_mesos.v1.scheduler.Call.Accept_filters'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Filters'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Accept'(Rest2,
							0, 0, F1, F2,
							if F3 == undefined ->
							       NewFValue;
							   true ->
							       'merge_msg_mesos.v1.Filters'(F3,
											    NewFValue)
							end).


'skip_varint_mesos.v1.scheduler.Call.Accept'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3) ->
    'skip_varint_mesos.v1.scheduler.Call.Accept'(Rest, Z1,
						 Z2, F1, F2, F3);
'skip_varint_mesos.v1.scheduler.Call.Accept'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Accept'(Rest,
							Z1, Z2, F1, F2, F3).


'skip_length_delimited_mesos.v1.scheduler.Call.Accept'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Call.Accept'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3);
'skip_length_delimited_mesos.v1.scheduler.Call.Accept'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Call.Accept'(Rest2,
							0, 0, F1, F2, F3).


'skip_32_mesos.v1.scheduler.Call.Accept'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Accept'(Rest,
							Z1, Z2, F1, F2, F3).


'skip_64_mesos.v1.scheduler.Call.Accept'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Accept'(Rest,
							Z1, Z2, F1, F2, F3).


'd_msg_mesos.v1.FrameworkInfo.Capability'(Bin) ->
    'dfp_read_field_def_mesos.v1.FrameworkInfo.Capability'(Bin,
							   0, 0, undefined).

'dfp_read_field_def_mesos.v1.FrameworkInfo.Capability'(<<8,
							 Rest/binary>>,
						       Z1, Z2, F1) ->
    'd_field_mesos.v1.FrameworkInfo.Capability_type'(Rest,
						     Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.FrameworkInfo.Capability'(<<>>,
						       0, 0, F1) ->
    #'mesos.v1.FrameworkInfo.Capability'{type = F1};
'dfp_read_field_def_mesos.v1.FrameworkInfo.Capability'(Other,
						       Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.FrameworkInfo.Capability'(Other,
							  Z1, Z2, F1).

'dg_read_field_def_mesos.v1.FrameworkInfo.Capability'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.FrameworkInfo.Capability'(Rest,
							  N + 7, X bsl N + Acc,
							  F1);
'dg_read_field_def_mesos.v1.FrameworkInfo.Capability'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_mesos.v1.FrameworkInfo.Capability_type'(Rest,
							   0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.FrameworkInfo.Capability'(Rest, 0,
								0, F1);
	    1 ->
		'skip_64_mesos.v1.FrameworkInfo.Capability'(Rest, 0, 0,
							    F1);
	    2 ->
		'skip_length_delimited_mesos.v1.FrameworkInfo.Capability'(Rest,
									  0, 0,
									  F1);
	    5 ->
		'skip_32_mesos.v1.FrameworkInfo.Capability'(Rest, 0, 0,
							    F1)
	  end
    end;
'dg_read_field_def_mesos.v1.FrameworkInfo.Capability'(<<>>,
						      0, 0, F1) ->
    #'mesos.v1.FrameworkInfo.Capability'{type = F1}.

'd_field_mesos.v1.FrameworkInfo.Capability_type'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.FrameworkInfo.Capability_type'(Rest,
						     N + 7, X bsl N + Acc, F1);
'd_field_mesos.v1.FrameworkInfo.Capability_type'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue =
	'd_enum_mesos.v1.FrameworkInfo.Capability.Type'(Tmp),
    'dfp_read_field_def_mesos.v1.FrameworkInfo.Capability'(Rest,
							   0, 0, NewFValue).


'skip_varint_mesos.v1.FrameworkInfo.Capability'(<<1:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F1) ->
    'skip_varint_mesos.v1.FrameworkInfo.Capability'(Rest,
						    Z1, Z2, F1);
'skip_varint_mesos.v1.FrameworkInfo.Capability'(<<0:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.FrameworkInfo.Capability'(Rest,
							   Z1, Z2, F1).


'skip_length_delimited_mesos.v1.FrameworkInfo.Capability'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.FrameworkInfo.Capability'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F1);
'skip_length_delimited_mesos.v1.FrameworkInfo.Capability'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.FrameworkInfo.Capability'(Rest2,
							   0, 0, F1).


'skip_32_mesos.v1.FrameworkInfo.Capability'(<<_:32,
					      Rest/binary>>,
					    Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.FrameworkInfo.Capability'(Rest,
							   Z1, Z2, F1).


'skip_64_mesos.v1.FrameworkInfo.Capability'(<<_:64,
					      Rest/binary>>,
					    Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.FrameworkInfo.Capability'(Rest,
							   Z1, Z2, F1).


'd_msg_mesos.v1.FrameworkInfo'(Bin) ->
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Bin, 0, 0,
						undefined, undefined, undefined,
						undefined, undefined, undefined,
						undefined, undefined, undefined,
						[]).

'dfp_read_field_def_mesos.v1.FrameworkInfo'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    'd_field_mesos.v1.FrameworkInfo_user'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10);
'dfp_read_field_def_mesos.v1.FrameworkInfo'(<<18,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    'd_field_mesos.v1.FrameworkInfo_name'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10);
'dfp_read_field_def_mesos.v1.FrameworkInfo'(<<26,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    'd_field_mesos.v1.FrameworkInfo_id'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10);
'dfp_read_field_def_mesos.v1.FrameworkInfo'(<<33,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    'd_field_mesos.v1.FrameworkInfo_failover_timeout'(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10);
'dfp_read_field_def_mesos.v1.FrameworkInfo'(<<40,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    'd_field_mesos.v1.FrameworkInfo_checkpoint'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10);
'dfp_read_field_def_mesos.v1.FrameworkInfo'(<<50,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    'd_field_mesos.v1.FrameworkInfo_role'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10);
'dfp_read_field_def_mesos.v1.FrameworkInfo'(<<58,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    'd_field_mesos.v1.FrameworkInfo_hostname'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10);
'dfp_read_field_def_mesos.v1.FrameworkInfo'(<<66,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    'd_field_mesos.v1.FrameworkInfo_principal'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10);
'dfp_read_field_def_mesos.v1.FrameworkInfo'(<<74,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    'd_field_mesos.v1.FrameworkInfo_webui_url'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10);
'dfp_read_field_def_mesos.v1.FrameworkInfo'(<<82,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    'd_field_mesos.v1.FrameworkInfo_capabilities'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8, F9, F10);
'dfp_read_field_def_mesos.v1.FrameworkInfo'(<<>>, 0, 0,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10) ->
    #'mesos.v1.FrameworkInfo'{user = F1, name = F2, id = F3,
			      failover_timeout = F4, checkpoint = F5, role = F6,
			      hostname = F7, principal = F8, webui_url = F9,
			      capabilities = lists:reverse(F10)};
'dfp_read_field_def_mesos.v1.FrameworkInfo'(Other, Z1,
					    Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					    F9, F10) ->
    'dg_read_field_def_mesos.v1.FrameworkInfo'(Other, Z1,
					       Z2, F1, F2, F3, F4, F5, F6, F7,
					       F8, F9, F10).

'dg_read_field_def_mesos.v1.FrameworkInfo'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.FrameworkInfo'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10);
'dg_read_field_def_mesos.v1.FrameworkInfo'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.FrameworkInfo_user'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10);
      18 ->
	  'd_field_mesos.v1.FrameworkInfo_name'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10);
      26 ->
	  'd_field_mesos.v1.FrameworkInfo_id'(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10);
      33 ->
	  'd_field_mesos.v1.FrameworkInfo_failover_timeout'(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10);
      40 ->
	  'd_field_mesos.v1.FrameworkInfo_checkpoint'(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10);
      50 ->
	  'd_field_mesos.v1.FrameworkInfo_role'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10);
      58 ->
	  'd_field_mesos.v1.FrameworkInfo_hostname'(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10);
      66 ->
	  'd_field_mesos.v1.FrameworkInfo_principal'(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10);
      74 ->
	  'd_field_mesos.v1.FrameworkInfo_webui_url'(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10);
      82 ->
	  'd_field_mesos.v1.FrameworkInfo_capabilities'(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7, F8, F9, F10);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.FrameworkInfo'(Rest, 0, 0, F1, F2,
						     F3, F4, F5, F6, F7, F8, F9,
						     F10);
	    1 ->
		'skip_64_mesos.v1.FrameworkInfo'(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7, F8, F9, F10);
	    2 ->
		'skip_length_delimited_mesos.v1.FrameworkInfo'(Rest, 0,
							       0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10);
	    5 ->
		'skip_32_mesos.v1.FrameworkInfo'(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7, F8, F9, F10)
	  end
    end;
'dg_read_field_def_mesos.v1.FrameworkInfo'(<<>>, 0, 0,
					   F1, F2, F3, F4, F5, F6, F7, F8, F9,
					   F10) ->
    #'mesos.v1.FrameworkInfo'{user = F1, name = F2, id = F3,
			      failover_timeout = F4, checkpoint = F5, role = F6,
			      hostname = F7, principal = F8, webui_url = F9,
			      capabilities = lists:reverse(F10)}.

'd_field_mesos.v1.FrameworkInfo_user'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.FrameworkInfo_user'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10);
'd_field_mesos.v1.FrameworkInfo_user'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9,
				      F10) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Rest2, 0, 0,
						NewFValue, F2, F3, F4, F5, F6,
						F7, F8, F9, F10).


'd_field_mesos.v1.FrameworkInfo_name'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.FrameworkInfo_name'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10);
'd_field_mesos.v1.FrameworkInfo_name'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9,
				      F10) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Rest2, 0, 0,
						F1, NewFValue, F3, F4, F5, F6,
						F7, F8, F9, F10).


'd_field_mesos.v1.FrameworkInfo_id'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10)
    when N < 57 ->
    'd_field_mesos.v1.FrameworkInfo_id'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10);
'd_field_mesos.v1.FrameworkInfo_id'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.FrameworkID'),
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Rest2, 0, 0,
						F1, F2,
						if F3 == undefined -> NewFValue;
						   true ->
						       'merge_msg_mesos.v1.FrameworkID'(F3,
											NewFValue)
						end,
						F4, F5, F6, F7, F8, F9, F10).


'd_field_mesos.v1.FrameworkInfo_failover_timeout'(<<Value:64/little-float,
						    Rest/binary>>,
						  Z1, Z2, F1, F2, F3, _, F5, F6,
						  F7, F8, F9, F10) ->
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Rest, Z1,
						Z2, F1, F2, F3, Value, F5, F6,
						F7, F8, F9, F10).


'd_field_mesos.v1.FrameworkInfo_checkpoint'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.FrameworkInfo_checkpoint'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10);
'd_field_mesos.v1.FrameworkInfo_checkpoint'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, _, F6, F7,
					    F8, F9, F10) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Rest, 0, 0,
						F1, F2, F3, F4, NewFValue, F6,
						F7, F8, F9, F10).


'd_field_mesos.v1.FrameworkInfo_role'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.FrameworkInfo_role'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10);
'd_field_mesos.v1.FrameworkInfo_role'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9,
				      F10) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Rest2, 0, 0,
						F1, F2, F3, F4, F5, NewFValue,
						F7, F8, F9, F10).


'd_field_mesos.v1.FrameworkInfo_hostname'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.FrameworkInfo_hostname'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10);
'd_field_mesos.v1.FrameworkInfo_hostname'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, _, F8,
					  F9, F10) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Rest2, 0, 0,
						F1, F2, F3, F4, F5, F6,
						NewFValue, F8, F9, F10).


'd_field_mesos.v1.FrameworkInfo_principal'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.FrameworkInfo_principal'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10);
'd_field_mesos.v1.FrameworkInfo_principal'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   _, F9, F10) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Rest2, 0, 0,
						F1, F2, F3, F4, F5, F6, F7,
						NewFValue, F9, F10).


'd_field_mesos.v1.FrameworkInfo_webui_url'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.FrameworkInfo_webui_url'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10);
'd_field_mesos.v1.FrameworkInfo_webui_url'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, _, F10) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Rest2, 0, 0,
						F1, F2, F3, F4, F5, F6, F7, F8,
						NewFValue, F10).


'd_field_mesos.v1.FrameworkInfo_capabilities'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.FrameworkInfo_capabilities'(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10);
'd_field_mesos.v1.FrameworkInfo_capabilities'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.FrameworkInfo.Capability'),
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Rest2, 0, 0,
						F1, F2, F3, F4, F5, F6, F7, F8,
						F9, [NewFValue | F10]).


'skip_varint_mesos.v1.FrameworkInfo'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10) ->
    'skip_varint_mesos.v1.FrameworkInfo'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10);
'skip_varint_mesos.v1.FrameworkInfo'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10) ->
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10).


'skip_length_delimited_mesos.v1.FrameworkInfo'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.FrameworkInfo'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10);
'skip_length_delimited_mesos.v1.FrameworkInfo'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Rest2, 0, 0,
						F1, F2, F3, F4, F5, F6, F7, F8,
						F9, F10).


'skip_32_mesos.v1.FrameworkInfo'(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10) ->
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10).


'skip_64_mesos.v1.FrameworkInfo'(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10) ->
    'dfp_read_field_def_mesos.v1.FrameworkInfo'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10).


'd_msg_mesos.v1.scheduler.Call.Subscribe'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Subscribe'(Bin,
							   0, 0, undefined,
							   undefined).

'dfp_read_field_def_mesos.v1.scheduler.Call.Subscribe'(<<10,
							 Rest/binary>>,
						       Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.scheduler.Call.Subscribe_framework_info'(Rest,
							       Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.scheduler.Call.Subscribe'(<<16,
							 Rest/binary>>,
						       Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.scheduler.Call.Subscribe_force'(Rest,
						      Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.scheduler.Call.Subscribe'(<<>>,
						       0, 0, F1, F2) ->
    #'mesos.v1.scheduler.Call.Subscribe'{framework_info =
					     F1,
					 force = F2};
'dfp_read_field_def_mesos.v1.scheduler.Call.Subscribe'(Other,
						       Z1, Z2, F1, F2) ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Subscribe'(Other,
							  Z1, Z2, F1, F2).

'dg_read_field_def_mesos.v1.scheduler.Call.Subscribe'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Call.Subscribe'(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2);
'dg_read_field_def_mesos.v1.scheduler.Call.Subscribe'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Call.Subscribe_framework_info'(Rest,
								     0, 0, F1,
								     F2);
      16 ->
	  'd_field_mesos.v1.scheduler.Call.Subscribe_force'(Rest,
							    0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Call.Subscribe'(Rest, 0,
								0, F1, F2);
	    1 ->
		'skip_64_mesos.v1.scheduler.Call.Subscribe'(Rest, 0, 0,
							    F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Call.Subscribe'(Rest,
									  0, 0,
									  F1,
									  F2);
	    5 ->
		'skip_32_mesos.v1.scheduler.Call.Subscribe'(Rest, 0, 0,
							    F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Call.Subscribe'(<<>>,
						      0, 0, F1, F2) ->
    #'mesos.v1.scheduler.Call.Subscribe'{framework_info =
					     F1,
					 force = F2}.

'd_field_mesos.v1.scheduler.Call.Subscribe_framework_info'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Subscribe_framework_info'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F1, F2);
'd_field_mesos.v1.scheduler.Call.Subscribe_framework_info'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.FrameworkInfo'),
    'dfp_read_field_def_mesos.v1.scheduler.Call.Subscribe'(Rest2,
							   0, 0,
							   if F1 == undefined ->
								  NewFValue;
							      true ->
								  'merge_msg_mesos.v1.FrameworkInfo'(F1,
												     NewFValue)
							   end,
							   F2).


'd_field_mesos.v1.scheduler.Call.Subscribe_force'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call.Subscribe_force'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2);
'd_field_mesos.v1.scheduler.Call.Subscribe_force'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, _) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_mesos.v1.scheduler.Call.Subscribe'(Rest,
							   0, 0, F1, NewFValue).


'skip_varint_mesos.v1.scheduler.Call.Subscribe'(<<1:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.scheduler.Call.Subscribe'(Rest,
						    Z1, Z2, F1, F2);
'skip_varint_mesos.v1.scheduler.Call.Subscribe'(<<0:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Subscribe'(Rest,
							   Z1, Z2, F1, F2).


'skip_length_delimited_mesos.v1.scheduler.Call.Subscribe'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Call.Subscribe'(Rest,
							      N + 7,
							      X bsl N + Acc, F1,
							      F2);
'skip_length_delimited_mesos.v1.scheduler.Call.Subscribe'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Call.Subscribe'(Rest2,
							   0, 0, F1, F2).


'skip_32_mesos.v1.scheduler.Call.Subscribe'(<<_:32,
					      Rest/binary>>,
					    Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Subscribe'(Rest,
							   Z1, Z2, F1, F2).


'skip_64_mesos.v1.scheduler.Call.Subscribe'(<<_:64,
					      Rest/binary>>,
					    Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call.Subscribe'(Rest,
							   Z1, Z2, F1, F2).


'd_msg_mesos.v1.scheduler.Call'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Bin, 0, 0,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined).

'dfp_read_field_def_mesos.v1.scheduler.Call'(<<10,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11) ->
    'd_field_mesos.v1.scheduler.Call_framework_id'(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, F11);
'dfp_read_field_def_mesos.v1.scheduler.Call'(<<16,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11) ->
    'd_field_mesos.v1.scheduler.Call_type'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11);
'dfp_read_field_def_mesos.v1.scheduler.Call'(<<26,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11) ->
    'd_field_mesos.v1.scheduler.Call_subscribe'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11);
'dfp_read_field_def_mesos.v1.scheduler.Call'(<<34,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11) ->
    'd_field_mesos.v1.scheduler.Call_accept'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11);
'dfp_read_field_def_mesos.v1.scheduler.Call'(<<42,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11) ->
    'd_field_mesos.v1.scheduler.Call_decline'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11);
'dfp_read_field_def_mesos.v1.scheduler.Call'(<<50,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11) ->
    'd_field_mesos.v1.scheduler.Call_kill'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11);
'dfp_read_field_def_mesos.v1.scheduler.Call'(<<58,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11) ->
    'd_field_mesos.v1.scheduler.Call_shutdown'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11);
'dfp_read_field_def_mesos.v1.scheduler.Call'(<<66,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11) ->
    'd_field_mesos.v1.scheduler.Call_acknowledge'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8, F9, F10, F11);
'dfp_read_field_def_mesos.v1.scheduler.Call'(<<74,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11) ->
    'd_field_mesos.v1.scheduler.Call_reconcile'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11);
'dfp_read_field_def_mesos.v1.scheduler.Call'(<<82,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11) ->
    'd_field_mesos.v1.scheduler.Call_message'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11);
'dfp_read_field_def_mesos.v1.scheduler.Call'(<<90,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11) ->
    'd_field_mesos.v1.scheduler.Call_request'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11);
'dfp_read_field_def_mesos.v1.scheduler.Call'(<<>>, 0, 0,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11) ->
    #'mesos.v1.scheduler.Call'{framework_id = F1, type = F2,
			       subscribe = F3, accept = F4, decline = F5,
			       kill = F6, shutdown = F7, acknowledge = F8,
			       reconcile = F9, message = F10, request = F11};
'dfp_read_field_def_mesos.v1.scheduler.Call'(Other, Z1,
					     Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					     F9, F10, F11) ->
    'dg_read_field_def_mesos.v1.scheduler.Call'(Other, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11).

'dg_read_field_def_mesos.v1.scheduler.Call'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Call'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11);
'dg_read_field_def_mesos.v1.scheduler.Call'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Call_framework_id'(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 F11);
      16 ->
	  'd_field_mesos.v1.scheduler.Call_type'(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11);
      26 ->
	  'd_field_mesos.v1.scheduler.Call_subscribe'(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11);
      34 ->
	  'd_field_mesos.v1.scheduler.Call_accept'(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11);
      42 ->
	  'd_field_mesos.v1.scheduler.Call_decline'(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11);
      50 ->
	  'd_field_mesos.v1.scheduler.Call_kill'(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11);
      58 ->
	  'd_field_mesos.v1.scheduler.Call_shutdown'(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11);
      66 ->
	  'd_field_mesos.v1.scheduler.Call_acknowledge'(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7, F8, F9, F10,
							F11);
      74 ->
	  'd_field_mesos.v1.scheduler.Call_reconcile'(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11);
      82 ->
	  'd_field_mesos.v1.scheduler.Call_message'(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11);
      90 ->
	  'd_field_mesos.v1.scheduler.Call_request'(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Call'(Rest, 0, 0, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, F11);
	    1 ->
		'skip_64_mesos.v1.scheduler.Call'(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Call'(Rest, 0,
								0, F1, F2, F3,
								F4, F5, F6, F7,
								F8, F9, F10,
								F11);
	    5 ->
		'skip_32_mesos.v1.scheduler.Call'(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Call'(<<>>, 0, 0,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11) ->
    #'mesos.v1.scheduler.Call'{framework_id = F1, type = F2,
			       subscribe = F3, accept = F4, decline = F5,
			       kill = F6, shutdown = F7, acknowledge = F8,
			       reconcile = F9, message = F10, request = F11}.

'd_field_mesos.v1.scheduler.Call_framework_id'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call_framework_id'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, F11);
'd_field_mesos.v1.scheduler.Call_framework_id'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.FrameworkID'),
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest2, 0,
						 0,
						 if F1 == undefined ->
							NewFValue;
						    true ->
							'merge_msg_mesos.v1.FrameworkID'(F1,
											 NewFValue)
						 end,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11).


'd_field_mesos.v1.scheduler.Call_type'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call_type'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11);
'd_field_mesos.v1.scheduler.Call_type'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, _, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_mesos.v1.scheduler.Call.Type'(Tmp),
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest, 0, 0,
						 F1, NewFValue, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11).


'd_field_mesos.v1.scheduler.Call_subscribe'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call_subscribe'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11);
'd_field_mesos.v1.scheduler.Call_subscribe'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Call.Subscribe'),
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest2, 0,
						 0, F1, F2,
						 if F3 == undefined ->
							NewFValue;
						    true ->
							'merge_msg_mesos.v1.scheduler.Call.Subscribe'(F3,
												      NewFValue)
						 end,
						 F4, F5, F6, F7, F8, F9, F10,
						 F11).


'd_field_mesos.v1.scheduler.Call_accept'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call_accept'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11);
'd_field_mesos.v1.scheduler.Call_accept'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Call.Accept'),
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest2, 0,
						 0, F1, F2, F3,
						 if F4 == undefined ->
							NewFValue;
						    true ->
							'merge_msg_mesos.v1.scheduler.Call.Accept'(F4,
												   NewFValue)
						 end,
						 F5, F6, F7, F8, F9, F10, F11).


'd_field_mesos.v1.scheduler.Call_decline'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call_decline'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11);
'd_field_mesos.v1.scheduler.Call_decline'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Call.Decline'),
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest2, 0,
						 0, F1, F2, F3, F4,
						 if F5 == undefined ->
							NewFValue;
						    true ->
							'merge_msg_mesos.v1.scheduler.Call.Decline'(F5,
												    NewFValue)
						 end,
						 F6, F7, F8, F9, F10, F11).


'd_field_mesos.v1.scheduler.Call_kill'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call_kill'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11);
'd_field_mesos.v1.scheduler.Call_kill'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Call.Kill'),
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest2, 0,
						 0, F1, F2, F3, F4, F5,
						 if F6 == undefined ->
							NewFValue;
						    true ->
							'merge_msg_mesos.v1.scheduler.Call.Kill'(F6,
												 NewFValue)
						 end,
						 F7, F8, F9, F10, F11).


'd_field_mesos.v1.scheduler.Call_shutdown'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call_shutdown'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11);
'd_field_mesos.v1.scheduler.Call_shutdown'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Call.Shutdown'),
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest2, 0,
						 0, F1, F2, F3, F4, F5, F6,
						 if F7 == undefined ->
							NewFValue;
						    true ->
							'merge_msg_mesos.v1.scheduler.Call.Shutdown'(F7,
												     NewFValue)
						 end,
						 F8, F9, F10, F11).


'd_field_mesos.v1.scheduler.Call_acknowledge'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call_acknowledge'(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11);
'd_field_mesos.v1.scheduler.Call_acknowledge'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Call.Acknowledge'),
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest2, 0,
						 0, F1, F2, F3, F4, F5, F6, F7,
						 if F8 == undefined ->
							NewFValue;
						    true ->
							'merge_msg_mesos.v1.scheduler.Call.Acknowledge'(F8,
													NewFValue)
						 end,
						 F9, F10, F11).


'd_field_mesos.v1.scheduler.Call_reconcile'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call_reconcile'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11);
'd_field_mesos.v1.scheduler.Call_reconcile'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Call.Reconcile'),
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest2, 0,
						 0, F1, F2, F3, F4, F5, F6, F7,
						 F8,
						 if F9 == undefined ->
							NewFValue;
						    true ->
							'merge_msg_mesos.v1.scheduler.Call.Reconcile'(F9,
												      NewFValue)
						 end,
						 F10, F11).


'd_field_mesos.v1.scheduler.Call_message'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call_message'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11);
'd_field_mesos.v1.scheduler.Call_message'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Call.Message'),
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest2, 0,
						 0, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9,
						 if F10 == undefined ->
							NewFValue;
						    true ->
							'merge_msg_mesos.v1.scheduler.Call.Message'(F10,
												    NewFValue)
						 end,
						 F11).


'd_field_mesos.v1.scheduler.Call_request'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Call_request'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11);
'd_field_mesos.v1.scheduler.Call_request'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Call.Request'),
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest2, 0,
						 0, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10,
						 if F11 == undefined ->
							NewFValue;
						    true ->
							'merge_msg_mesos.v1.scheduler.Call.Request'(F11,
												    NewFValue)
						 end).


'skip_varint_mesos.v1.scheduler.Call'(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11) ->
    'skip_varint_mesos.v1.scheduler.Call'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11);
'skip_varint_mesos.v1.scheduler.Call'(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11).


'skip_length_delimited_mesos.v1.scheduler.Call'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Call'(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, F5, F6, F7, F8,
						    F9, F10, F11);
'skip_length_delimited_mesos.v1.scheduler.Call'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest2, 0,
						 0, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11).


'skip_32_mesos.v1.scheduler.Call'(<<_:32, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11).


'skip_64_mesos.v1.scheduler.Call'(<<_:64, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11) ->
    'dfp_read_field_def_mesos.v1.scheduler.Call'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11).


'd_msg_mesos.v1.RateLimit'(Bin) ->
    'dfp_read_field_def_mesos.v1.RateLimit'(Bin, 0, 0,
					    undefined, undefined, undefined).

'dfp_read_field_def_mesos.v1.RateLimit'(<<9,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.RateLimit_qps'(Rest, Z1, Z2, F1, F2,
				     F3);
'dfp_read_field_def_mesos.v1.RateLimit'(<<18,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.RateLimit_principal'(Rest, Z1, Z2, F1,
					   F2, F3);
'dfp_read_field_def_mesos.v1.RateLimit'(<<24,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.RateLimit_capacity'(Rest, Z1, Z2, F1,
					  F2, F3);
'dfp_read_field_def_mesos.v1.RateLimit'(<<>>, 0, 0, F1,
					F2, F3) ->
    #'mesos.v1.RateLimit'{qps = F1, principal = F2,
			  capacity = F3};
'dfp_read_field_def_mesos.v1.RateLimit'(Other, Z1, Z2,
					F1, F2, F3) ->
    'dg_read_field_def_mesos.v1.RateLimit'(Other, Z1, Z2,
					   F1, F2, F3).

'dg_read_field_def_mesos.v1.RateLimit'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.RateLimit'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3);
'dg_read_field_def_mesos.v1.RateLimit'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  'd_field_mesos.v1.RateLimit_qps'(Rest, 0, 0, F1, F2,
					   F3);
      18 ->
	  'd_field_mesos.v1.RateLimit_principal'(Rest, 0, 0, F1,
						 F2, F3);
      24 ->
	  'd_field_mesos.v1.RateLimit_capacity'(Rest, 0, 0, F1,
						F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.RateLimit'(Rest, 0, 0, F1, F2,
						 F3);
	    1 ->
		'skip_64_mesos.v1.RateLimit'(Rest, 0, 0, F1, F2, F3);
	    2 ->
		'skip_length_delimited_mesos.v1.RateLimit'(Rest, 0, 0,
							   F1, F2, F3);
	    5 ->
		'skip_32_mesos.v1.RateLimit'(Rest, 0, 0, F1, F2, F3)
	  end
    end;
'dg_read_field_def_mesos.v1.RateLimit'(<<>>, 0, 0, F1,
				       F2, F3) ->
    #'mesos.v1.RateLimit'{qps = F1, principal = F2,
			  capacity = F3}.

'd_field_mesos.v1.RateLimit_qps'(<<Value:64/little-float,
				   Rest/binary>>,
				 Z1, Z2, _, F2, F3) ->
    'dfp_read_field_def_mesos.v1.RateLimit'(Rest, Z1, Z2,
					    Value, F2, F3).


'd_field_mesos.v1.RateLimit_principal'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.RateLimit_principal'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3);
'd_field_mesos.v1.RateLimit_principal'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.RateLimit'(Rest2, 0, 0, F1,
					    NewFValue, F3).


'd_field_mesos.v1.RateLimit_capacity'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.RateLimit_capacity'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3);
'd_field_mesos.v1.RateLimit_capacity'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, _) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.RateLimit'(Rest, 0, 0, F1,
					    F2, NewFValue).


'skip_varint_mesos.v1.RateLimit'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3) ->
    'skip_varint_mesos.v1.RateLimit'(Rest, Z1, Z2, F1, F2,
				     F3);
'skip_varint_mesos.v1.RateLimit'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.RateLimit'(Rest, Z1, Z2,
					    F1, F2, F3).


'skip_length_delimited_mesos.v1.RateLimit'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.RateLimit'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3);
'skip_length_delimited_mesos.v1.RateLimit'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.RateLimit'(Rest2, 0, 0, F1,
					    F2, F3).


'skip_32_mesos.v1.RateLimit'(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.RateLimit'(Rest, Z1, Z2,
					    F1, F2, F3).


'skip_64_mesos.v1.RateLimit'(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.RateLimit'(Rest, Z1, Z2,
					    F1, F2, F3).


'd_msg_mesos.v1.RateLimits'(Bin) ->
    'dfp_read_field_def_mesos.v1.RateLimits'(Bin, 0, 0, [],
					     undefined, undefined).

'dfp_read_field_def_mesos.v1.RateLimits'(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.RateLimits_limits'(Rest, Z1, Z2, F1,
					 F2, F3);
'dfp_read_field_def_mesos.v1.RateLimits'(<<17,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.RateLimits_aggregate_default_qps'(Rest,
							Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.RateLimits'(<<24,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.RateLimits_aggregate_default_capacity'(Rest,
							     Z1, Z2, F1, F2,
							     F3);
'dfp_read_field_def_mesos.v1.RateLimits'(<<>>, 0, 0, F1,
					 F2, F3) ->
    #'mesos.v1.RateLimits'{limits = lists:reverse(F1),
			   aggregate_default_qps = F2,
			   aggregate_default_capacity = F3};
'dfp_read_field_def_mesos.v1.RateLimits'(Other, Z1, Z2,
					 F1, F2, F3) ->
    'dg_read_field_def_mesos.v1.RateLimits'(Other, Z1, Z2,
					    F1, F2, F3).

'dg_read_field_def_mesos.v1.RateLimits'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.RateLimits'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3);
'dg_read_field_def_mesos.v1.RateLimits'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.RateLimits_limits'(Rest, 0, 0, F1, F2,
					       F3);
      17 ->
	  'd_field_mesos.v1.RateLimits_aggregate_default_qps'(Rest,
							      0, 0, F1, F2, F3);
      24 ->
	  'd_field_mesos.v1.RateLimits_aggregate_default_capacity'(Rest,
								   0, 0, F1, F2,
								   F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.RateLimits'(Rest, 0, 0, F1, F2,
						  F3);
	    1 ->
		'skip_64_mesos.v1.RateLimits'(Rest, 0, 0, F1, F2, F3);
	    2 ->
		'skip_length_delimited_mesos.v1.RateLimits'(Rest, 0, 0,
							    F1, F2, F3);
	    5 ->
		'skip_32_mesos.v1.RateLimits'(Rest, 0, 0, F1, F2, F3)
	  end
    end;
'dg_read_field_def_mesos.v1.RateLimits'(<<>>, 0, 0, F1,
					F2, F3) ->
    #'mesos.v1.RateLimits'{limits = lists:reverse(F1),
			   aggregate_default_qps = F2,
			   aggregate_default_capacity = F3}.

'd_field_mesos.v1.RateLimits_limits'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.RateLimits_limits'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
'd_field_mesos.v1.RateLimits_limits'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.RateLimit'),
    'dfp_read_field_def_mesos.v1.RateLimits'(Rest2, 0, 0,
					     [NewFValue | F1], F2, F3).


'd_field_mesos.v1.RateLimits_aggregate_default_qps'(<<Value:64/little-float,
						      Rest/binary>>,
						    Z1, Z2, F1, _, F3) ->
    'dfp_read_field_def_mesos.v1.RateLimits'(Rest, Z1, Z2,
					     F1, Value, F3).


'd_field_mesos.v1.RateLimits_aggregate_default_capacity'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.RateLimits_aggregate_default_capacity'(Rest,
							     N + 7,
							     X bsl N + Acc, F1,
							     F2, F3);
'd_field_mesos.v1.RateLimits_aggregate_default_capacity'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, _) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.RateLimits'(Rest, 0, 0, F1,
					     F2, NewFValue).


'skip_varint_mesos.v1.RateLimits'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3) ->
    'skip_varint_mesos.v1.RateLimits'(Rest, Z1, Z2, F1, F2,
				      F3);
'skip_varint_mesos.v1.RateLimits'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.RateLimits'(Rest, Z1, Z2,
					     F1, F2, F3).


'skip_length_delimited_mesos.v1.RateLimits'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.RateLimits'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3);
'skip_length_delimited_mesos.v1.RateLimits'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.RateLimits'(Rest2, 0, 0,
					     F1, F2, F3).


'skip_32_mesos.v1.RateLimits'(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.RateLimits'(Rest, Z1, Z2,
					     F1, F2, F3).


'skip_64_mesos.v1.RateLimits'(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.RateLimits'(Rest, Z1, Z2,
					     F1, F2, F3).


'd_msg_mesos.v1.Parameters'(Bin) ->
    'dfp_read_field_def_mesos.v1.Parameters'(Bin, 0, 0, []).

'dfp_read_field_def_mesos.v1.Parameters'(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1) ->
    'd_field_mesos.v1.Parameters_parameter'(Rest, Z1, Z2,
					    F1);
'dfp_read_field_def_mesos.v1.Parameters'(<<>>, 0, 0,
					 F1) ->
    #'mesos.v1.Parameters'{parameter = lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.Parameters'(Other, Z1, Z2,
					 F1) ->
    'dg_read_field_def_mesos.v1.Parameters'(Other, Z1, Z2,
					    F1).

'dg_read_field_def_mesos.v1.Parameters'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Parameters'(Rest, N + 7,
					    X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.Parameters'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Parameters_parameter'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.Parameters'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.Parameters'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Parameters'(Rest, 0, 0,
							    F1);
	    5 -> 'skip_32_mesos.v1.Parameters'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Parameters'(<<>>, 0, 0,
					F1) ->
    #'mesos.v1.Parameters'{parameter = lists:reverse(F1)}.

'd_field_mesos.v1.Parameters_parameter'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Parameters_parameter'(Rest, N + 7,
					    X bsl N + Acc, F1);
'd_field_mesos.v1.Parameters_parameter'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Parameter'),
    'dfp_read_field_def_mesos.v1.Parameters'(Rest2, 0, 0,
					     [NewFValue | F1]).


'skip_varint_mesos.v1.Parameters'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Parameters'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.Parameters'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Parameters'(Rest, Z1, Z2,
					     F1).


'skip_length_delimited_mesos.v1.Parameters'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Parameters'(Rest, N + 7,
						X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.Parameters'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Parameters'(Rest2, 0, 0,
					     F1).


'skip_32_mesos.v1.Parameters'(<<_:32, Rest/binary>>, Z1,
			      Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Parameters'(Rest, Z1, Z2,
					     F1).


'skip_64_mesos.v1.Parameters'(<<_:64, Rest/binary>>, Z1,
			      Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Parameters'(Rest, Z1, Z2,
					     F1).


'd_msg_mesos.v1.Address'(Bin) ->
    'dfp_read_field_def_mesos.v1.Address'(Bin, 0, 0,
					  undefined, undefined, undefined).

'dfp_read_field_def_mesos.v1.Address'(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.Address_hostname'(Rest, Z1, Z2, F1,
					F2, F3);
'dfp_read_field_def_mesos.v1.Address'(<<18,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.Address_ip'(Rest, Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.Address'(<<24,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.Address_port'(Rest, Z1, Z2, F1, F2,
				    F3);
'dfp_read_field_def_mesos.v1.Address'(<<>>, 0, 0, F1,
				      F2, F3) ->
    #'mesos.v1.Address'{hostname = F1, ip = F2, port = F3};
'dfp_read_field_def_mesos.v1.Address'(Other, Z1, Z2, F1,
				      F2, F3) ->
    'dg_read_field_def_mesos.v1.Address'(Other, Z1, Z2, F1,
					 F2, F3).

'dg_read_field_def_mesos.v1.Address'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Address'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
'dg_read_field_def_mesos.v1.Address'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Address_hostname'(Rest, 0, 0, F1, F2,
					      F3);
      18 ->
	  'd_field_mesos.v1.Address_ip'(Rest, 0, 0, F1, F2, F3);
      24 ->
	  'd_field_mesos.v1.Address_port'(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Address'(Rest, 0, 0, F1, F2, F3);
	    1 -> 'skip_64_mesos.v1.Address'(Rest, 0, 0, F1, F2, F3);
	    2 ->
		'skip_length_delimited_mesos.v1.Address'(Rest, 0, 0, F1,
							 F2, F3);
	    5 -> 'skip_32_mesos.v1.Address'(Rest, 0, 0, F1, F2, F3)
	  end
    end;
'dg_read_field_def_mesos.v1.Address'(<<>>, 0, 0, F1, F2,
				     F3) ->
    #'mesos.v1.Address'{hostname = F1, ip = F2, port = F3}.

'd_field_mesos.v1.Address_hostname'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.Address_hostname'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3);
'd_field_mesos.v1.Address_hostname'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Address'(Rest2, 0, 0,
					  NewFValue, F2, F3).


'd_field_mesos.v1.Address_ip'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.Address_ip'(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3);
'd_field_mesos.v1.Address_ip'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Address'(Rest2, 0, 0, F1,
					  NewFValue, F3).


'd_field_mesos.v1.Address_port'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.Address_port'(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3);
'd_field_mesos.v1.Address_port'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'dfp_read_field_def_mesos.v1.Address'(Rest, 0, 0, F1,
					  F2, NewFValue).


'skip_varint_mesos.v1.Address'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3) ->
    'skip_varint_mesos.v1.Address'(Rest, Z1, Z2, F1, F2,
				   F3);
'skip_varint_mesos.v1.Address'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.Address'(Rest, Z1, Z2, F1,
					  F2, F3).


'skip_length_delimited_mesos.v1.Address'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Address'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3);
'skip_length_delimited_mesos.v1.Address'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Address'(Rest2, 0, 0, F1,
					  F2, F3).


'skip_32_mesos.v1.Address'(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.Address'(Rest, Z1, Z2, F1,
					  F2, F3).


'skip_64_mesos.v1.Address'(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.Address'(Rest, Z1, Z2, F1,
					  F2, F3).


'd_msg_mesos.v1.URL'(Bin) ->
    'dfp_read_field_def_mesos.v1.URL'(Bin, 0, 0, undefined,
				      undefined, undefined, [], undefined).

'dfp_read_field_def_mesos.v1.URL'(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.URL_scheme'(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5);
'dfp_read_field_def_mesos.v1.URL'(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.URL_address'(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5);
'dfp_read_field_def_mesos.v1.URL'(<<26, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.URL_path'(Rest, Z1, Z2, F1, F2, F3,
				F4, F5);
'dfp_read_field_def_mesos.v1.URL'(<<34, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.URL_query'(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5);
'dfp_read_field_def_mesos.v1.URL'(<<42, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.URL_fragment'(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5);
'dfp_read_field_def_mesos.v1.URL'(<<>>, 0, 0, F1, F2,
				  F3, F4, F5) ->
    #'mesos.v1.URL'{scheme = F1, address = F2, path = F3,
		    query = lists:reverse(F4), fragment = F5};
'dfp_read_field_def_mesos.v1.URL'(Other, Z1, Z2, F1, F2,
				  F3, F4, F5) ->
    'dg_read_field_def_mesos.v1.URL'(Other, Z1, Z2, F1, F2,
				     F3, F4, F5).

'dg_read_field_def_mesos.v1.URL'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.URL'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5);
'dg_read_field_def_mesos.v1.URL'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.URL_scheme'(Rest, 0, 0, F1, F2, F3,
					F4, F5);
      18 ->
	  'd_field_mesos.v1.URL_address'(Rest, 0, 0, F1, F2, F3,
					 F4, F5);
      26 ->
	  'd_field_mesos.v1.URL_path'(Rest, 0, 0, F1, F2, F3, F4,
				      F5);
      34 ->
	  'd_field_mesos.v1.URL_query'(Rest, 0, 0, F1, F2, F3, F4,
				       F5);
      42 ->
	  'd_field_mesos.v1.URL_fragment'(Rest, 0, 0, F1, F2, F3,
					  F4, F5);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.URL'(Rest, 0, 0, F1, F2, F3, F4,
					   F5);
	    1 ->
		'skip_64_mesos.v1.URL'(Rest, 0, 0, F1, F2, F3, F4, F5);
	    2 ->
		'skip_length_delimited_mesos.v1.URL'(Rest, 0, 0, F1, F2,
						     F3, F4, F5);
	    5 ->
		'skip_32_mesos.v1.URL'(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
'dg_read_field_def_mesos.v1.URL'(<<>>, 0, 0, F1, F2, F3,
				 F4, F5) ->
    #'mesos.v1.URL'{scheme = F1, address = F2, path = F3,
		    query = lists:reverse(F4), fragment = F5}.

'd_field_mesos.v1.URL_scheme'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.URL_scheme'(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.URL_scheme'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.URL'(Rest2, 0, 0,
				      NewFValue, F2, F3, F4, F5).


'd_field_mesos.v1.URL_address'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.URL_address'(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.URL_address'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Address'),
    'dfp_read_field_def_mesos.v1.URL'(Rest2, 0, 0, F1,
				      if F2 == undefined -> NewFValue;
					 true ->
					     'merge_msg_mesos.v1.Address'(F2,
									  NewFValue)
				      end,
				      F3, F4, F5).


'd_field_mesos.v1.URL_path'(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.URL_path'(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5);
'd_field_mesos.v1.URL_path'(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, _, F4, F5) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.URL'(Rest2, 0, 0, F1, F2,
				      NewFValue, F4, F5).


'd_field_mesos.v1.URL_query'(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.URL_query'(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5);
'd_field_mesos.v1.URL_query'(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Parameter'),
    'dfp_read_field_def_mesos.v1.URL'(Rest2, 0, 0, F1, F2,
				      F3, [NewFValue | F4], F5).


'd_field_mesos.v1.URL_fragment'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.URL_fragment'(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.URL_fragment'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.URL'(Rest2, 0, 0, F1, F2,
				      F3, F4, NewFValue).


'skip_varint_mesos.v1.URL'(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5) ->
    'skip_varint_mesos.v1.URL'(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5);
'skip_varint_mesos.v1.URL'(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_mesos.v1.URL'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5).


'skip_length_delimited_mesos.v1.URL'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.URL'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5);
'skip_length_delimited_mesos.v1.URL'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.URL'(Rest2, 0, 0, F1, F2,
				      F3, F4, F5).


'skip_32_mesos.v1.URL'(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_mesos.v1.URL'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5).


'skip_64_mesos.v1.URL'(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_mesos.v1.URL'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5).


'd_msg_mesos.v1.Offer'(Bin) ->
    'dfp_read_field_def_mesos.v1.Offer'(Bin, 0, 0,
					undefined, undefined, undefined,
					undefined, undefined, [], [], []).

'dfp_read_field_def_mesos.v1.Offer'(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    'd_field_mesos.v1.Offer_id'(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.Offer'(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    'd_field_mesos.v1.Offer_framework_id'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.Offer'(<<26, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    'd_field_mesos.v1.Offer_agent_id'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.Offer'(<<34, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    'd_field_mesos.v1.Offer_hostname'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.Offer'(<<66, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    'd_field_mesos.v1.Offer_url'(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.Offer'(<<42, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    'd_field_mesos.v1.Offer_resources'(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.Offer'(<<58, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    'd_field_mesos.v1.Offer_attributes'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.Offer'(<<50, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    'd_field_mesos.v1.Offer_executor_ids'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.Offer'(<<>>, 0, 0, F1, F2,
				    F3, F4, F5, F6, F7, F8) ->
    #'mesos.v1.Offer'{id = F1, framework_id = F2,
		      agent_id = F3, hostname = F4, url = F5,
		      resources = lists:reverse(F6),
		      attributes = lists:reverse(F7),
		      executor_ids = lists:reverse(F8)};
'dfp_read_field_def_mesos.v1.Offer'(Other, Z1, Z2, F1,
				    F2, F3, F4, F5, F6, F7, F8) ->
    'dg_read_field_def_mesos.v1.Offer'(Other, Z1, Z2, F1,
				       F2, F3, F4, F5, F6, F7, F8).

'dg_read_field_def_mesos.v1.Offer'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Offer'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8);
'dg_read_field_def_mesos.v1.Offer'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Offer_id'(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8);
      18 ->
	  'd_field_mesos.v1.Offer_framework_id'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8);
      26 ->
	  'd_field_mesos.v1.Offer_agent_id'(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8);
      34 ->
	  'd_field_mesos.v1.Offer_hostname'(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8);
      66 ->
	  'd_field_mesos.v1.Offer_url'(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8);
      42 ->
	  'd_field_mesos.v1.Offer_resources'(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8);
      58 ->
	  'd_field_mesos.v1.Offer_attributes'(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8);
      50 ->
	  'd_field_mesos.v1.Offer_executor_ids'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Offer'(Rest, 0, 0, F1, F2, F3, F4,
					     F5, F6, F7, F8);
	    1 ->
		'skip_64_mesos.v1.Offer'(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, F7, F8);
	    2 ->
		'skip_length_delimited_mesos.v1.Offer'(Rest, 0, 0, F1,
						       F2, F3, F4, F5, F6, F7,
						       F8);
	    5 ->
		'skip_32_mesos.v1.Offer'(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, F7, F8)
	  end
    end;
'dg_read_field_def_mesos.v1.Offer'(<<>>, 0, 0, F1, F2,
				   F3, F4, F5, F6, F7, F8) ->
    #'mesos.v1.Offer'{id = F1, framework_id = F2,
		      agent_id = F3, hostname = F4, url = F5,
		      resources = lists:reverse(F6),
		      attributes = lists:reverse(F7),
		      executor_ids = lists:reverse(F8)}.

'd_field_mesos.v1.Offer_id'(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    'd_field_mesos.v1.Offer_id'(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8);
'd_field_mesos.v1.Offer_id'(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.OfferID'),
    'dfp_read_field_def_mesos.v1.Offer'(Rest2, 0, 0,
					if F1 == undefined -> NewFValue;
					   true ->
					       'merge_msg_mesos.v1.OfferID'(F1,
									    NewFValue)
					end,
					F2, F3, F4, F5, F6, F7, F8).


'd_field_mesos.v1.Offer_framework_id'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    'd_field_mesos.v1.Offer_framework_id'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8);
'd_field_mesos.v1.Offer_framework_id'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.FrameworkID'),
    'dfp_read_field_def_mesos.v1.Offer'(Rest2, 0, 0, F1,
					if F2 == undefined -> NewFValue;
					   true ->
					       'merge_msg_mesos.v1.FrameworkID'(F2,
										NewFValue)
					end,
					F3, F4, F5, F6, F7, F8).


'd_field_mesos.v1.Offer_agent_id'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    'd_field_mesos.v1.Offer_agent_id'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8);
'd_field_mesos.v1.Offer_agent_id'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.AgentID'),
    'dfp_read_field_def_mesos.v1.Offer'(Rest2, 0, 0, F1, F2,
					if F3 == undefined -> NewFValue;
					   true ->
					       'merge_msg_mesos.v1.AgentID'(F3,
									    NewFValue)
					end,
					F4, F5, F6, F7, F8).


'd_field_mesos.v1.Offer_hostname'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    'd_field_mesos.v1.Offer_hostname'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8);
'd_field_mesos.v1.Offer_hostname'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, _, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Offer'(Rest2, 0, 0, F1, F2,
					F3, NewFValue, F5, F6, F7, F8).


'd_field_mesos.v1.Offer_url'(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    'd_field_mesos.v1.Offer_url'(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8);
'd_field_mesos.v1.Offer_url'(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.URL'),
    'dfp_read_field_def_mesos.v1.Offer'(Rest2, 0, 0, F1, F2,
					F3, F4,
					if F5 == undefined -> NewFValue;
					   true ->
					       'merge_msg_mesos.v1.URL'(F5,
									NewFValue)
					end,
					F6, F7, F8).


'd_field_mesos.v1.Offer_resources'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    'd_field_mesos.v1.Offer_resources'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8);
'd_field_mesos.v1.Offer_resources'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Resource'),
    'dfp_read_field_def_mesos.v1.Offer'(Rest2, 0, 0, F1, F2,
					F3, F4, F5, [NewFValue | F6], F7, F8).


'd_field_mesos.v1.Offer_attributes'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    'd_field_mesos.v1.Offer_attributes'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8);
'd_field_mesos.v1.Offer_attributes'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Attribute'),
    'dfp_read_field_def_mesos.v1.Offer'(Rest2, 0, 0, F1, F2,
					F3, F4, F5, F6, [NewFValue | F7], F8).


'd_field_mesos.v1.Offer_executor_ids'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    'd_field_mesos.v1.Offer_executor_ids'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8);
'd_field_mesos.v1.Offer_executor_ids'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ExecutorID'),
    'dfp_read_field_def_mesos.v1.Offer'(Rest2, 0, 0, F1, F2,
					F3, F4, F5, F6, F7, [NewFValue | F8]).


'skip_varint_mesos.v1.Offer'(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    'skip_varint_mesos.v1.Offer'(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8);
'skip_varint_mesos.v1.Offer'(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    'dfp_read_field_def_mesos.v1.Offer'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8).


'skip_length_delimited_mesos.v1.Offer'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Offer'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8);
'skip_length_delimited_mesos.v1.Offer'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7,
				       F8) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Offer'(Rest2, 0, 0, F1, F2,
					F3, F4, F5, F6, F7, F8).


'skip_32_mesos.v1.Offer'(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7, F8) ->
    'dfp_read_field_def_mesos.v1.Offer'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8).


'skip_64_mesos.v1.Offer'(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7, F8) ->
    'dfp_read_field_def_mesos.v1.Offer'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8).


'd_msg_mesos.v1.Credential'(Bin) ->
    'dfp_read_field_def_mesos.v1.Credential'(Bin, 0, 0,
					     undefined, undefined).

'dfp_read_field_def_mesos.v1.Credential'(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Credential_principal'(Rest, Z1, Z2,
					    F1, F2);
'dfp_read_field_def_mesos.v1.Credential'(<<18,
					   Rest/binary>>,
					 Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.Credential_secret'(Rest, Z1, Z2, F1,
					 F2);
'dfp_read_field_def_mesos.v1.Credential'(<<>>, 0, 0, F1,
					 F2) ->
    #'mesos.v1.Credential'{principal = F1, secret = F2};
'dfp_read_field_def_mesos.v1.Credential'(Other, Z1, Z2,
					 F1, F2) ->
    'dg_read_field_def_mesos.v1.Credential'(Other, Z1, Z2,
					    F1, F2).

'dg_read_field_def_mesos.v1.Credential'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Credential'(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
'dg_read_field_def_mesos.v1.Credential'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Credential_principal'(Rest, 0, 0, F1,
						  F2);
      18 ->
	  'd_field_mesos.v1.Credential_secret'(Rest, 0, 0, F1,
					       F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Credential'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_mesos.v1.Credential'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.Credential'(Rest, 0, 0,
							    F1, F2);
	    5 -> 'skip_32_mesos.v1.Credential'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.Credential'(<<>>, 0, 0, F1,
					F2) ->
    #'mesos.v1.Credential'{principal = F1, secret = F2}.

'd_field_mesos.v1.Credential_principal'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Credential_principal'(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
'd_field_mesos.v1.Credential_principal'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.Credential'(Rest2, 0, 0,
					     NewFValue, F2).


'd_field_mesos.v1.Credential_secret'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.Credential_secret'(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
'd_field_mesos.v1.Credential_secret'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_mesos.v1.Credential'(Rest2, 0, 0,
					     F1, NewFValue).


'skip_varint_mesos.v1.Credential'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.Credential'(Rest, Z1, Z2, F1, F2);
'skip_varint_mesos.v1.Credential'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Credential'(Rest, Z1, Z2,
					     F1, F2).


'skip_length_delimited_mesos.v1.Credential'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Credential'(Rest, N + 7,
						X bsl N + Acc, F1, F2);
'skip_length_delimited_mesos.v1.Credential'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Credential'(Rest2, 0, 0,
					     F1, F2).


'skip_32_mesos.v1.Credential'(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Credential'(Rest, Z1, Z2,
					     F1, F2).


'skip_64_mesos.v1.Credential'(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.Credential'(Rest, Z1, Z2,
					     F1, F2).


'd_msg_mesos.v1.ACL.Entity'(Bin) ->
    'dfp_read_field_def_mesos.v1.ACL.Entity'(Bin, 0, 0,
					     undefined, []).

'dfp_read_field_def_mesos.v1.ACL.Entity'(<<8,
					   Rest/binary>>,
					 Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.ACL.Entity_type'(Rest, Z1, Z2, F1,
				       F2);
'dfp_read_field_def_mesos.v1.ACL.Entity'(<<18,
					   Rest/binary>>,
					 Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.ACL.Entity_values'(Rest, Z1, Z2, F1,
					 F2);
'dfp_read_field_def_mesos.v1.ACL.Entity'(<<>>, 0, 0, F1,
					 F2) ->
    #'mesos.v1.ACL.Entity'{type = F1,
			   values = lists:reverse(F2)};
'dfp_read_field_def_mesos.v1.ACL.Entity'(Other, Z1, Z2,
					 F1, F2) ->
    'dg_read_field_def_mesos.v1.ACL.Entity'(Other, Z1, Z2,
					    F1, F2).

'dg_read_field_def_mesos.v1.ACL.Entity'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ACL.Entity'(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
'dg_read_field_def_mesos.v1.ACL.Entity'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_mesos.v1.ACL.Entity_type'(Rest, 0, 0, F1, F2);
      18 ->
	  'd_field_mesos.v1.ACL.Entity_values'(Rest, 0, 0, F1,
					       F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.ACL.Entity'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_mesos.v1.ACL.Entity'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.ACL.Entity'(Rest, 0, 0,
							    F1, F2);
	    5 -> 'skip_32_mesos.v1.ACL.Entity'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.ACL.Entity'(<<>>, 0, 0, F1,
					F2) ->
    #'mesos.v1.ACL.Entity'{type = F1,
			   values = lists:reverse(F2)}.

'd_field_mesos.v1.ACL.Entity_type'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.ACL.Entity_type'(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
'd_field_mesos.v1.ACL.Entity_type'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_mesos.v1.ACL.Entity.Type'(Tmp),
    'dfp_read_field_def_mesos.v1.ACL.Entity'(Rest, 0, 0,
					     NewFValue, F2).


'd_field_mesos.v1.ACL.Entity_values'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.ACL.Entity_values'(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
'd_field_mesos.v1.ACL.Entity_values'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.ACL.Entity'(Rest2, 0, 0,
					     F1, [NewFValue | F2]).


'skip_varint_mesos.v1.ACL.Entity'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.ACL.Entity'(Rest, Z1, Z2, F1, F2);
'skip_varint_mesos.v1.ACL.Entity'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ACL.Entity'(Rest, Z1, Z2,
					     F1, F2).


'skip_length_delimited_mesos.v1.ACL.Entity'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ACL.Entity'(Rest, N + 7,
						X bsl N + Acc, F1, F2);
'skip_length_delimited_mesos.v1.ACL.Entity'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ACL.Entity'(Rest2, 0, 0,
					     F1, F2).


'skip_32_mesos.v1.ACL.Entity'(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ACL.Entity'(Rest, Z1, Z2,
					     F1, F2).


'skip_64_mesos.v1.ACL.Entity'(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ACL.Entity'(Rest, Z1, Z2,
					     F1, F2).


'd_msg_mesos.v1.TaskStatus'(Bin) ->
    'dfp_read_field_def_mesos.v1.TaskStatus'(Bin, 0, 0,
					     undefined, undefined, undefined,
					     undefined, undefined, undefined,
					     undefined, undefined, undefined,
					     undefined, undefined, undefined).

'dfp_read_field_def_mesos.v1.TaskStatus'(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12) ->
    'd_field_mesos.v1.TaskStatus_task_id'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12);
'dfp_read_field_def_mesos.v1.TaskStatus'(<<16,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12) ->
    'd_field_mesos.v1.TaskStatus_state'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12);
'dfp_read_field_def_mesos.v1.TaskStatus'(<<34,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12) ->
    'd_field_mesos.v1.TaskStatus_message'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12);
'dfp_read_field_def_mesos.v1.TaskStatus'(<<72,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12) ->
    'd_field_mesos.v1.TaskStatus_source'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12);
'dfp_read_field_def_mesos.v1.TaskStatus'(<<80,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12) ->
    'd_field_mesos.v1.TaskStatus_reason'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12);
'dfp_read_field_def_mesos.v1.TaskStatus'(<<26,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12) ->
    'd_field_mesos.v1.TaskStatus_data'(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12);
'dfp_read_field_def_mesos.v1.TaskStatus'(<<42,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12) ->
    'd_field_mesos.v1.TaskStatus_agent_id'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12);
'dfp_read_field_def_mesos.v1.TaskStatus'(<<58,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12) ->
    'd_field_mesos.v1.TaskStatus_executor_id'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12);
'dfp_read_field_def_mesos.v1.TaskStatus'(<<49,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12) ->
    'd_field_mesos.v1.TaskStatus_timestamp'(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12);
'dfp_read_field_def_mesos.v1.TaskStatus'(<<90,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12) ->
    'd_field_mesos.v1.TaskStatus_uuid'(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12);
'dfp_read_field_def_mesos.v1.TaskStatus'(<<64,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12) ->
    'd_field_mesos.v1.TaskStatus_healthy'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12);
'dfp_read_field_def_mesos.v1.TaskStatus'(<<98,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12) ->
    'd_field_mesos.v1.TaskStatus_labels'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12);
'dfp_read_field_def_mesos.v1.TaskStatus'(<<>>, 0, 0, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12) ->
    #'mesos.v1.TaskStatus'{task_id = F1, state = F2,
			   message = F3, source = F4, reason = F5, data = F6,
			   agent_id = F7, executor_id = F8, timestamp = F9,
			   uuid = F10, healthy = F11, labels = F12};
'dfp_read_field_def_mesos.v1.TaskStatus'(Other, Z1, Z2,
					 F1, F2, F3, F4, F5, F6, F7, F8, F9,
					 F10, F11, F12) ->
    'dg_read_field_def_mesos.v1.TaskStatus'(Other, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12).

'dg_read_field_def_mesos.v1.TaskStatus'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.TaskStatus'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12);
'dg_read_field_def_mesos.v1.TaskStatus'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.TaskStatus_task_id'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12);
      16 ->
	  'd_field_mesos.v1.TaskStatus_state'(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12);
      34 ->
	  'd_field_mesos.v1.TaskStatus_message'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12);
      72 ->
	  'd_field_mesos.v1.TaskStatus_source'(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12);
      80 ->
	  'd_field_mesos.v1.TaskStatus_reason'(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12);
      26 ->
	  'd_field_mesos.v1.TaskStatus_data'(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12);
      42 ->
	  'd_field_mesos.v1.TaskStatus_agent_id'(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12);
      58 ->
	  'd_field_mesos.v1.TaskStatus_executor_id'(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12);
      49 ->
	  'd_field_mesos.v1.TaskStatus_timestamp'(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12);
      90 ->
	  'd_field_mesos.v1.TaskStatus_uuid'(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12);
      64 ->
	  'd_field_mesos.v1.TaskStatus_healthy'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12);
      98 ->
	  'd_field_mesos.v1.TaskStatus_labels'(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.TaskStatus'(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12);
	    1 ->
		'skip_64_mesos.v1.TaskStatus'(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6, F7, F8, F9, F10, F11,
					      F12);
	    2 ->
		'skip_length_delimited_mesos.v1.TaskStatus'(Rest, 0, 0,
							    F1, F2, F3, F4, F5,
							    F6, F7, F8, F9, F10,
							    F11, F12);
	    5 ->
		'skip_32_mesos.v1.TaskStatus'(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6, F7, F8, F9, F10, F11,
					      F12)
	  end
    end;
'dg_read_field_def_mesos.v1.TaskStatus'(<<>>, 0, 0, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12) ->
    #'mesos.v1.TaskStatus'{task_id = F1, state = F2,
			   message = F3, source = F4, reason = F5, data = F6,
			   agent_id = F7, executor_id = F8, timestamp = F9,
			   uuid = F10, healthy = F11, labels = F12}.

'd_field_mesos.v1.TaskStatus_task_id'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12)
    when N < 57 ->
    'd_field_mesos.v1.TaskStatus_task_id'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12);
'd_field_mesos.v1.TaskStatus_task_id'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.TaskID'),
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest2, 0, 0,
					     if F1 == undefined -> NewFValue;
						true ->
						    'merge_msg_mesos.v1.TaskID'(F1,
										NewFValue)
					     end,
					     F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12).


'd_field_mesos.v1.TaskStatus_state'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12)
    when N < 57 ->
    'd_field_mesos.v1.TaskStatus_state'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12);
'd_field_mesos.v1.TaskStatus_state'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_mesos.v1.TaskState'(Tmp),
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest, 0, 0, F1,
					     NewFValue, F3, F4, F5, F6, F7, F8,
					     F9, F10, F11, F12).


'd_field_mesos.v1.TaskStatus_message'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12)
    when N < 57 ->
    'd_field_mesos.v1.TaskStatus_message'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12);
'd_field_mesos.v1.TaskStatus_message'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, _, F4, F5, F6, F7, F8, F9,
				      F10, F11, F12) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest2, 0, 0,
					     F1, F2, NewFValue, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12).


'd_field_mesos.v1.TaskStatus_source'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12)
    when N < 57 ->
    'd_field_mesos.v1.TaskStatus_source'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12);
'd_field_mesos.v1.TaskStatus_source'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, _, F5, F6, F7, F8, F9,
				     F10, F11, F12) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_mesos.v1.TaskStatus.Source'(Tmp),
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest, 0, 0, F1,
					     F2, F3, NewFValue, F5, F6, F7, F8,
					     F9, F10, F11, F12).


'd_field_mesos.v1.TaskStatus_reason'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12)
    when N < 57 ->
    'd_field_mesos.v1.TaskStatus_reason'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12);
'd_field_mesos.v1.TaskStatus_reason'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9,
				     F10, F11, F12) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_mesos.v1.TaskStatus.Reason'(Tmp),
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest, 0, 0, F1,
					     F2, F3, F4, NewFValue, F6, F7, F8,
					     F9, F10, F11, F12).


'd_field_mesos.v1.TaskStatus_data'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12)
    when N < 57 ->
    'd_field_mesos.v1.TaskStatus_data'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12);
'd_field_mesos.v1.TaskStatus_data'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9,
				   F10, F11, F12) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest2, 0, 0,
					     F1, F2, F3, F4, F5, NewFValue, F7,
					     F8, F9, F10, F11, F12).


'd_field_mesos.v1.TaskStatus_agent_id'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12)
    when N < 57 ->
    'd_field_mesos.v1.TaskStatus_agent_id'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12);
'd_field_mesos.v1.TaskStatus_agent_id'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.AgentID'),
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest2, 0, 0,
					     F1, F2, F3, F4, F5, F6,
					     if F7 == undefined -> NewFValue;
						true ->
						    'merge_msg_mesos.v1.AgentID'(F7,
										 NewFValue)
					     end,
					     F8, F9, F10, F11, F12).


'd_field_mesos.v1.TaskStatus_executor_id'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12)
    when N < 57 ->
    'd_field_mesos.v1.TaskStatus_executor_id'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12);
'd_field_mesos.v1.TaskStatus_executor_id'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ExecutorID'),
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest2, 0, 0,
					     F1, F2, F3, F4, F5, F6, F7,
					     if F8 == undefined -> NewFValue;
						true ->
						    'merge_msg_mesos.v1.ExecutorID'(F8,
										    NewFValue)
					     end,
					     F9, F10, F11, F12).


'd_field_mesos.v1.TaskStatus_timestamp'(<<Value:64/little-float,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					_, F10, F11, F12) ->
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8,
					     Value, F10, F11, F12).


'd_field_mesos.v1.TaskStatus_uuid'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12)
    when N < 57 ->
    'd_field_mesos.v1.TaskStatus_uuid'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12);
'd_field_mesos.v1.TaskStatus_uuid'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   _, F11, F12) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest2, 0, 0,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     NewFValue, F11, F12).


'd_field_mesos.v1.TaskStatus_healthy'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12)
    when N < 57 ->
    'd_field_mesos.v1.TaskStatus_healthy'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12);
'd_field_mesos.v1.TaskStatus_healthy'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, _, F12) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest, 0, 0, F1,
					     F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, NewFValue, F12).


'd_field_mesos.v1.TaskStatus_labels'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12)
    when N < 57 ->
    'd_field_mesos.v1.TaskStatus_labels'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12);
'd_field_mesos.v1.TaskStatus_labels'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Labels'),
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest2, 0, 0,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11,
					     if F12 == undefined -> NewFValue;
						true ->
						    'merge_msg_mesos.v1.Labels'(F12,
										NewFValue)
					     end).


'skip_varint_mesos.v1.TaskStatus'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12) ->
    'skip_varint_mesos.v1.TaskStatus'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      F12);
'skip_varint_mesos.v1.TaskStatus'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12) ->
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12).


'skip_length_delimited_mesos.v1.TaskStatus'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.TaskStatus'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12);
'skip_length_delimited_mesos.v1.TaskStatus'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest2, 0, 0,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12).


'skip_32_mesos.v1.TaskStatus'(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12) ->
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12).


'skip_64_mesos.v1.TaskStatus'(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12) ->
    'dfp_read_field_def_mesos.v1.TaskStatus'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12).


'd_msg_mesos.v1.scheduler.Event.Update'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Update'(Bin,
							 0, 0, undefined).

'dfp_read_field_def_mesos.v1.scheduler.Event.Update'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F1) ->
    'd_field_mesos.v1.scheduler.Event.Update_status'(Rest,
						     Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.scheduler.Event.Update'(<<>>,
						     0, 0, F1) ->
    #'mesos.v1.scheduler.Event.Update'{status = F1};
'dfp_read_field_def_mesos.v1.scheduler.Event.Update'(Other,
						     Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.scheduler.Event.Update'(Other,
							Z1, Z2, F1).

'dg_read_field_def_mesos.v1.scheduler.Event.Update'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Event.Update'(Rest,
							N + 7, X bsl N + Acc,
							F1);
'dg_read_field_def_mesos.v1.scheduler.Event.Update'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Event.Update_status'(Rest,
							   0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Event.Update'(Rest, 0,
							      0, F1);
	    1 ->
		'skip_64_mesos.v1.scheduler.Event.Update'(Rest, 0, 0,
							  F1);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Event.Update'(Rest,
									0, 0,
									F1);
	    5 ->
		'skip_32_mesos.v1.scheduler.Event.Update'(Rest, 0, 0,
							  F1)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Event.Update'(<<>>,
						    0, 0, F1) ->
    #'mesos.v1.scheduler.Event.Update'{status = F1}.

'd_field_mesos.v1.scheduler.Event.Update_status'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event.Update_status'(Rest,
						     N + 7, X bsl N + Acc, F1);
'd_field_mesos.v1.scheduler.Event.Update_status'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.TaskStatus'),
    'dfp_read_field_def_mesos.v1.scheduler.Event.Update'(Rest2,
							 0, 0,
							 if F1 == undefined ->
								NewFValue;
							    true ->
								'merge_msg_mesos.v1.TaskStatus'(F1,
												NewFValue)
							 end).


'skip_varint_mesos.v1.scheduler.Event.Update'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1) ->
    'skip_varint_mesos.v1.scheduler.Event.Update'(Rest, Z1,
						  Z2, F1);
'skip_varint_mesos.v1.scheduler.Event.Update'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Update'(Rest,
							 Z1, Z2, F1).


'skip_length_delimited_mesos.v1.scheduler.Event.Update'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Event.Update'(Rest,
							    N + 7,
							    X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.scheduler.Event.Update'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Event.Update'(Rest2,
							 0, 0, F1).


'skip_32_mesos.v1.scheduler.Event.Update'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Update'(Rest,
							 Z1, Z2, F1).


'skip_64_mesos.v1.scheduler.Event.Update'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Update'(Rest,
							 Z1, Z2, F1).


'd_msg_mesos.v1.scheduler.Event.Error'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Error'(Bin,
							0, 0, undefined).

'dfp_read_field_def_mesos.v1.scheduler.Event.Error'(<<10,
						      Rest/binary>>,
						    Z1, Z2, F1) ->
    'd_field_mesos.v1.scheduler.Event.Error_message'(Rest,
						     Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.scheduler.Event.Error'(<<>>,
						    0, 0, F1) ->
    #'mesos.v1.scheduler.Event.Error'{message = F1};
'dfp_read_field_def_mesos.v1.scheduler.Event.Error'(Other,
						    Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.scheduler.Event.Error'(Other,
						       Z1, Z2, F1).

'dg_read_field_def_mesos.v1.scheduler.Event.Error'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Event.Error'(Rest,
						       N + 7, X bsl N + Acc,
						       F1);
'dg_read_field_def_mesos.v1.scheduler.Event.Error'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Event.Error_message'(Rest,
							   0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Event.Error'(Rest, 0, 0,
							     F1);
	    1 ->
		'skip_64_mesos.v1.scheduler.Event.Error'(Rest, 0, 0,
							 F1);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Event.Error'(Rest,
								       0, 0,
								       F1);
	    5 ->
		'skip_32_mesos.v1.scheduler.Event.Error'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Event.Error'(<<>>,
						   0, 0, F1) ->
    #'mesos.v1.scheduler.Event.Error'{message = F1}.

'd_field_mesos.v1.scheduler.Event.Error_message'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event.Error_message'(Rest,
						     N + 7, X bsl N + Acc, F1);
'd_field_mesos.v1.scheduler.Event.Error_message'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.scheduler.Event.Error'(Rest2,
							0, 0, NewFValue).


'skip_varint_mesos.v1.scheduler.Event.Error'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1) ->
    'skip_varint_mesos.v1.scheduler.Event.Error'(Rest, Z1,
						 Z2, F1);
'skip_varint_mesos.v1.scheduler.Event.Error'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Error'(Rest,
							Z1, Z2, F1).


'skip_length_delimited_mesos.v1.scheduler.Event.Error'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Event.Error'(Rest,
							   N + 7, X bsl N + Acc,
							   F1);
'skip_length_delimited_mesos.v1.scheduler.Event.Error'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Event.Error'(Rest2,
							0, 0, F1).


'skip_32_mesos.v1.scheduler.Event.Error'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Error'(Rest,
							Z1, Z2, F1).


'skip_64_mesos.v1.scheduler.Event.Error'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Error'(Rest,
							Z1, Z2, F1).


'd_msg_mesos.v1.scheduler.Event.Failure'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Failure'(Bin,
							  0, 0, undefined,
							  undefined, undefined).

'dfp_read_field_def_mesos.v1.scheduler.Event.Failure'(<<10,
							Rest/binary>>,
						      Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Event.Failure_agent_id'(Rest,
							Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Event.Failure'(<<18,
							Rest/binary>>,
						      Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Event.Failure_executor_id'(Rest,
							   Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Event.Failure'(<<24,
							Rest/binary>>,
						      Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Event.Failure_status'(Rest,
						      Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Event.Failure'(<<>>,
						      0, 0, F1, F2, F3) ->
    #'mesos.v1.scheduler.Event.Failure'{agent_id = F1,
					executor_id = F2, status = F3};
'dfp_read_field_def_mesos.v1.scheduler.Event.Failure'(Other,
						      Z1, Z2, F1, F2, F3) ->
    'dg_read_field_def_mesos.v1.scheduler.Event.Failure'(Other,
							 Z1, Z2, F1, F2, F3).

'dg_read_field_def_mesos.v1.scheduler.Event.Failure'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Event.Failure'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3);
'dg_read_field_def_mesos.v1.scheduler.Event.Failure'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Event.Failure_agent_id'(Rest,
							      0, 0, F1, F2, F3);
      18 ->
	  'd_field_mesos.v1.scheduler.Event.Failure_executor_id'(Rest,
								 0, 0, F1, F2,
								 F3);
      24 ->
	  'd_field_mesos.v1.scheduler.Event.Failure_status'(Rest,
							    0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Event.Failure'(Rest, 0,
							       0, F1, F2, F3);
	    1 ->
		'skip_64_mesos.v1.scheduler.Event.Failure'(Rest, 0, 0,
							   F1, F2, F3);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Event.Failure'(Rest,
									 0, 0,
									 F1, F2,
									 F3);
	    5 ->
		'skip_32_mesos.v1.scheduler.Event.Failure'(Rest, 0, 0,
							   F1, F2, F3)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Event.Failure'(<<>>,
						     0, 0, F1, F2, F3) ->
    #'mesos.v1.scheduler.Event.Failure'{agent_id = F1,
					executor_id = F2, status = F3}.

'd_field_mesos.v1.scheduler.Event.Failure_agent_id'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event.Failure_agent_id'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3);
'd_field_mesos.v1.scheduler.Event.Failure_agent_id'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.AgentID'),
    'dfp_read_field_def_mesos.v1.scheduler.Event.Failure'(Rest2,
							  0, 0,
							  if F1 == undefined ->
								 NewFValue;
							     true ->
								 'merge_msg_mesos.v1.AgentID'(F1,
											      NewFValue)
							  end,
							  F2, F3).


'd_field_mesos.v1.scheduler.Event.Failure_executor_id'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event.Failure_executor_id'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3);
'd_field_mesos.v1.scheduler.Event.Failure_executor_id'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ExecutorID'),
    'dfp_read_field_def_mesos.v1.scheduler.Event.Failure'(Rest2,
							  0, 0, F1,
							  if F2 == undefined ->
								 NewFValue;
							     true ->
								 'merge_msg_mesos.v1.ExecutorID'(F2,
												 NewFValue)
							  end,
							  F3).


'd_field_mesos.v1.scheduler.Event.Failure_status'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event.Failure_status'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3);
'd_field_mesos.v1.scheduler.Event.Failure_status'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'dfp_read_field_def_mesos.v1.scheduler.Event.Failure'(Rest,
							  0, 0, F1, F2,
							  NewFValue).


'skip_varint_mesos.v1.scheduler.Event.Failure'(<<1:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1, F2, F3) ->
    'skip_varint_mesos.v1.scheduler.Event.Failure'(Rest, Z1,
						   Z2, F1, F2, F3);
'skip_varint_mesos.v1.scheduler.Event.Failure'(<<0:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Failure'(Rest,
							  Z1, Z2, F1, F2, F3).


'skip_length_delimited_mesos.v1.scheduler.Event.Failure'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Event.Failure'(Rest,
							     N + 7,
							     X bsl N + Acc, F1,
							     F2, F3);
'skip_length_delimited_mesos.v1.scheduler.Event.Failure'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Event.Failure'(Rest2,
							  0, 0, F1, F2, F3).


'skip_32_mesos.v1.scheduler.Event.Failure'(<<_:32,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Failure'(Rest,
							  Z1, Z2, F1, F2, F3).


'skip_64_mesos.v1.scheduler.Event.Failure'(<<_:64,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Failure'(Rest,
							  Z1, Z2, F1, F2, F3).


'd_msg_mesos.v1.scheduler.Event.Message'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Message'(Bin,
							  0, 0, undefined,
							  undefined, undefined).

'dfp_read_field_def_mesos.v1.scheduler.Event.Message'(<<10,
							Rest/binary>>,
						      Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Event.Message_agent_id'(Rest,
							Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Event.Message'(<<18,
							Rest/binary>>,
						      Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Event.Message_executor_id'(Rest,
							   Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Event.Message'(<<26,
							Rest/binary>>,
						      Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.scheduler.Event.Message_data'(Rest,
						    Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.scheduler.Event.Message'(<<>>,
						      0, 0, F1, F2, F3) ->
    #'mesos.v1.scheduler.Event.Message'{agent_id = F1,
					executor_id = F2, data = F3};
'dfp_read_field_def_mesos.v1.scheduler.Event.Message'(Other,
						      Z1, Z2, F1, F2, F3) ->
    'dg_read_field_def_mesos.v1.scheduler.Event.Message'(Other,
							 Z1, Z2, F1, F2, F3).

'dg_read_field_def_mesos.v1.scheduler.Event.Message'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Event.Message'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3);
'dg_read_field_def_mesos.v1.scheduler.Event.Message'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Event.Message_agent_id'(Rest,
							      0, 0, F1, F2, F3);
      18 ->
	  'd_field_mesos.v1.scheduler.Event.Message_executor_id'(Rest,
								 0, 0, F1, F2,
								 F3);
      26 ->
	  'd_field_mesos.v1.scheduler.Event.Message_data'(Rest, 0,
							  0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Event.Message'(Rest, 0,
							       0, F1, F2, F3);
	    1 ->
		'skip_64_mesos.v1.scheduler.Event.Message'(Rest, 0, 0,
							   F1, F2, F3);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Event.Message'(Rest,
									 0, 0,
									 F1, F2,
									 F3);
	    5 ->
		'skip_32_mesos.v1.scheduler.Event.Message'(Rest, 0, 0,
							   F1, F2, F3)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Event.Message'(<<>>,
						     0, 0, F1, F2, F3) ->
    #'mesos.v1.scheduler.Event.Message'{agent_id = F1,
					executor_id = F2, data = F3}.

'd_field_mesos.v1.scheduler.Event.Message_agent_id'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event.Message_agent_id'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3);
'd_field_mesos.v1.scheduler.Event.Message_agent_id'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.AgentID'),
    'dfp_read_field_def_mesos.v1.scheduler.Event.Message'(Rest2,
							  0, 0,
							  if F1 == undefined ->
								 NewFValue;
							     true ->
								 'merge_msg_mesos.v1.AgentID'(F1,
											      NewFValue)
							  end,
							  F2, F3).


'd_field_mesos.v1.scheduler.Event.Message_executor_id'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event.Message_executor_id'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3);
'd_field_mesos.v1.scheduler.Event.Message_executor_id'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ExecutorID'),
    'dfp_read_field_def_mesos.v1.scheduler.Event.Message'(Rest2,
							  0, 0, F1,
							  if F2 == undefined ->
								 NewFValue;
							     true ->
								 'merge_msg_mesos.v1.ExecutorID'(F2,
												 NewFValue)
							  end,
							  F3).


'd_field_mesos.v1.scheduler.Event.Message_data'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event.Message_data'(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3);
'd_field_mesos.v1.scheduler.Event.Message_data'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_mesos.v1.scheduler.Event.Message'(Rest2,
							  0, 0, F1, F2,
							  NewFValue).


'skip_varint_mesos.v1.scheduler.Event.Message'(<<1:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1, F2, F3) ->
    'skip_varint_mesos.v1.scheduler.Event.Message'(Rest, Z1,
						   Z2, F1, F2, F3);
'skip_varint_mesos.v1.scheduler.Event.Message'(<<0:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Message'(Rest,
							  Z1, Z2, F1, F2, F3).


'skip_length_delimited_mesos.v1.scheduler.Event.Message'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Event.Message'(Rest,
							     N + 7,
							     X bsl N + Acc, F1,
							     F2, F3);
'skip_length_delimited_mesos.v1.scheduler.Event.Message'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Event.Message'(Rest2,
							  0, 0, F1, F2, F3).


'skip_32_mesos.v1.scheduler.Event.Message'(<<_:32,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Message'(Rest,
							  Z1, Z2, F1, F2, F3).


'skip_64_mesos.v1.scheduler.Event.Message'(<<_:64,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Message'(Rest,
							  Z1, Z2, F1, F2, F3).


'd_msg_mesos.v1.scheduler.Event.Rescind'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Rescind'(Bin,
							  0, 0, undefined).

'dfp_read_field_def_mesos.v1.scheduler.Event.Rescind'(<<10,
							Rest/binary>>,
						      Z1, Z2, F1) ->
    'd_field_mesos.v1.scheduler.Event.Rescind_offer_id'(Rest,
							Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.scheduler.Event.Rescind'(<<>>,
						      0, 0, F1) ->
    #'mesos.v1.scheduler.Event.Rescind'{offer_id = F1};
'dfp_read_field_def_mesos.v1.scheduler.Event.Rescind'(Other,
						      Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.scheduler.Event.Rescind'(Other,
							 Z1, Z2, F1).

'dg_read_field_def_mesos.v1.scheduler.Event.Rescind'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Event.Rescind'(Rest,
							 N + 7, X bsl N + Acc,
							 F1);
'dg_read_field_def_mesos.v1.scheduler.Event.Rescind'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Event.Rescind_offer_id'(Rest,
							      0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Event.Rescind'(Rest, 0,
							       0, F1);
	    1 ->
		'skip_64_mesos.v1.scheduler.Event.Rescind'(Rest, 0, 0,
							   F1);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Event.Rescind'(Rest,
									 0, 0,
									 F1);
	    5 ->
		'skip_32_mesos.v1.scheduler.Event.Rescind'(Rest, 0, 0,
							   F1)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Event.Rescind'(<<>>,
						     0, 0, F1) ->
    #'mesos.v1.scheduler.Event.Rescind'{offer_id = F1}.

'd_field_mesos.v1.scheduler.Event.Rescind_offer_id'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event.Rescind_offer_id'(Rest,
							N + 7, X bsl N + Acc,
							F1);
'd_field_mesos.v1.scheduler.Event.Rescind_offer_id'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.OfferID'),
    'dfp_read_field_def_mesos.v1.scheduler.Event.Rescind'(Rest2,
							  0, 0,
							  if F1 == undefined ->
								 NewFValue;
							     true ->
								 'merge_msg_mesos.v1.OfferID'(F1,
											      NewFValue)
							  end).


'skip_varint_mesos.v1.scheduler.Event.Rescind'(<<1:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1) ->
    'skip_varint_mesos.v1.scheduler.Event.Rescind'(Rest, Z1,
						   Z2, F1);
'skip_varint_mesos.v1.scheduler.Event.Rescind'(<<0:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Rescind'(Rest,
							  Z1, Z2, F1).


'skip_length_delimited_mesos.v1.scheduler.Event.Rescind'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Event.Rescind'(Rest,
							     N + 7,
							     X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.scheduler.Event.Rescind'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Event.Rescind'(Rest2,
							  0, 0, F1).


'skip_32_mesos.v1.scheduler.Event.Rescind'(<<_:32,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Rescind'(Rest,
							  Z1, Z2, F1).


'skip_64_mesos.v1.scheduler.Event.Rescind'(<<_:64,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Rescind'(Rest,
							  Z1, Z2, F1).


'd_msg_mesos.v1.scheduler.Event.Offers'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Offers'(Bin,
							 0, 0, []).

'dfp_read_field_def_mesos.v1.scheduler.Event.Offers'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F1) ->
    'd_field_mesos.v1.scheduler.Event.Offers_offers'(Rest,
						     Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.scheduler.Event.Offers'(<<>>,
						     0, 0, F1) ->
    #'mesos.v1.scheduler.Event.Offers'{offers =
					   lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.scheduler.Event.Offers'(Other,
						     Z1, Z2, F1) ->
    'dg_read_field_def_mesos.v1.scheduler.Event.Offers'(Other,
							Z1, Z2, F1).

'dg_read_field_def_mesos.v1.scheduler.Event.Offers'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Event.Offers'(Rest,
							N + 7, X bsl N + Acc,
							F1);
'dg_read_field_def_mesos.v1.scheduler.Event.Offers'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Event.Offers_offers'(Rest,
							   0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Event.Offers'(Rest, 0,
							      0, F1);
	    1 ->
		'skip_64_mesos.v1.scheduler.Event.Offers'(Rest, 0, 0,
							  F1);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Event.Offers'(Rest,
									0, 0,
									F1);
	    5 ->
		'skip_32_mesos.v1.scheduler.Event.Offers'(Rest, 0, 0,
							  F1)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Event.Offers'(<<>>,
						    0, 0, F1) ->
    #'mesos.v1.scheduler.Event.Offers'{offers =
					   lists:reverse(F1)}.

'd_field_mesos.v1.scheduler.Event.Offers_offers'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event.Offers_offers'(Rest,
						     N + 7, X bsl N + Acc, F1);
'd_field_mesos.v1.scheduler.Event.Offers_offers'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Offer'),
    'dfp_read_field_def_mesos.v1.scheduler.Event.Offers'(Rest2,
							 0, 0,
							 [NewFValue | F1]).


'skip_varint_mesos.v1.scheduler.Event.Offers'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1) ->
    'skip_varint_mesos.v1.scheduler.Event.Offers'(Rest, Z1,
						  Z2, F1);
'skip_varint_mesos.v1.scheduler.Event.Offers'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Offers'(Rest,
							 Z1, Z2, F1).


'skip_length_delimited_mesos.v1.scheduler.Event.Offers'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Event.Offers'(Rest,
							    N + 7,
							    X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.scheduler.Event.Offers'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Event.Offers'(Rest2,
							 0, 0, F1).


'skip_32_mesos.v1.scheduler.Event.Offers'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Offers'(Rest,
							 Z1, Z2, F1).


'skip_64_mesos.v1.scheduler.Event.Offers'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Offers'(Rest,
							 Z1, Z2, F1).


'd_msg_mesos.v1.scheduler.Event.Subscribed'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Subscribed'(Bin,
							     0, 0, undefined,
							     undefined).

'dfp_read_field_def_mesos.v1.scheduler.Event.Subscribed'(<<10,
							   Rest/binary>>,
							 Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.scheduler.Event.Subscribed_framework_id'(Rest,
							       Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.scheduler.Event.Subscribed'(<<17,
							   Rest/binary>>,
							 Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.scheduler.Event.Subscribed_heartbeat_interval_seconds'(Rest,
									     Z1,
									     Z2,
									     F1,
									     F2);
'dfp_read_field_def_mesos.v1.scheduler.Event.Subscribed'(<<>>,
							 0, 0, F1, F2) ->
    #'mesos.v1.scheduler.Event.Subscribed'{framework_id =
					       F1,
					   heartbeat_interval_seconds = F2};
'dfp_read_field_def_mesos.v1.scheduler.Event.Subscribed'(Other,
							 Z1, Z2, F1, F2) ->
    'dg_read_field_def_mesos.v1.scheduler.Event.Subscribed'(Other,
							    Z1, Z2, F1, F2).

'dg_read_field_def_mesos.v1.scheduler.Event.Subscribed'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Event.Subscribed'(Rest,
							    N + 7,
							    X bsl N + Acc, F1,
							    F2);
'dg_read_field_def_mesos.v1.scheduler.Event.Subscribed'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.scheduler.Event.Subscribed_framework_id'(Rest,
								     0, 0, F1,
								     F2);
      17 ->
	  'd_field_mesos.v1.scheduler.Event.Subscribed_heartbeat_interval_seconds'(Rest,
										   0,
										   0,
										   F1,
										   F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Event.Subscribed'(Rest,
								  0, 0, F1, F2);
	    1 ->
		'skip_64_mesos.v1.scheduler.Event.Subscribed'(Rest, 0,
							      0, F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Event.Subscribed'(Rest,
									    0,
									    0,
									    F1,
									    F2);
	    5 ->
		'skip_32_mesos.v1.scheduler.Event.Subscribed'(Rest, 0,
							      0, F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Event.Subscribed'(<<>>,
							0, 0, F1, F2) ->
    #'mesos.v1.scheduler.Event.Subscribed'{framework_id =
					       F1,
					   heartbeat_interval_seconds = F2}.

'd_field_mesos.v1.scheduler.Event.Subscribed_framework_id'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event.Subscribed_framework_id'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F1, F2);
'd_field_mesos.v1.scheduler.Event.Subscribed_framework_id'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.FrameworkID'),
    'dfp_read_field_def_mesos.v1.scheduler.Event.Subscribed'(Rest2,
							     0, 0,
							     if F1 ==
								  undefined ->
								    NewFValue;
								true ->
								    'merge_msg_mesos.v1.FrameworkID'(F1,
												     NewFValue)
							     end,
							     F2).


'd_field_mesos.v1.scheduler.Event.Subscribed_heartbeat_interval_seconds'(<<Value:64/little-float,
									   Rest/binary>>,
									 Z1, Z2,
									 F1,
									 _) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Subscribed'(Rest,
							     Z1, Z2, F1, Value).


'skip_varint_mesos.v1.scheduler.Event.Subscribed'(<<1:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.scheduler.Event.Subscribed'(Rest,
						      Z1, Z2, F1, F2);
'skip_varint_mesos.v1.scheduler.Event.Subscribed'(<<0:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Subscribed'(Rest,
							     Z1, Z2, F1, F2).


'skip_length_delimited_mesos.v1.scheduler.Event.Subscribed'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Event.Subscribed'(Rest,
								N + 7,
								X bsl N + Acc,
								F1, F2);
'skip_length_delimited_mesos.v1.scheduler.Event.Subscribed'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Event.Subscribed'(Rest2,
							     0, 0, F1, F2).


'skip_32_mesos.v1.scheduler.Event.Subscribed'(<<_:32,
						Rest/binary>>,
					      Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Subscribed'(Rest,
							     Z1, Z2, F1, F2).


'skip_64_mesos.v1.scheduler.Event.Subscribed'(<<_:64,
						Rest/binary>>,
					      Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event.Subscribed'(Rest,
							     Z1, Z2, F1, F2).


'd_msg_mesos.v1.scheduler.Event'(Bin) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event'(Bin, 0, 0,
						  undefined, undefined,
						  undefined, undefined,
						  undefined, undefined,
						  undefined, undefined).

'dfp_read_field_def_mesos.v1.scheduler.Event'(<<8,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, F8) ->
    'd_field_mesos.v1.scheduler.Event_type'(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.scheduler.Event'(<<18,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, F8) ->
    'd_field_mesos.v1.scheduler.Event_subscribed'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8);
'dfp_read_field_def_mesos.v1.scheduler.Event'(<<26,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, F8) ->
    'd_field_mesos.v1.scheduler.Event_offers'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.scheduler.Event'(<<34,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, F8) ->
    'd_field_mesos.v1.scheduler.Event_rescind'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.scheduler.Event'(<<42,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, F8) ->
    'd_field_mesos.v1.scheduler.Event_update'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.scheduler.Event'(<<50,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, F8) ->
    'd_field_mesos.v1.scheduler.Event_message'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.scheduler.Event'(<<58,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, F8) ->
    'd_field_mesos.v1.scheduler.Event_failure'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.scheduler.Event'(<<66,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, F8) ->
    'd_field_mesos.v1.scheduler.Event_error'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8);
'dfp_read_field_def_mesos.v1.scheduler.Event'(<<>>, 0,
					      0, F1, F2, F3, F4, F5, F6, F7,
					      F8) ->
    #'mesos.v1.scheduler.Event'{type = F1, subscribed = F2,
				offers = F3, rescind = F4, update = F5,
				message = F6, failure = F7, error = F8};
'dfp_read_field_def_mesos.v1.scheduler.Event'(Other, Z1,
					      Z2, F1, F2, F3, F4, F5, F6, F7,
					      F8) ->
    'dg_read_field_def_mesos.v1.scheduler.Event'(Other, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8).

'dg_read_field_def_mesos.v1.scheduler.Event'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.scheduler.Event'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8);
'dg_read_field_def_mesos.v1.scheduler.Event'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_mesos.v1.scheduler.Event_type'(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8);
      18 ->
	  'd_field_mesos.v1.scheduler.Event_subscribed'(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7, F8);
      26 ->
	  'd_field_mesos.v1.scheduler.Event_offers'(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8);
      34 ->
	  'd_field_mesos.v1.scheduler.Event_rescind'(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8);
      42 ->
	  'd_field_mesos.v1.scheduler.Event_update'(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8);
      50 ->
	  'd_field_mesos.v1.scheduler.Event_message'(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8);
      58 ->
	  'd_field_mesos.v1.scheduler.Event_failure'(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8);
      66 ->
	  'd_field_mesos.v1.scheduler.Event_error'(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.scheduler.Event'(Rest, 0, 0, F1,
						       F2, F3, F4, F5, F6, F7,
						       F8);
	    1 ->
		'skip_64_mesos.v1.scheduler.Event'(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7, F8);
	    2 ->
		'skip_length_delimited_mesos.v1.scheduler.Event'(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5, F6,
								 F7, F8);
	    5 ->
		'skip_32_mesos.v1.scheduler.Event'(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7, F8)
	  end
    end;
'dg_read_field_def_mesos.v1.scheduler.Event'(<<>>, 0, 0,
					     F1, F2, F3, F4, F5, F6, F7, F8) ->
    #'mesos.v1.scheduler.Event'{type = F1, subscribed = F2,
				offers = F3, rescind = F4, update = F5,
				message = F6, failure = F7, error = F8}.

'd_field_mesos.v1.scheduler.Event_type'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event_type'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8);
'd_field_mesos.v1.scheduler.Event_type'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F2, F3, F4, F5, F6, F7,
					F8) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_mesos.v1.scheduler.Event.Type'(Tmp),
    'dfp_read_field_def_mesos.v1.scheduler.Event'(Rest, 0,
						  0, NewFValue, F2, F3, F4, F5,
						  F6, F7, F8).


'd_field_mesos.v1.scheduler.Event_subscribed'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event_subscribed'(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7, F8);
'd_field_mesos.v1.scheduler.Event_subscribed'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Event.Subscribed'),
    'dfp_read_field_def_mesos.v1.scheduler.Event'(Rest2, 0,
						  0, F1,
						  if F2 == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_mesos.v1.scheduler.Event.Subscribed'(F2,
													 NewFValue)
						  end,
						  F3, F4, F5, F6, F7, F8).


'd_field_mesos.v1.scheduler.Event_offers'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event_offers'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8);
'd_field_mesos.v1.scheduler.Event_offers'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Event.Offers'),
    'dfp_read_field_def_mesos.v1.scheduler.Event'(Rest2, 0,
						  0, F1, F2,
						  if F3 == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_mesos.v1.scheduler.Event.Offers'(F3,
												     NewFValue)
						  end,
						  F4, F5, F6, F7, F8).


'd_field_mesos.v1.scheduler.Event_rescind'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event_rescind'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8);
'd_field_mesos.v1.scheduler.Event_rescind'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Event.Rescind'),
    'dfp_read_field_def_mesos.v1.scheduler.Event'(Rest2, 0,
						  0, F1, F2, F3,
						  if F4 == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_mesos.v1.scheduler.Event.Rescind'(F4,
												      NewFValue)
						  end,
						  F5, F6, F7, F8).


'd_field_mesos.v1.scheduler.Event_update'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event_update'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8);
'd_field_mesos.v1.scheduler.Event_update'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Event.Update'),
    'dfp_read_field_def_mesos.v1.scheduler.Event'(Rest2, 0,
						  0, F1, F2, F3, F4,
						  if F5 == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_mesos.v1.scheduler.Event.Update'(F5,
												     NewFValue)
						  end,
						  F6, F7, F8).


'd_field_mesos.v1.scheduler.Event_message'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event_message'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8);
'd_field_mesos.v1.scheduler.Event_message'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Event.Message'),
    'dfp_read_field_def_mesos.v1.scheduler.Event'(Rest2, 0,
						  0, F1, F2, F3, F4, F5,
						  if F6 == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_mesos.v1.scheduler.Event.Message'(F6,
												      NewFValue)
						  end,
						  F7, F8).


'd_field_mesos.v1.scheduler.Event_failure'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event_failure'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8);
'd_field_mesos.v1.scheduler.Event_failure'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Event.Failure'),
    'dfp_read_field_def_mesos.v1.scheduler.Event'(Rest2, 0,
						  0, F1, F2, F3, F4, F5, F6,
						  if F7 == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_mesos.v1.scheduler.Event.Failure'(F7,
												      NewFValue)
						  end,
						  F8).


'd_field_mesos.v1.scheduler.Event_error'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    'd_field_mesos.v1.scheduler.Event_error'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8);
'd_field_mesos.v1.scheduler.Event_error'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7,
					 F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.scheduler.Event.Error'),
    'dfp_read_field_def_mesos.v1.scheduler.Event'(Rest2, 0,
						  0, F1, F2, F3, F4, F5, F6, F7,
						  if F8 == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_mesos.v1.scheduler.Event.Error'(F8,
												    NewFValue)
						  end).


'skip_varint_mesos.v1.scheduler.Event'(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       F8) ->
    'skip_varint_mesos.v1.scheduler.Event'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8);
'skip_varint_mesos.v1.scheduler.Event'(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       F8) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8).


'skip_length_delimited_mesos.v1.scheduler.Event'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.scheduler.Event'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7,
						     F8);
'skip_length_delimited_mesos.v1.scheduler.Event'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.scheduler.Event'(Rest2, 0,
						  0, F1, F2, F3, F4, F5, F6, F7,
						  F8).


'skip_32_mesos.v1.scheduler.Event'(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8).


'skip_64_mesos.v1.scheduler.Event'(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    'dfp_read_field_def_mesos.v1.scheduler.Event'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8).


'd_msg_mesos.v1.TrafficControlStatistics'(Bin) ->
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Bin,
							   0, 0, undefined,
							   undefined, undefined,
							   undefined, undefined,
							   undefined, undefined,
							   undefined, undefined,
							   undefined).

'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(<<10,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9,
						       F10) ->
    'd_field_mesos.v1.TrafficControlStatistics_id'(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10);
'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(<<16,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9,
						       F10) ->
    'd_field_mesos.v1.TrafficControlStatistics_backlog'(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7, F8, F9,
							F10);
'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(<<24,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9,
						       F10) ->
    'd_field_mesos.v1.TrafficControlStatistics_bytes'(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10);
'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(<<32,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9,
						       F10) ->
    'd_field_mesos.v1.TrafficControlStatistics_drops'(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10);
'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(<<40,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9,
						       F10) ->
    'd_field_mesos.v1.TrafficControlStatistics_overlimits'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6, F7, F8,
							   F9, F10);
'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(<<48,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9,
						       F10) ->
    'd_field_mesos.v1.TrafficControlStatistics_packets'(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7, F8, F9,
							F10);
'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(<<56,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9,
						       F10) ->
    'd_field_mesos.v1.TrafficControlStatistics_qlen'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10);
'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(<<64,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9,
						       F10) ->
    'd_field_mesos.v1.TrafficControlStatistics_ratebps'(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7, F8, F9,
							F10);
'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(<<72,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9,
						       F10) ->
    'd_field_mesos.v1.TrafficControlStatistics_ratepps'(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7, F8, F9,
							F10);
'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(<<80,
							 Rest/binary>>,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9,
						       F10) ->
    'd_field_mesos.v1.TrafficControlStatistics_requeues'(Rest,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10);
'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(<<>>,
						       0, 0, F1, F2, F3, F4, F5,
						       F6, F7, F8, F9, F10) ->
    #'mesos.v1.TrafficControlStatistics'{id = F1,
					 backlog = F2, bytes = F3, drops = F4,
					 overlimits = F5, packets = F6,
					 qlen = F7, ratebps = F8, ratepps = F9,
					 requeues = F10};
'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Other,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9,
						       F10) ->
    'dg_read_field_def_mesos.v1.TrafficControlStatistics'(Other,
							  Z1, Z2, F1, F2, F3,
							  F4, F5, F6, F7, F8,
							  F9, F10).

'dg_read_field_def_mesos.v1.TrafficControlStatistics'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.TrafficControlStatistics'(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10);
'dg_read_field_def_mesos.v1.TrafficControlStatistics'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9,
						      F10) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.TrafficControlStatistics_id'(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10);
      16 ->
	  'd_field_mesos.v1.TrafficControlStatistics_backlog'(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7,
							      F8, F9, F10);
      24 ->
	  'd_field_mesos.v1.TrafficControlStatistics_bytes'(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10);
      32 ->
	  'd_field_mesos.v1.TrafficControlStatistics_drops'(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10);
      40 ->
	  'd_field_mesos.v1.TrafficControlStatistics_overlimits'(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5, F6,
								 F7, F8, F9,
								 F10);
      48 ->
	  'd_field_mesos.v1.TrafficControlStatistics_packets'(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7,
							      F8, F9, F10);
      56 ->
	  'd_field_mesos.v1.TrafficControlStatistics_qlen'(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10);
      64 ->
	  'd_field_mesos.v1.TrafficControlStatistics_ratebps'(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7,
							      F8, F9, F10);
      72 ->
	  'd_field_mesos.v1.TrafficControlStatistics_ratepps'(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7,
							      F8, F9, F10);
      80 ->
	  'd_field_mesos.v1.TrafficControlStatistics_requeues'(Rest,
							       0, 0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.TrafficControlStatistics'(Rest, 0,
								0, F1, F2, F3,
								F4, F5, F6, F7,
								F8, F9, F10);
	    1 ->
		'skip_64_mesos.v1.TrafficControlStatistics'(Rest, 0, 0,
							    F1, F2, F3, F4, F5,
							    F6, F7, F8, F9,
							    F10);
	    2 ->
		'skip_length_delimited_mesos.v1.TrafficControlStatistics'(Rest,
									  0, 0,
									  F1,
									  F2,
									  F3,
									  F4,
									  F5,
									  F6,
									  F7,
									  F8,
									  F9,
									  F10);
	    5 ->
		'skip_32_mesos.v1.TrafficControlStatistics'(Rest, 0, 0,
							    F1, F2, F3, F4, F5,
							    F6, F7, F8, F9, F10)
	  end
    end;
'dg_read_field_def_mesos.v1.TrafficControlStatistics'(<<>>,
						      0, 0, F1, F2, F3, F4, F5,
						      F6, F7, F8, F9, F10) ->
    #'mesos.v1.TrafficControlStatistics'{id = F1,
					 backlog = F2, bytes = F3, drops = F4,
					 overlimits = F5, packets = F6,
					 qlen = F7, ratebps = F8, ratepps = F9,
					 requeues = F10}.

'd_field_mesos.v1.TrafficControlStatistics_id'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.TrafficControlStatistics_id'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10);
'd_field_mesos.v1.TrafficControlStatistics_id'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, _, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Rest2,
							   0, 0, NewFValue, F2,
							   F3, F4, F5, F6, F7,
							   F8, F9, F10).


'd_field_mesos.v1.TrafficControlStatistics_backlog'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.TrafficControlStatistics_backlog'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7, F8, F9, F10);
'd_field_mesos.v1.TrafficControlStatistics_backlog'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, _, F3, F4, F5,
						    F6, F7, F8, F9, F10) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Rest,
							   0, 0, F1, NewFValue,
							   F3, F4, F5, F6, F7,
							   F8, F9, F10).


'd_field_mesos.v1.TrafficControlStatistics_bytes'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.TrafficControlStatistics_bytes'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10);
'd_field_mesos.v1.TrafficControlStatistics_bytes'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, _, F4, F5, F6,
						  F7, F8, F9, F10) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Rest,
							   0, 0, F1, F2,
							   NewFValue, F4, F5,
							   F6, F7, F8, F9, F10).


'd_field_mesos.v1.TrafficControlStatistics_drops'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.TrafficControlStatistics_drops'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10);
'd_field_mesos.v1.TrafficControlStatistics_drops'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, _, F5, F6,
						  F7, F8, F9, F10) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Rest,
							   0, 0, F1, F2, F3,
							   NewFValue, F5, F6,
							   F7, F8, F9, F10).


'd_field_mesos.v1.TrafficControlStatistics_overlimits'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.TrafficControlStatistics_overlimits'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3, F4, F5,
							   F6, F7, F8, F9, F10);
'd_field_mesos.v1.TrafficControlStatistics_overlimits'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       _, F6, F7, F8, F9,
						       F10) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Rest,
							   0, 0, F1, F2, F3, F4,
							   NewFValue, F6, F7,
							   F8, F9, F10).


'd_field_mesos.v1.TrafficControlStatistics_packets'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.TrafficControlStatistics_packets'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7, F8, F9, F10);
'd_field_mesos.v1.TrafficControlStatistics_packets'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    _, F7, F8, F9, F10) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, NewFValue, F7,
							   F8, F9, F10).


'd_field_mesos.v1.TrafficControlStatistics_qlen'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.TrafficControlStatistics_qlen'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7, F8,
						     F9, F10);
'd_field_mesos.v1.TrafficControlStatistics_qlen'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 _, F8, F9, F10) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, NewFValue,
							   F8, F9, F10).


'd_field_mesos.v1.TrafficControlStatistics_ratebps'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.TrafficControlStatistics_ratebps'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7, F8, F9, F10);
'd_field_mesos.v1.TrafficControlStatistics_ratebps'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, _, F9, F10) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7,
							   NewFValue, F9, F10).


'd_field_mesos.v1.TrafficControlStatistics_ratepps'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.TrafficControlStatistics_ratepps'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7, F8, F9, F10);
'd_field_mesos.v1.TrafficControlStatistics_ratepps'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, _, F10) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8,
							   NewFValue, F10).


'd_field_mesos.v1.TrafficControlStatistics_requeues'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10)
    when N < 57 ->
    'd_field_mesos.v1.TrafficControlStatistics_requeues'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3, F4, F5, F6,
							 F7, F8, F9, F10);
'd_field_mesos.v1.TrafficControlStatistics_requeues'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, _) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   NewFValue).


'skip_varint_mesos.v1.TrafficControlStatistics'(<<1:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10) ->
    'skip_varint_mesos.v1.TrafficControlStatistics'(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10);
'skip_varint_mesos.v1.TrafficControlStatistics'(<<0:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10) ->
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6, F7, F8,
							   F9, F10).


'skip_length_delimited_mesos.v1.TrafficControlStatistics'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2, F3,
							  F4, F5, F6, F7, F8,
							  F9, F10)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.TrafficControlStatistics'(Rest,
							      N + 7,
							      X bsl N + Acc, F1,
							      F2, F3, F4, F5,
							      F6, F7, F8, F9,
							      F10);
'skip_length_delimited_mesos.v1.TrafficControlStatistics'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2, F3,
							  F4, F5, F6, F7, F8,
							  F9, F10) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Rest2,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10).


'skip_32_mesos.v1.TrafficControlStatistics'(<<_:32,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6, F7, F8,
							   F9, F10).


'skip_64_mesos.v1.TrafficControlStatistics'(<<_:64,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    'dfp_read_field_def_mesos.v1.TrafficControlStatistics'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6, F7, F8,
							   F9, F10).


'd_msg_mesos.v1.PerfStatistics'(Bin) ->
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Bin, 0, 0,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined, undefined,
						 undefined).

'dfp_read_field_def_mesos.v1.PerfStatistics'(<<9,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_timestamp'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16, F17, F18, F19, F20,
						F21, F22, F23, F24, F25, F26,
						F27, F28, F29, F30, F31, F32,
						F33, F34, F35, F36, F37, F38,
						F39, F40, F41, F42, F43, F44,
						F45, F46, F47, F48, F49, F50,
						F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<17,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_duration'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12, F13, F14, F15,
					       F16, F17, F18, F19, F20, F21,
					       F22, F23, F24, F25, F26, F27,
					       F28, F29, F30, F31, F32, F33,
					       F34, F35, F36, F37, F38, F39,
					       F40, F41, F42, F43, F44, F45,
					       F46, F47, F48, F49, F50, F51,
					       F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<24,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_cycles'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16,
					     F17, F18, F19, F20, F21, F22, F23,
					     F24, F25, F26, F27, F28, F29, F30,
					     F31, F32, F33, F34, F35, F36, F37,
					     F38, F39, F40, F41, F42, F43, F44,
					     F45, F46, F47, F48, F49, F50, F51,
					     F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<32,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_stalled_cycles_frontend'(Rest,
							      Z1, Z2, F1, F2,
							      F3, F4, F5, F6,
							      F7, F8, F9, F10,
							      F11, F12, F13,
							      F14, F15, F16,
							      F17, F18, F19,
							      F20, F21, F22,
							      F23, F24, F25,
							      F26, F27, F28,
							      F29, F30, F31,
							      F32, F33, F34,
							      F35, F36, F37,
							      F38, F39, F40,
							      F41, F42, F43,
							      F44, F45, F46,
							      F47, F48, F49,
							      F50, F51, F52,
							      F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<40,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_stalled_cycles_backend'(Rest,
							     Z1, Z2, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39, F40,
							     F41, F42, F43, F44,
							     F45, F46, F47, F48,
							     F49, F50, F51, F52,
							     F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<48,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_instructions'(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, F11, F12,
						   F13, F14, F15, F16, F17, F18,
						   F19, F20, F21, F22, F23, F24,
						   F25, F26, F27, F28, F29, F30,
						   F31, F32, F33, F34, F35, F36,
						   F37, F38, F39, F40, F41, F42,
						   F43, F44, F45, F46, F47, F48,
						   F49, F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<56,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_cache_references'(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<64,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_cache_misses'(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, F11, F12,
						   F13, F14, F15, F16, F17, F18,
						   F19, F20, F21, F22, F23, F24,
						   F25, F26, F27, F28, F29, F30,
						   F31, F32, F33, F34, F35, F36,
						   F37, F38, F39, F40, F41, F42,
						   F43, F44, F45, F46, F47, F48,
						   F49, F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<72,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_branches'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12, F13, F14, F15,
					       F16, F17, F18, F19, F20, F21,
					       F22, F23, F24, F25, F26, F27,
					       F28, F29, F30, F31, F32, F33,
					       F34, F35, F36, F37, F38, F39,
					       F40, F41, F42, F43, F44, F45,
					       F46, F47, F48, F49, F50, F51,
					       F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<80,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_branch_misses'(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40, F41,
						    F42, F43, F44, F45, F46,
						    F47, F48, F49, F50, F51,
						    F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<88,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_bus_cycles'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<96,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_ref_cycles'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<105,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_cpu_clock'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16, F17, F18, F19, F20,
						F21, F22, F23, F24, F25, F26,
						F27, F28, F29, F30, F31, F32,
						F33, F34, F35, F36, F37, F38,
						F39, F40, F41, F42, F43, F44,
						F45, F46, F47, F48, F49, F50,
						F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<113,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_task_clock'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<120,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_page_faults'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40, F41, F42,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<128, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_minor_faults'(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, F11, F12,
						   F13, F14, F15, F16, F17, F18,
						   F19, F20, F21, F22, F23, F24,
						   F25, F26, F27, F28, F29, F30,
						   F31, F32, F33, F34, F35, F36,
						   F37, F38, F39, F40, F41, F42,
						   F43, F44, F45, F46, F47, F48,
						   F49, F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<136, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_major_faults'(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, F11, F12,
						   F13, F14, F15, F16, F17, F18,
						   F19, F20, F21, F22, F23, F24,
						   F25, F26, F27, F28, F29, F30,
						   F31, F32, F33, F34, F35, F36,
						   F37, F38, F39, F40, F41, F42,
						   F43, F44, F45, F46, F47, F48,
						   F49, F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<144, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_context_switches'(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<152, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_cpu_migrations'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40, F41,
						     F42, F43, F44, F45, F46,
						     F47, F48, F49, F50, F51,
						     F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<160, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_alignment_faults'(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<168, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_emulation_faults'(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<176, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_l1_dcache_loads'(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39, F40,
						      F41, F42, F43, F44, F45,
						      F46, F47, F48, F49, F50,
						      F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<184, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_l1_dcache_load_misses'(Rest,
							    Z1, Z2, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39, F40,
							    F41, F42, F43, F44,
							    F45, F46, F47, F48,
							    F49, F50, F51, F52,
							    F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<192, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_l1_dcache_stores'(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<200, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_l1_dcache_store_misses'(Rest,
							     Z1, Z2, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39, F40,
							     F41, F42, F43, F44,
							     F45, F46, F47, F48,
							     F49, F50, F51, F52,
							     F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<208, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_l1_dcache_prefetches'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6, F7, F8,
							   F9, F10, F11, F12,
							   F13, F14, F15, F16,
							   F17, F18, F19, F20,
							   F21, F22, F23, F24,
							   F25, F26, F27, F28,
							   F29, F30, F31, F32,
							   F33, F34, F35, F36,
							   F37, F38, F39, F40,
							   F41, F42, F43, F44,
							   F45, F46, F47, F48,
							   F49, F50, F51, F52,
							   F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<216, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_l1_dcache_prefetch_misses'(Rest,
								Z1, Z2, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, F36, F37,
								F38, F39, F40,
								F41, F42, F43,
								F44, F45, F46,
								F47, F48, F49,
								F50, F51, F52,
								F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<224, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_l1_icache_loads'(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39, F40,
						      F41, F42, F43, F44, F45,
						      F46, F47, F48, F49, F50,
						      F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<232, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_l1_icache_load_misses'(Rest,
							    Z1, Z2, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39, F40,
							    F41, F42, F43, F44,
							    F45, F46, F47, F48,
							    F49, F50, F51, F52,
							    F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<240, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_l1_icache_prefetches'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6, F7, F8,
							   F9, F10, F11, F12,
							   F13, F14, F15, F16,
							   F17, F18, F19, F20,
							   F21, F22, F23, F24,
							   F25, F26, F27, F28,
							   F29, F30, F31, F32,
							   F33, F34, F35, F36,
							   F37, F38, F39, F40,
							   F41, F42, F43, F44,
							   F45, F46, F47, F48,
							   F49, F50, F51, F52,
							   F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<248, 1,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_l1_icache_prefetch_misses'(Rest,
								Z1, Z2, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, F36, F37,
								F38, F39, F40,
								F41, F42, F43,
								F44, F45, F46,
								F47, F48, F49,
								F50, F51, F52,
								F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<128, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_llc_loads'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16, F17, F18, F19, F20,
						F21, F22, F23, F24, F25, F26,
						F27, F28, F29, F30, F31, F32,
						F33, F34, F35, F36, F37, F38,
						F39, F40, F41, F42, F43, F44,
						F45, F46, F47, F48, F49, F50,
						F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<136, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_llc_load_misses'(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39, F40,
						      F41, F42, F43, F44, F45,
						      F46, F47, F48, F49, F50,
						      F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<144, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_llc_stores'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<152, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_llc_store_misses'(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<160, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_llc_prefetches'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40, F41,
						     F42, F43, F44, F45, F46,
						     F47, F48, F49, F50, F51,
						     F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<168, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_llc_prefetch_misses'(Rest,
							  Z1, Z2, F1, F2, F3,
							  F4, F5, F6, F7, F8,
							  F9, F10, F11, F12,
							  F13, F14, F15, F16,
							  F17, F18, F19, F20,
							  F21, F22, F23, F24,
							  F25, F26, F27, F28,
							  F29, F30, F31, F32,
							  F33, F34, F35, F36,
							  F37, F38, F39, F40,
							  F41, F42, F43, F44,
							  F45, F46, F47, F48,
							  F49, F50, F51, F52,
							  F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<176, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_dtlb_loads'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<184, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_dtlb_load_misses'(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<192, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_dtlb_stores'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40, F41, F42,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<200, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_dtlb_store_misses'(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39, F40,
							F41, F42, F43, F44, F45,
							F46, F47, F48, F49, F50,
							F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<208, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_dtlb_prefetches'(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39, F40,
						      F41, F42, F43, F44, F45,
						      F46, F47, F48, F49, F50,
						      F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<216, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_dtlb_prefetch_misses'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6, F7, F8,
							   F9, F10, F11, F12,
							   F13, F14, F15, F16,
							   F17, F18, F19, F20,
							   F21, F22, F23, F24,
							   F25, F26, F27, F28,
							   F29, F30, F31, F32,
							   F33, F34, F35, F36,
							   F37, F38, F39, F40,
							   F41, F42, F43, F44,
							   F45, F46, F47, F48,
							   F49, F50, F51, F52,
							   F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<224, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_itlb_loads'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<232, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_itlb_load_misses'(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<240, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_branch_loads'(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, F11, F12,
						   F13, F14, F15, F16, F17, F18,
						   F19, F20, F21, F22, F23, F24,
						   F25, F26, F27, F28, F29, F30,
						   F31, F32, F33, F34, F35, F36,
						   F37, F38, F39, F40, F41, F42,
						   F43, F44, F45, F46, F47, F48,
						   F49, F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<248, 2,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_branch_load_misses'(Rest,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40, F41,
							 F42, F43, F44, F45,
							 F46, F47, F48, F49,
							 F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<128, 3,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_node_loads'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<136, 3,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_node_load_misses'(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<144, 3,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_node_stores'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40, F41, F42,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<152, 3,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_node_store_misses'(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39, F40,
							F41, F42, F43, F44, F45,
							F46, F47, F48, F49, F50,
							F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<160, 3,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_node_prefetches'(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39, F40,
						      F41, F42, F43, F44, F45,
						      F46, F47, F48, F49, F50,
						      F51, F52, F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<168, 3,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    'd_field_mesos.v1.PerfStatistics_node_prefetch_misses'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6, F7, F8,
							   F9, F10, F11, F12,
							   F13, F14, F15, F16,
							   F17, F18, F19, F20,
							   F21, F22, F23, F24,
							   F25, F26, F27, F28,
							   F29, F30, F31, F32,
							   F33, F34, F35, F36,
							   F37, F38, F39, F40,
							   F41, F42, F43, F44,
							   F45, F46, F47, F48,
							   F49, F50, F51, F52,
							   F53);
'dfp_read_field_def_mesos.v1.PerfStatistics'(<<>>, 0, 0,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16,
					     F17, F18, F19, F20, F21, F22, F23,
					     F24, F25, F26, F27, F28, F29, F30,
					     F31, F32, F33, F34, F35, F36, F37,
					     F38, F39, F40, F41, F42, F43, F44,
					     F45, F46, F47, F48, F49, F50, F51,
					     F52, F53) ->
    #'mesos.v1.PerfStatistics'{timestamp = F1,
			       duration = F2, cycles = F3,
			       stalled_cycles_frontend = F4,
			       stalled_cycles_backend = F5, instructions = F6,
			       cache_references = F7, cache_misses = F8,
			       branches = F9, branch_misses = F10,
			       bus_cycles = F11, ref_cycles = F12,
			       cpu_clock = F13, task_clock = F14,
			       page_faults = F15, minor_faults = F16,
			       major_faults = F17, context_switches = F18,
			       cpu_migrations = F19, alignment_faults = F20,
			       emulation_faults = F21, l1_dcache_loads = F22,
			       l1_dcache_load_misses = F23,
			       l1_dcache_stores = F24,
			       l1_dcache_store_misses = F25,
			       l1_dcache_prefetches = F26,
			       l1_dcache_prefetch_misses = F27,
			       l1_icache_loads = F28,
			       l1_icache_load_misses = F29,
			       l1_icache_prefetches = F30,
			       l1_icache_prefetch_misses = F31, llc_loads = F32,
			       llc_load_misses = F33, llc_stores = F34,
			       llc_store_misses = F35, llc_prefetches = F36,
			       llc_prefetch_misses = F37, dtlb_loads = F38,
			       dtlb_load_misses = F39, dtlb_stores = F40,
			       dtlb_store_misses = F41, dtlb_prefetches = F42,
			       dtlb_prefetch_misses = F43, itlb_loads = F44,
			       itlb_load_misses = F45, branch_loads = F46,
			       branch_load_misses = F47, node_loads = F48,
			       node_load_misses = F49, node_stores = F50,
			       node_store_misses = F51, node_prefetches = F52,
			       node_prefetch_misses = F53};
'dfp_read_field_def_mesos.v1.PerfStatistics'(Other, Z1,
					     Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					     F9, F10, F11, F12, F13, F14, F15,
					     F16, F17, F18, F19, F20, F21, F22,
					     F23, F24, F25, F26, F27, F28, F29,
					     F30, F31, F32, F33, F34, F35, F36,
					     F37, F38, F39, F40, F41, F42, F43,
					     F44, F45, F46, F47, F48, F49, F50,
					     F51, F52, F53) ->
    'dg_read_field_def_mesos.v1.PerfStatistics'(Other, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16, F17, F18, F19, F20,
						F21, F22, F23, F24, F25, F26,
						F27, F28, F29, F30, F31, F32,
						F33, F34, F35, F36, F37, F38,
						F39, F40, F41, F42, F43, F44,
						F45, F46, F47, F48, F49, F50,
						F51, F52, F53).

'dg_read_field_def_mesos.v1.PerfStatistics'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26, F27, F28,
					    F29, F30, F31, F32, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41, F42,
					    F43, F44, F45, F46, F47, F48, F49,
					    F50, F51, F52, F53)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.PerfStatistics'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12, F13, F14, F15, F16, F17,
						F18, F19, F20, F21, F22, F23,
						F24, F25, F26, F27, F28, F29,
						F30, F31, F32, F33, F34, F35,
						F36, F37, F38, F39, F40, F41,
						F42, F43, F44, F45, F46, F47,
						F48, F49, F50, F51, F52, F53);
'dg_read_field_def_mesos.v1.PerfStatistics'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26, F27, F28,
					    F29, F30, F31, F32, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41, F42,
					    F43, F44, F45, F46, F47, F48, F49,
					    F50, F51, F52, F53) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  'd_field_mesos.v1.PerfStatistics_timestamp'(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40, F41, F42,
						      F43, F44, F45, F46, F47,
						      F48, F49, F50, F51, F52,
						      F53);
      17 ->
	  'd_field_mesos.v1.PerfStatistics_duration'(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42, F43,
						     F44, F45, F46, F47, F48,
						     F49, F50, F51, F52, F53);
      24 ->
	  'd_field_mesos.v1.PerfStatistics_cycles'(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12, F13, F14,
						   F15, F16, F17, F18, F19, F20,
						   F21, F22, F23, F24, F25, F26,
						   F27, F28, F29, F30, F31, F32,
						   F33, F34, F35, F36, F37, F38,
						   F39, F40, F41, F42, F43, F44,
						   F45, F46, F47, F48, F49, F50,
						   F51, F52, F53);
      32 ->
	  'd_field_mesos.v1.PerfStatistics_stalled_cycles_frontend'(Rest,
								    0, 0, F1,
								    F2, F3, F4,
								    F5, F6, F7,
								    F8, F9, F10,
								    F11, F12,
								    F13, F14,
								    F15, F16,
								    F17, F18,
								    F19, F20,
								    F21, F22,
								    F23, F24,
								    F25, F26,
								    F27, F28,
								    F29, F30,
								    F31, F32,
								    F33, F34,
								    F35, F36,
								    F37, F38,
								    F39, F40,
								    F41, F42,
								    F43, F44,
								    F45, F46,
								    F47, F48,
								    F49, F50,
								    F51, F52,
								    F53);
      40 ->
	  'd_field_mesos.v1.PerfStatistics_stalled_cycles_backend'(Rest,
								   0, 0, F1, F2,
								   F3, F4, F5,
								   F6, F7, F8,
								   F9, F10, F11,
								   F12, F13,
								   F14, F15,
								   F16, F17,
								   F18, F19,
								   F20, F21,
								   F22, F23,
								   F24, F25,
								   F26, F27,
								   F28, F29,
								   F30, F31,
								   F32, F33,
								   F34, F35,
								   F36, F37,
								   F38, F39,
								   F40, F41,
								   F42, F43,
								   F44, F45,
								   F46, F47,
								   F48, F49,
								   F50, F51,
								   F52, F53);
      48 ->
	  'd_field_mesos.v1.PerfStatistics_instructions'(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 F11, F12, F13, F14,
							 F15, F16, F17, F18,
							 F19, F20, F21, F22,
							 F23, F24, F25, F26,
							 F27, F28, F29, F30,
							 F31, F32, F33, F34,
							 F35, F36, F37, F38,
							 F39, F40, F41, F42,
							 F43, F44, F45, F46,
							 F47, F48, F49, F50,
							 F51, F52, F53);
      56 ->
	  'd_field_mesos.v1.PerfStatistics_cache_references'(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39, F40,
							     F41, F42, F43, F44,
							     F45, F46, F47, F48,
							     F49, F50, F51, F52,
							     F53);
      64 ->
	  'd_field_mesos.v1.PerfStatistics_cache_misses'(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 F11, F12, F13, F14,
							 F15, F16, F17, F18,
							 F19, F20, F21, F22,
							 F23, F24, F25, F26,
							 F27, F28, F29, F30,
							 F31, F32, F33, F34,
							 F35, F36, F37, F38,
							 F39, F40, F41, F42,
							 F43, F44, F45, F46,
							 F47, F48, F49, F50,
							 F51, F52, F53);
      72 ->
	  'd_field_mesos.v1.PerfStatistics_branches'(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42, F43,
						     F44, F45, F46, F47, F48,
						     F49, F50, F51, F52, F53);
      80 ->
	  'd_field_mesos.v1.PerfStatistics_branch_misses'(Rest, 0,
							  0, F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16, F17, F18,
							  F19, F20, F21, F22,
							  F23, F24, F25, F26,
							  F27, F28, F29, F30,
							  F31, F32, F33, F34,
							  F35, F36, F37, F38,
							  F39, F40, F41, F42,
							  F43, F44, F45, F46,
							  F47, F48, F49, F50,
							  F51, F52, F53);
      88 ->
	  'd_field_mesos.v1.PerfStatistics_bus_cycles'(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, F13, F14, F15, F16,
						       F17, F18, F19, F20, F21,
						       F22, F23, F24, F25, F26,
						       F27, F28, F29, F30, F31,
						       F32, F33, F34, F35, F36,
						       F37, F38, F39, F40, F41,
						       F42, F43, F44, F45, F46,
						       F47, F48, F49, F50, F51,
						       F52, F53);
      96 ->
	  'd_field_mesos.v1.PerfStatistics_ref_cycles'(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, F13, F14, F15, F16,
						       F17, F18, F19, F20, F21,
						       F22, F23, F24, F25, F26,
						       F27, F28, F29, F30, F31,
						       F32, F33, F34, F35, F36,
						       F37, F38, F39, F40, F41,
						       F42, F43, F44, F45, F46,
						       F47, F48, F49, F50, F51,
						       F52, F53);
      105 ->
	  'd_field_mesos.v1.PerfStatistics_cpu_clock'(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40, F41, F42,
						      F43, F44, F45, F46, F47,
						      F48, F49, F50, F51, F52,
						      F53);
      113 ->
	  'd_field_mesos.v1.PerfStatistics_task_clock'(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, F13, F14, F15, F16,
						       F17, F18, F19, F20, F21,
						       F22, F23, F24, F25, F26,
						       F27, F28, F29, F30, F31,
						       F32, F33, F34, F35, F36,
						       F37, F38, F39, F40, F41,
						       F42, F43, F44, F45, F46,
						       F47, F48, F49, F50, F51,
						       F52, F53);
      120 ->
	  'd_field_mesos.v1.PerfStatistics_page_faults'(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39, F40,
							F41, F42, F43, F44, F45,
							F46, F47, F48, F49, F50,
							F51, F52, F53);
      128 ->
	  'd_field_mesos.v1.PerfStatistics_minor_faults'(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 F11, F12, F13, F14,
							 F15, F16, F17, F18,
							 F19, F20, F21, F22,
							 F23, F24, F25, F26,
							 F27, F28, F29, F30,
							 F31, F32, F33, F34,
							 F35, F36, F37, F38,
							 F39, F40, F41, F42,
							 F43, F44, F45, F46,
							 F47, F48, F49, F50,
							 F51, F52, F53);
      136 ->
	  'd_field_mesos.v1.PerfStatistics_major_faults'(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 F11, F12, F13, F14,
							 F15, F16, F17, F18,
							 F19, F20, F21, F22,
							 F23, F24, F25, F26,
							 F27, F28, F29, F30,
							 F31, F32, F33, F34,
							 F35, F36, F37, F38,
							 F39, F40, F41, F42,
							 F43, F44, F45, F46,
							 F47, F48, F49, F50,
							 F51, F52, F53);
      144 ->
	  'd_field_mesos.v1.PerfStatistics_context_switches'(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39, F40,
							     F41, F42, F43, F44,
							     F45, F46, F47, F48,
							     F49, F50, F51, F52,
							     F53);
      152 ->
	  'd_field_mesos.v1.PerfStatistics_cpu_migrations'(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10, F11, F12, F13,
							   F14, F15, F16, F17,
							   F18, F19, F20, F21,
							   F22, F23, F24, F25,
							   F26, F27, F28, F29,
							   F30, F31, F32, F33,
							   F34, F35, F36, F37,
							   F38, F39, F40, F41,
							   F42, F43, F44, F45,
							   F46, F47, F48, F49,
							   F50, F51, F52, F53);
      160 ->
	  'd_field_mesos.v1.PerfStatistics_alignment_faults'(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39, F40,
							     F41, F42, F43, F44,
							     F45, F46, F47, F48,
							     F49, F50, F51, F52,
							     F53);
      168 ->
	  'd_field_mesos.v1.PerfStatistics_emulation_faults'(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39, F40,
							     F41, F42, F43, F44,
							     F45, F46, F47, F48,
							     F49, F50, F51, F52,
							     F53);
      176 ->
	  'd_field_mesos.v1.PerfStatistics_l1_dcache_loads'(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39, F40,
							    F41, F42, F43, F44,
							    F45, F46, F47, F48,
							    F49, F50, F51, F52,
							    F53);
      184 ->
	  'd_field_mesos.v1.PerfStatistics_l1_dcache_load_misses'(Rest,
								  0, 0, F1, F2,
								  F3, F4, F5,
								  F6, F7, F8,
								  F9, F10, F11,
								  F12, F13, F14,
								  F15, F16, F17,
								  F18, F19, F20,
								  F21, F22, F23,
								  F24, F25, F26,
								  F27, F28, F29,
								  F30, F31, F32,
								  F33, F34, F35,
								  F36, F37, F38,
								  F39, F40, F41,
								  F42, F43, F44,
								  F45, F46, F47,
								  F48, F49, F50,
								  F51, F52,
								  F53);
      192 ->
	  'd_field_mesos.v1.PerfStatistics_l1_dcache_stores'(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39, F40,
							     F41, F42, F43, F44,
							     F45, F46, F47, F48,
							     F49, F50, F51, F52,
							     F53);
      200 ->
	  'd_field_mesos.v1.PerfStatistics_l1_dcache_store_misses'(Rest,
								   0, 0, F1, F2,
								   F3, F4, F5,
								   F6, F7, F8,
								   F9, F10, F11,
								   F12, F13,
								   F14, F15,
								   F16, F17,
								   F18, F19,
								   F20, F21,
								   F22, F23,
								   F24, F25,
								   F26, F27,
								   F28, F29,
								   F30, F31,
								   F32, F33,
								   F34, F35,
								   F36, F37,
								   F38, F39,
								   F40, F41,
								   F42, F43,
								   F44, F45,
								   F46, F47,
								   F48, F49,
								   F50, F51,
								   F52, F53);
      208 ->
	  'd_field_mesos.v1.PerfStatistics_l1_dcache_prefetches'(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5, F6,
								 F7, F8, F9,
								 F10, F11, F12,
								 F13, F14, F15,
								 F16, F17, F18,
								 F19, F20, F21,
								 F22, F23, F24,
								 F25, F26, F27,
								 F28, F29, F30,
								 F31, F32, F33,
								 F34, F35, F36,
								 F37, F38, F39,
								 F40, F41, F42,
								 F43, F44, F45,
								 F46, F47, F48,
								 F49, F50, F51,
								 F52, F53);
      216 ->
	  'd_field_mesos.v1.PerfStatistics_l1_dcache_prefetch_misses'(Rest,
								      0, 0, F1,
								      F2, F3,
								      F4, F5,
								      F6, F7,
								      F8, F9,
								      F10, F11,
								      F12, F13,
								      F14, F15,
								      F16, F17,
								      F18, F19,
								      F20, F21,
								      F22, F23,
								      F24, F25,
								      F26, F27,
								      F28, F29,
								      F30, F31,
								      F32, F33,
								      F34, F35,
								      F36, F37,
								      F38, F39,
								      F40, F41,
								      F42, F43,
								      F44, F45,
								      F46, F47,
								      F48, F49,
								      F50, F51,
								      F52, F53);
      224 ->
	  'd_field_mesos.v1.PerfStatistics_l1_icache_loads'(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39, F40,
							    F41, F42, F43, F44,
							    F45, F46, F47, F48,
							    F49, F50, F51, F52,
							    F53);
      232 ->
	  'd_field_mesos.v1.PerfStatistics_l1_icache_load_misses'(Rest,
								  0, 0, F1, F2,
								  F3, F4, F5,
								  F6, F7, F8,
								  F9, F10, F11,
								  F12, F13, F14,
								  F15, F16, F17,
								  F18, F19, F20,
								  F21, F22, F23,
								  F24, F25, F26,
								  F27, F28, F29,
								  F30, F31, F32,
								  F33, F34, F35,
								  F36, F37, F38,
								  F39, F40, F41,
								  F42, F43, F44,
								  F45, F46, F47,
								  F48, F49, F50,
								  F51, F52,
								  F53);
      240 ->
	  'd_field_mesos.v1.PerfStatistics_l1_icache_prefetches'(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5, F6,
								 F7, F8, F9,
								 F10, F11, F12,
								 F13, F14, F15,
								 F16, F17, F18,
								 F19, F20, F21,
								 F22, F23, F24,
								 F25, F26, F27,
								 F28, F29, F30,
								 F31, F32, F33,
								 F34, F35, F36,
								 F37, F38, F39,
								 F40, F41, F42,
								 F43, F44, F45,
								 F46, F47, F48,
								 F49, F50, F51,
								 F52, F53);
      248 ->
	  'd_field_mesos.v1.PerfStatistics_l1_icache_prefetch_misses'(Rest,
								      0, 0, F1,
								      F2, F3,
								      F4, F5,
								      F6, F7,
								      F8, F9,
								      F10, F11,
								      F12, F13,
								      F14, F15,
								      F16, F17,
								      F18, F19,
								      F20, F21,
								      F22, F23,
								      F24, F25,
								      F26, F27,
								      F28, F29,
								      F30, F31,
								      F32, F33,
								      F34, F35,
								      F36, F37,
								      F38, F39,
								      F40, F41,
								      F42, F43,
								      F44, F45,
								      F46, F47,
								      F48, F49,
								      F50, F51,
								      F52, F53);
      256 ->
	  'd_field_mesos.v1.PerfStatistics_llc_loads'(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40, F41, F42,
						      F43, F44, F45, F46, F47,
						      F48, F49, F50, F51, F52,
						      F53);
      264 ->
	  'd_field_mesos.v1.PerfStatistics_llc_load_misses'(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39, F40,
							    F41, F42, F43, F44,
							    F45, F46, F47, F48,
							    F49, F50, F51, F52,
							    F53);
      272 ->
	  'd_field_mesos.v1.PerfStatistics_llc_stores'(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, F13, F14, F15, F16,
						       F17, F18, F19, F20, F21,
						       F22, F23, F24, F25, F26,
						       F27, F28, F29, F30, F31,
						       F32, F33, F34, F35, F36,
						       F37, F38, F39, F40, F41,
						       F42, F43, F44, F45, F46,
						       F47, F48, F49, F50, F51,
						       F52, F53);
      280 ->
	  'd_field_mesos.v1.PerfStatistics_llc_store_misses'(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39, F40,
							     F41, F42, F43, F44,
							     F45, F46, F47, F48,
							     F49, F50, F51, F52,
							     F53);
      288 ->
	  'd_field_mesos.v1.PerfStatistics_llc_prefetches'(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10, F11, F12, F13,
							   F14, F15, F16, F17,
							   F18, F19, F20, F21,
							   F22, F23, F24, F25,
							   F26, F27, F28, F29,
							   F30, F31, F32, F33,
							   F34, F35, F36, F37,
							   F38, F39, F40, F41,
							   F42, F43, F44, F45,
							   F46, F47, F48, F49,
							   F50, F51, F52, F53);
      296 ->
	  'd_field_mesos.v1.PerfStatistics_llc_prefetch_misses'(Rest,
								0, 0, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, F36, F37,
								F38, F39, F40,
								F41, F42, F43,
								F44, F45, F46,
								F47, F48, F49,
								F50, F51, F52,
								F53);
      304 ->
	  'd_field_mesos.v1.PerfStatistics_dtlb_loads'(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, F13, F14, F15, F16,
						       F17, F18, F19, F20, F21,
						       F22, F23, F24, F25, F26,
						       F27, F28, F29, F30, F31,
						       F32, F33, F34, F35, F36,
						       F37, F38, F39, F40, F41,
						       F42, F43, F44, F45, F46,
						       F47, F48, F49, F50, F51,
						       F52, F53);
      312 ->
	  'd_field_mesos.v1.PerfStatistics_dtlb_load_misses'(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39, F40,
							     F41, F42, F43, F44,
							     F45, F46, F47, F48,
							     F49, F50, F51, F52,
							     F53);
      320 ->
	  'd_field_mesos.v1.PerfStatistics_dtlb_stores'(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39, F40,
							F41, F42, F43, F44, F45,
							F46, F47, F48, F49, F50,
							F51, F52, F53);
      328 ->
	  'd_field_mesos.v1.PerfStatistics_dtlb_store_misses'(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7,
							      F8, F9, F10, F11,
							      F12, F13, F14,
							      F15, F16, F17,
							      F18, F19, F20,
							      F21, F22, F23,
							      F24, F25, F26,
							      F27, F28, F29,
							      F30, F31, F32,
							      F33, F34, F35,
							      F36, F37, F38,
							      F39, F40, F41,
							      F42, F43, F44,
							      F45, F46, F47,
							      F48, F49, F50,
							      F51, F52, F53);
      336 ->
	  'd_field_mesos.v1.PerfStatistics_dtlb_prefetches'(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39, F40,
							    F41, F42, F43, F44,
							    F45, F46, F47, F48,
							    F49, F50, F51, F52,
							    F53);
      344 ->
	  'd_field_mesos.v1.PerfStatistics_dtlb_prefetch_misses'(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5, F6,
								 F7, F8, F9,
								 F10, F11, F12,
								 F13, F14, F15,
								 F16, F17, F18,
								 F19, F20, F21,
								 F22, F23, F24,
								 F25, F26, F27,
								 F28, F29, F30,
								 F31, F32, F33,
								 F34, F35, F36,
								 F37, F38, F39,
								 F40, F41, F42,
								 F43, F44, F45,
								 F46, F47, F48,
								 F49, F50, F51,
								 F52, F53);
      352 ->
	  'd_field_mesos.v1.PerfStatistics_itlb_loads'(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, F13, F14, F15, F16,
						       F17, F18, F19, F20, F21,
						       F22, F23, F24, F25, F26,
						       F27, F28, F29, F30, F31,
						       F32, F33, F34, F35, F36,
						       F37, F38, F39, F40, F41,
						       F42, F43, F44, F45, F46,
						       F47, F48, F49, F50, F51,
						       F52, F53);
      360 ->
	  'd_field_mesos.v1.PerfStatistics_itlb_load_misses'(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39, F40,
							     F41, F42, F43, F44,
							     F45, F46, F47, F48,
							     F49, F50, F51, F52,
							     F53);
      368 ->
	  'd_field_mesos.v1.PerfStatistics_branch_loads'(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 F11, F12, F13, F14,
							 F15, F16, F17, F18,
							 F19, F20, F21, F22,
							 F23, F24, F25, F26,
							 F27, F28, F29, F30,
							 F31, F32, F33, F34,
							 F35, F36, F37, F38,
							 F39, F40, F41, F42,
							 F43, F44, F45, F46,
							 F47, F48, F49, F50,
							 F51, F52, F53);
      376 ->
	  'd_field_mesos.v1.PerfStatistics_branch_load_misses'(Rest,
							       0, 0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10, F11,
							       F12, F13, F14,
							       F15, F16, F17,
							       F18, F19, F20,
							       F21, F22, F23,
							       F24, F25, F26,
							       F27, F28, F29,
							       F30, F31, F32,
							       F33, F34, F35,
							       F36, F37, F38,
							       F39, F40, F41,
							       F42, F43, F44,
							       F45, F46, F47,
							       F48, F49, F50,
							       F51, F52, F53);
      384 ->
	  'd_field_mesos.v1.PerfStatistics_node_loads'(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, F13, F14, F15, F16,
						       F17, F18, F19, F20, F21,
						       F22, F23, F24, F25, F26,
						       F27, F28, F29, F30, F31,
						       F32, F33, F34, F35, F36,
						       F37, F38, F39, F40, F41,
						       F42, F43, F44, F45, F46,
						       F47, F48, F49, F50, F51,
						       F52, F53);
      392 ->
	  'd_field_mesos.v1.PerfStatistics_node_load_misses'(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39, F40,
							     F41, F42, F43, F44,
							     F45, F46, F47, F48,
							     F49, F50, F51, F52,
							     F53);
      400 ->
	  'd_field_mesos.v1.PerfStatistics_node_stores'(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39, F40,
							F41, F42, F43, F44, F45,
							F46, F47, F48, F49, F50,
							F51, F52, F53);
      408 ->
	  'd_field_mesos.v1.PerfStatistics_node_store_misses'(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7,
							      F8, F9, F10, F11,
							      F12, F13, F14,
							      F15, F16, F17,
							      F18, F19, F20,
							      F21, F22, F23,
							      F24, F25, F26,
							      F27, F28, F29,
							      F30, F31, F32,
							      F33, F34, F35,
							      F36, F37, F38,
							      F39, F40, F41,
							      F42, F43, F44,
							      F45, F46, F47,
							      F48, F49, F50,
							      F51, F52, F53);
      416 ->
	  'd_field_mesos.v1.PerfStatistics_node_prefetches'(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39, F40,
							    F41, F42, F43, F44,
							    F45, F46, F47, F48,
							    F49, F50, F51, F52,
							    F53);
      424 ->
	  'd_field_mesos.v1.PerfStatistics_node_prefetch_misses'(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5, F6,
								 F7, F8, F9,
								 F10, F11, F12,
								 F13, F14, F15,
								 F16, F17, F18,
								 F19, F20, F21,
								 F22, F23, F24,
								 F25, F26, F27,
								 F28, F29, F30,
								 F31, F32, F33,
								 F34, F35, F36,
								 F37, F38, F39,
								 F40, F41, F42,
								 F43, F44, F45,
								 F46, F47, F48,
								 F49, F50, F51,
								 F52, F53);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.PerfStatistics'(Rest, 0, 0, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40, F41, F42,
						      F43, F44, F45, F46, F47,
						      F48, F49, F50, F51, F52,
						      F53);
	    1 ->
		'skip_64_mesos.v1.PerfStatistics'(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12, F13, F14, F15,
						  F16, F17, F18, F19, F20, F21,
						  F22, F23, F24, F25, F26, F27,
						  F28, F29, F30, F31, F32, F33,
						  F34, F35, F36, F37, F38, F39,
						  F40, F41, F42, F43, F44, F45,
						  F46, F47, F48, F49, F50, F51,
						  F52, F53);
	    2 ->
		'skip_length_delimited_mesos.v1.PerfStatistics'(Rest, 0,
								0, F1, F2, F3,
								F4, F5, F6, F7,
								F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, F36, F37,
								F38, F39, F40,
								F41, F42, F43,
								F44, F45, F46,
								F47, F48, F49,
								F50, F51, F52,
								F53);
	    5 ->
		'skip_32_mesos.v1.PerfStatistics'(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12, F13, F14, F15,
						  F16, F17, F18, F19, F20, F21,
						  F22, F23, F24, F25, F26, F27,
						  F28, F29, F30, F31, F32, F33,
						  F34, F35, F36, F37, F38, F39,
						  F40, F41, F42, F43, F44, F45,
						  F46, F47, F48, F49, F50, F51,
						  F52, F53)
	  end
    end;
'dg_read_field_def_mesos.v1.PerfStatistics'(<<>>, 0, 0,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17, F18, F19, F20, F21, F22, F23,
					    F24, F25, F26, F27, F28, F29, F30,
					    F31, F32, F33, F34, F35, F36, F37,
					    F38, F39, F40, F41, F42, F43, F44,
					    F45, F46, F47, F48, F49, F50, F51,
					    F52, F53) ->
    #'mesos.v1.PerfStatistics'{timestamp = F1,
			       duration = F2, cycles = F3,
			       stalled_cycles_frontend = F4,
			       stalled_cycles_backend = F5, instructions = F6,
			       cache_references = F7, cache_misses = F8,
			       branches = F9, branch_misses = F10,
			       bus_cycles = F11, ref_cycles = F12,
			       cpu_clock = F13, task_clock = F14,
			       page_faults = F15, minor_faults = F16,
			       major_faults = F17, context_switches = F18,
			       cpu_migrations = F19, alignment_faults = F20,
			       emulation_faults = F21, l1_dcache_loads = F22,
			       l1_dcache_load_misses = F23,
			       l1_dcache_stores = F24,
			       l1_dcache_store_misses = F25,
			       l1_dcache_prefetches = F26,
			       l1_dcache_prefetch_misses = F27,
			       l1_icache_loads = F28,
			       l1_icache_load_misses = F29,
			       l1_icache_prefetches = F30,
			       l1_icache_prefetch_misses = F31, llc_loads = F32,
			       llc_load_misses = F33, llc_stores = F34,
			       llc_store_misses = F35, llc_prefetches = F36,
			       llc_prefetch_misses = F37, dtlb_loads = F38,
			       dtlb_load_misses = F39, dtlb_stores = F40,
			       dtlb_store_misses = F41, dtlb_prefetches = F42,
			       dtlb_prefetch_misses = F43, itlb_loads = F44,
			       itlb_load_misses = F45, branch_loads = F46,
			       branch_load_misses = F47, node_loads = F48,
			       node_load_misses = F49, node_stores = F50,
			       node_store_misses = F51, node_prefetches = F52,
			       node_prefetch_misses = F53}.

'd_field_mesos.v1.PerfStatistics_timestamp'(<<Value:64/little-float,
					      Rest/binary>>,
					    Z1, Z2, _, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26, F27, F28,
					    F29, F30, F31, F32, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41, F42,
					    F43, F44, F45, F46, F47, F48, F49,
					    F50, F51, F52, F53) ->
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, Z1,
						 Z2, Value, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_duration'(<<Value:64/little-float,
					     Rest/binary>>,
					   Z1, Z2, F1, _, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36,
					   F37, F38, F39, F40, F41, F42, F43,
					   F44, F45, F46, F47, F48, F49, F50,
					   F51, F52, F53) ->
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, Z1,
						 Z2, F1, Value, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_cycles'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26, F27, F28, F29, F30, F31, F32,
					 F33, F34, F35, F36, F37, F38, F39, F40,
					 F41, F42, F43, F44, F45, F46, F47, F48,
					 F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_cycles'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16, F17, F18, F19, F20,
					     F21, F22, F23, F24, F25, F26, F27,
					     F28, F29, F30, F31, F32, F33, F34,
					     F35, F36, F37, F38, F39, F40, F41,
					     F42, F43, F44, F45, F46, F47, F48,
					     F49, F50, F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_cycles'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, _, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26, F27, F28, F29, F30, F31, F32,
					 F33, F34, F35, F36, F37, F38, F39, F40,
					 F41, F42, F43, F44, F45, F46, F47, F48,
					 F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, NewFValue, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_stalled_cycles_frontend'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2, F3,
							  F4, F5, F6, F7, F8,
							  F9, F10, F11, F12,
							  F13, F14, F15, F16,
							  F17, F18, F19, F20,
							  F21, F22, F23, F24,
							  F25, F26, F27, F28,
							  F29, F30, F31, F32,
							  F33, F34, F35, F36,
							  F37, F38, F39, F40,
							  F41, F42, F43, F44,
							  F45, F46, F47, F48,
							  F49, F50, F51, F52,
							  F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_stalled_cycles_frontend'(Rest,
							      N + 7,
							      X bsl N + Acc, F1,
							      F2, F3, F4, F5,
							      F6, F7, F8, F9,
							      F10, F11, F12,
							      F13, F14, F15,
							      F16, F17, F18,
							      F19, F20, F21,
							      F22, F23, F24,
							      F25, F26, F27,
							      F28, F29, F30,
							      F31, F32, F33,
							      F34, F35, F36,
							      F37, F38, F39,
							      F40, F41, F42,
							      F43, F44, F45,
							      F46, F47, F48,
							      F49, F50, F51,
							      F52, F53);
'd_field_mesos.v1.PerfStatistics_stalled_cycles_frontend'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2, F3, _,
							  F5, F6, F7, F8, F9,
							  F10, F11, F12, F13,
							  F14, F15, F16, F17,
							  F18, F19, F20, F21,
							  F22, F23, F24, F25,
							  F26, F27, F28, F29,
							  F30, F31, F32, F33,
							  F34, F35, F36, F37,
							  F38, F39, F40, F41,
							  F42, F43, F44, F45,
							  F46, F47, F48, F49,
							  F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, NewFValue, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_stalled_cycles_backend'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40, F41,
							 F42, F43, F44, F45,
							 F46, F47, F48, F49,
							 F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_stalled_cycles_backend'(Rest,
							     N + 7,
							     X bsl N + Acc, F1,
							     F2, F3, F4, F5, F6,
							     F7, F8, F9, F10,
							     F11, F12, F13, F14,
							     F15, F16, F17, F18,
							     F19, F20, F21, F22,
							     F23, F24, F25, F26,
							     F27, F28, F29, F30,
							     F31, F32, F33, F34,
							     F35, F36, F37, F38,
							     F39, F40, F41, F42,
							     F43, F44, F45, F46,
							     F47, F48, F49, F50,
							     F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_stalled_cycles_backend'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3, F4,
							 _, F6, F7, F8, F9, F10,
							 F11, F12, F13, F14,
							 F15, F16, F17, F18,
							 F19, F20, F21, F22,
							 F23, F24, F25, F26,
							 F27, F28, F29, F30,
							 F31, F32, F33, F34,
							 F35, F36, F37, F38,
							 F39, F40, F41, F42,
							 F43, F44, F45, F46,
							 F47, F48, F49, F50,
							 F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, NewFValue, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_instructions'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26, F27, F28, F29, F30, F31,
					       F32, F33, F34, F35, F36, F37,
					       F38, F39, F40, F41, F42, F43,
					       F44, F45, F46, F47, F48, F49,
					       F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_instructions'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, F11, F12, F13, F14, F15,
						   F16, F17, F18, F19, F20, F21,
						   F22, F23, F24, F25, F26, F27,
						   F28, F29, F30, F31, F32, F33,
						   F34, F35, F36, F37, F38, F39,
						   F40, F41, F42, F43, F44, F45,
						   F46, F47, F48, F49, F50, F51,
						   F52, F53);
'd_field_mesos.v1.PerfStatistics_instructions'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, _,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26, F27, F28, F29, F30, F31,
					       F32, F33, F34, F35, F36, F37,
					       F38, F39, F40, F41, F42, F43,
					       F44, F45, F46, F47, F48, F49,
					       F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, NewFValue,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_cache_references'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_cache_references'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6, F7,
						       F8, F9, F10, F11, F12,
						       F13, F14, F15, F16, F17,
						       F18, F19, F20, F21, F22,
						       F23, F24, F25, F26, F27,
						       F28, F29, F30, F31, F32,
						       F33, F34, F35, F36, F37,
						       F38, F39, F40, F41, F42,
						       F43, F44, F45, F46, F47,
						       F48, F49, F50, F51, F52,
						       F53);
'd_field_mesos.v1.PerfStatistics_cache_references'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, _, F8, F9, F10, F11, F12,
						   F13, F14, F15, F16, F17, F18,
						   F19, F20, F21, F22, F23, F24,
						   F25, F26, F27, F28, F29, F30,
						   F31, F32, F33, F34, F35, F36,
						   F37, F38, F39, F40, F41, F42,
						   F43, F44, F45, F46, F47, F48,
						   F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6,
						 NewFValue, F8, F9, F10, F11,
						 F12, F13, F14, F15, F16, F17,
						 F18, F19, F20, F21, F22, F23,
						 F24, F25, F26, F27, F28, F29,
						 F30, F31, F32, F33, F34, F35,
						 F36, F37, F38, F39, F40, F41,
						 F42, F43, F44, F45, F46, F47,
						 F48, F49, F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_cache_misses'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26, F27, F28, F29, F30, F31,
					       F32, F33, F34, F35, F36, F37,
					       F38, F39, F40, F41, F42, F43,
					       F44, F45, F46, F47, F48, F49,
					       F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_cache_misses'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, F11, F12, F13, F14, F15,
						   F16, F17, F18, F19, F20, F21,
						   F22, F23, F24, F25, F26, F27,
						   F28, F29, F30, F31, F32, F33,
						   F34, F35, F36, F37, F38, F39,
						   F40, F41, F42, F43, F44, F45,
						   F46, F47, F48, F49, F50, F51,
						   F52, F53);
'd_field_mesos.v1.PerfStatistics_cache_misses'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, _, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26, F27, F28, F29, F30, F31,
					       F32, F33, F34, F35, F36, F37,
					       F38, F39, F40, F41, F42, F43,
					       F44, F45, F46, F47, F48, F49,
					       F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7,
						 NewFValue, F9, F10, F11, F12,
						 F13, F14, F15, F16, F17, F18,
						 F19, F20, F21, F22, F23, F24,
						 F25, F26, F27, F28, F29, F30,
						 F31, F32, F33, F34, F35, F36,
						 F37, F38, F39, F40, F41, F42,
						 F43, F44, F45, F46, F47, F48,
						 F49, F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_branches'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36,
					   F37, F38, F39, F40, F41, F42, F43,
					   F44, F45, F46, F47, F48, F49, F50,
					   F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_branches'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16, F17,
					       F18, F19, F20, F21, F22, F23,
					       F24, F25, F26, F27, F28, F29,
					       F30, F31, F32, F33, F34, F35,
					       F36, F37, F38, F39, F40, F41,
					       F42, F43, F44, F45, F46, F47,
					       F48, F49, F50, F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_branches'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, _, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36,
					   F37, F38, F39, F40, F41, F42, F43,
					   F44, F45, F46, F47, F48, F49, F50,
					   F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 NewFValue, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_branch_misses'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, F13,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26, F27, F28, F29, F30, F31,
						F32, F33, F34, F35, F36, F37,
						F38, F39, F40, F41, F42, F43,
						F44, F45, F46, F47, F48, F49,
						F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_branch_misses'(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, F5, F6, F7, F8,
						    F9, F10, F11, F12, F13, F14,
						    F15, F16, F17, F18, F19,
						    F20, F21, F22, F23, F24,
						    F25, F26, F27, F28, F29,
						    F30, F31, F32, F33, F34,
						    F35, F36, F37, F38, F39,
						    F40, F41, F42, F43, F44,
						    F45, F46, F47, F48, F49,
						    F50, F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_branch_misses'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, _, F11, F12, F13,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26, F27, F28, F29, F30, F31,
						F32, F33, F34, F35, F36, F37,
						F38, F39, F40, F41, F42, F43,
						F44, F45, F46, F47, F48, F49,
						F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, NewFValue, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_bus_cycles'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_bus_cycles'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, F31, F32, F33,
						 F34, F35, F36, F37, F38, F39,
						 F40, F41, F42, F43, F44, F45,
						 F46, F47, F48, F49, F50, F51,
						 F52, F53);
'd_field_mesos.v1.PerfStatistics_bus_cycles'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, _, F12, F13, F14, F15,
					     F16, F17, F18, F19, F20, F21, F22,
					     F23, F24, F25, F26, F27, F28, F29,
					     F30, F31, F32, F33, F34, F35, F36,
					     F37, F38, F39, F40, F41, F42, F43,
					     F44, F45, F46, F47, F48, F49, F50,
					     F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, NewFValue, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_ref_cycles'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_ref_cycles'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, F31, F32, F33,
						 F34, F35, F36, F37, F38, F39,
						 F40, F41, F42, F43, F44, F45,
						 F46, F47, F48, F49, F50, F51,
						 F52, F53);
'd_field_mesos.v1.PerfStatistics_ref_cycles'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, _, F13, F14, F15,
					     F16, F17, F18, F19, F20, F21, F22,
					     F23, F24, F25, F26, F27, F28, F29,
					     F30, F31, F32, F33, F34, F35, F36,
					     F37, F38, F39, F40, F41, F42, F43,
					     F44, F45, F46, F47, F48, F49, F50,
					     F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, NewFValue, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_cpu_clock'(<<Value:64/little-float,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, _, F14, F15,
					    F16, F17, F18, F19, F20, F21, F22,
					    F23, F24, F25, F26, F27, F28, F29,
					    F30, F31, F32, F33, F34, F35, F36,
					    F37, F38, F39, F40, F41, F42, F43,
					    F44, F45, F46, F47, F48, F49, F50,
					    F51, F52, F53) ->
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, Value,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_task_clock'(<<Value:64/little-float,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, _, F15,
					     F16, F17, F18, F19, F20, F21, F22,
					     F23, F24, F25, F26, F27, F28, F29,
					     F30, F31, F32, F33, F34, F35, F36,
					     F37, F38, F39, F40, F41, F42, F43,
					     F44, F45, F46, F47, F48, F49, F50,
					     F51, F52, F53) ->
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 Value, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_page_faults'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12, F13,
					      F14, F15, F16, F17, F18, F19, F20,
					      F21, F22, F23, F24, F25, F26, F27,
					      F28, F29, F30, F31, F32, F33, F34,
					      F35, F36, F37, F38, F39, F40, F41,
					      F42, F43, F44, F45, F46, F47, F48,
					      F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_page_faults'(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12, F13, F14, F15,
						  F16, F17, F18, F19, F20, F21,
						  F22, F23, F24, F25, F26, F27,
						  F28, F29, F30, F31, F32, F33,
						  F34, F35, F36, F37, F38, F39,
						  F40, F41, F42, F43, F44, F45,
						  F46, F47, F48, F49, F50, F51,
						  F52, F53);
'd_field_mesos.v1.PerfStatistics_page_faults'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12, F13,
					      F14, _, F16, F17, F18, F19, F20,
					      F21, F22, F23, F24, F25, F26, F27,
					      F28, F29, F30, F31, F32, F33, F34,
					      F35, F36, F37, F38, F39, F40, F41,
					      F42, F43, F44, F45, F46, F47, F48,
					      F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 NewFValue, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_minor_faults'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26, F27, F28, F29, F30, F31,
					       F32, F33, F34, F35, F36, F37,
					       F38, F39, F40, F41, F42, F43,
					       F44, F45, F46, F47, F48, F49,
					       F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_minor_faults'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, F11, F12, F13, F14, F15,
						   F16, F17, F18, F19, F20, F21,
						   F22, F23, F24, F25, F26, F27,
						   F28, F29, F30, F31, F32, F33,
						   F34, F35, F36, F37, F38, F39,
						   F40, F41, F42, F43, F44, F45,
						   F46, F47, F48, F49, F50, F51,
						   F52, F53);
'd_field_mesos.v1.PerfStatistics_minor_faults'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, _, F17, F18, F19, F20,
					       F21, F22, F23, F24, F25, F26,
					       F27, F28, F29, F30, F31, F32,
					       F33, F34, F35, F36, F37, F38,
					       F39, F40, F41, F42, F43, F44,
					       F45, F46, F47, F48, F49, F50,
					       F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, NewFValue, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_major_faults'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26, F27, F28, F29, F30, F31,
					       F32, F33, F34, F35, F36, F37,
					       F38, F39, F40, F41, F42, F43,
					       F44, F45, F46, F47, F48, F49,
					       F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_major_faults'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, F11, F12, F13, F14, F15,
						   F16, F17, F18, F19, F20, F21,
						   F22, F23, F24, F25, F26, F27,
						   F28, F29, F30, F31, F32, F33,
						   F34, F35, F36, F37, F38, F39,
						   F40, F41, F42, F43, F44, F45,
						   F46, F47, F48, F49, F50, F51,
						   F52, F53);
'd_field_mesos.v1.PerfStatistics_major_faults'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, _, F18, F19, F20,
					       F21, F22, F23, F24, F25, F26,
					       F27, F28, F29, F30, F31, F32,
					       F33, F34, F35, F36, F37, F38,
					       F39, F40, F41, F42, F43, F44,
					       F45, F46, F47, F48, F49, F50,
					       F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, NewFValue, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_context_switches'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_context_switches'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6, F7,
						       F8, F9, F10, F11, F12,
						       F13, F14, F15, F16, F17,
						       F18, F19, F20, F21, F22,
						       F23, F24, F25, F26, F27,
						       F28, F29, F30, F31, F32,
						       F33, F34, F35, F36, F37,
						       F38, F39, F40, F41, F42,
						       F43, F44, F45, F46, F47,
						       F48, F49, F50, F51, F52,
						       F53);
'd_field_mesos.v1.PerfStatistics_context_switches'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   _, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52,
						   F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, NewFValue, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_cpu_migrations'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_cpu_migrations'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7, F8,
						     F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42, F43,
						     F44, F45, F46, F47, F48,
						     F49, F50, F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_cpu_migrations'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, _,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, NewFValue,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_alignment_faults'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_alignment_faults'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6, F7,
						       F8, F9, F10, F11, F12,
						       F13, F14, F15, F16, F17,
						       F18, F19, F20, F21, F22,
						       F23, F24, F25, F26, F27,
						       F28, F29, F30, F31, F32,
						       F33, F34, F35, F36, F37,
						       F38, F39, F40, F41, F42,
						       F43, F44, F45, F46, F47,
						       F48, F49, F50, F51, F52,
						       F53);
'd_field_mesos.v1.PerfStatistics_alignment_faults'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, _, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52,
						   F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19,
						 NewFValue, F21, F22, F23, F24,
						 F25, F26, F27, F28, F29, F30,
						 F31, F32, F33, F34, F35, F36,
						 F37, F38, F39, F40, F41, F42,
						 F43, F44, F45, F46, F47, F48,
						 F49, F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_emulation_faults'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_emulation_faults'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6, F7,
						       F8, F9, F10, F11, F12,
						       F13, F14, F15, F16, F17,
						       F18, F19, F20, F21, F22,
						       F23, F24, F25, F26, F27,
						       F28, F29, F30, F31, F32,
						       F33, F34, F35, F36, F37,
						       F38, F39, F40, F41, F42,
						       F43, F44, F45, F46, F47,
						       F48, F49, F50, F51, F52,
						       F53);
'd_field_mesos.v1.PerfStatistics_emulation_faults'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, _, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52,
						   F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 NewFValue, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_l1_dcache_loads'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40, F41, F42,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_l1_dcache_loads'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40, F41, F42,
						      F43, F44, F45, F46, F47,
						      F48, F49, F50, F51, F52,
						      F53);
'd_field_mesos.v1.PerfStatistics_l1_dcache_loads'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, _, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40, F41, F42,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, NewFValue, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_l1_dcache_load_misses'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39, F40,
							F41, F42, F43, F44, F45,
							F46, F47, F48, F49, F50,
							F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_l1_dcache_load_misses'(Rest,
							    N + 7,
							    X bsl N + Acc, F1,
							    F2, F3, F4, F5, F6,
							    F7, F8, F9, F10,
							    F11, F12, F13, F14,
							    F15, F16, F17, F18,
							    F19, F20, F21, F22,
							    F23, F24, F25, F26,
							    F27, F28, F29, F30,
							    F31, F32, F33, F34,
							    F35, F36, F37, F38,
							    F39, F40, F41, F42,
							    F43, F44, F45, F46,
							    F47, F48, F49, F50,
							    F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_l1_dcache_load_misses'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, _, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39, F40,
							F41, F42, F43, F44, F45,
							F46, F47, F48, F49, F50,
							F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, NewFValue, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_l1_dcache_stores'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_l1_dcache_stores'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6, F7,
						       F8, F9, F10, F11, F12,
						       F13, F14, F15, F16, F17,
						       F18, F19, F20, F21, F22,
						       F23, F24, F25, F26, F27,
						       F28, F29, F30, F31, F32,
						       F33, F34, F35, F36, F37,
						       F38, F39, F40, F41, F42,
						       F43, F44, F45, F46, F47,
						       F48, F49, F50, F51, F52,
						       F53);
'd_field_mesos.v1.PerfStatistics_l1_dcache_stores'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   _, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52,
						   F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, NewFValue, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_l1_dcache_store_misses'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40, F41,
							 F42, F43, F44, F45,
							 F46, F47, F48, F49,
							 F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_l1_dcache_store_misses'(Rest,
							     N + 7,
							     X bsl N + Acc, F1,
							     F2, F3, F4, F5, F6,
							     F7, F8, F9, F10,
							     F11, F12, F13, F14,
							     F15, F16, F17, F18,
							     F19, F20, F21, F22,
							     F23, F24, F25, F26,
							     F27, F28, F29, F30,
							     F31, F32, F33, F34,
							     F35, F36, F37, F38,
							     F39, F40, F41, F42,
							     F43, F44, F45, F46,
							     F47, F48, F49, F50,
							     F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_l1_dcache_store_misses'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, _, F26,
							 F27, F28, F29, F30,
							 F31, F32, F33, F34,
							 F35, F36, F37, F38,
							 F39, F40, F41, F42,
							 F43, F44, F45, F46,
							 F47, F48, F49, F50,
							 F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, NewFValue,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_l1_dcache_prefetches'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_l1_dcache_prefetches'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3, F4, F5,
							   F6, F7, F8, F9, F10,
							   F11, F12, F13, F14,
							   F15, F16, F17, F18,
							   F19, F20, F21, F22,
							   F23, F24, F25, F26,
							   F27, F28, F29, F30,
							   F31, F32, F33, F34,
							   F35, F36, F37, F38,
							   F39, F40, F41, F42,
							   F43, F44, F45, F46,
							   F47, F48, F49, F50,
							   F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_l1_dcache_prefetches'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       _, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25,
						 NewFValue, F27, F28, F29, F30,
						 F31, F32, F33, F34, F35, F36,
						 F37, F38, F39, F40, F41, F42,
						 F43, F44, F45, F46, F47, F48,
						 F49, F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_l1_dcache_prefetch_misses'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39, F40,
							    F41, F42, F43, F44,
							    F45, F46, F47, F48,
							    F49, F50, F51, F52,
							    F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_l1_dcache_prefetch_misses'(Rest,
								N + 7,
								X bsl N + Acc,
								F1, F2, F3, F4,
								F5, F6, F7, F8,
								F9, F10, F11,
								F12, F13, F14,
								F15, F16, F17,
								F18, F19, F20,
								F21, F22, F23,
								F24, F25, F26,
								F27, F28, F29,
								F30, F31, F32,
								F33, F34, F35,
								F36, F37, F38,
								F39, F40, F41,
								F42, F43, F44,
								F45, F46, F47,
								F48, F49, F50,
								F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_l1_dcache_prefetch_misses'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, _, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39, F40,
							    F41, F42, F43, F44,
							    F45, F46, F47, F48,
							    F49, F50, F51, F52,
							    F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 NewFValue, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_l1_icache_loads'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40, F41, F42,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_l1_icache_loads'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40, F41, F42,
						      F43, F44, F45, F46, F47,
						      F48, F49, F50, F51, F52,
						      F53);
'd_field_mesos.v1.PerfStatistics_l1_icache_loads'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, _, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40, F41, F42,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, NewFValue, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_l1_icache_load_misses'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39, F40,
							F41, F42, F43, F44, F45,
							F46, F47, F48, F49, F50,
							F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_l1_icache_load_misses'(Rest,
							    N + 7,
							    X bsl N + Acc, F1,
							    F2, F3, F4, F5, F6,
							    F7, F8, F9, F10,
							    F11, F12, F13, F14,
							    F15, F16, F17, F18,
							    F19, F20, F21, F22,
							    F23, F24, F25, F26,
							    F27, F28, F29, F30,
							    F31, F32, F33, F34,
							    F35, F36, F37, F38,
							    F39, F40, F41, F42,
							    F43, F44, F45, F46,
							    F47, F48, F49, F50,
							    F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_l1_icache_load_misses'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, _, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39, F40,
							F41, F42, F43, F44, F45,
							F46, F47, F48, F49, F50,
							F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, NewFValue, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_l1_icache_prefetches'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_l1_icache_prefetches'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3, F4, F5,
							   F6, F7, F8, F9, F10,
							   F11, F12, F13, F14,
							   F15, F16, F17, F18,
							   F19, F20, F21, F22,
							   F23, F24, F25, F26,
							   F27, F28, F29, F30,
							   F31, F32, F33, F34,
							   F35, F36, F37, F38,
							   F39, F40, F41, F42,
							   F43, F44, F45, F46,
							   F47, F48, F49, F50,
							   F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_l1_icache_prefetches'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, _,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, NewFValue, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_l1_icache_prefetch_misses'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39, F40,
							    F41, F42, F43, F44,
							    F45, F46, F47, F48,
							    F49, F50, F51, F52,
							    F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_l1_icache_prefetch_misses'(Rest,
								N + 7,
								X bsl N + Acc,
								F1, F2, F3, F4,
								F5, F6, F7, F8,
								F9, F10, F11,
								F12, F13, F14,
								F15, F16, F17,
								F18, F19, F20,
								F21, F22, F23,
								F24, F25, F26,
								F27, F28, F29,
								F30, F31, F32,
								F33, F34, F35,
								F36, F37, F38,
								F39, F40, F41,
								F42, F43, F44,
								F45, F46, F47,
								F48, F49, F50,
								F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_l1_icache_prefetch_misses'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, _, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39, F40,
							    F41, F42, F43, F44,
							    F45, F46, F47, F48,
							    F49, F50, F51, F52,
							    F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, NewFValue,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_llc_loads'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26, F27, F28,
					    F29, F30, F31, F32, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41, F42,
					    F43, F44, F45, F46, F47, F48, F49,
					    F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_llc_loads'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12, F13, F14, F15, F16, F17,
						F18, F19, F20, F21, F22, F23,
						F24, F25, F26, F27, F28, F29,
						F30, F31, F32, F33, F34, F35,
						F36, F37, F38, F39, F40, F41,
						F42, F43, F44, F45, F46, F47,
						F48, F49, F50, F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_llc_loads'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26, F27, F28,
					    F29, F30, F31, _, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41, F42,
					    F43, F44, F45, F46, F47, F48, F49,
					    F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31,
						 NewFValue, F33, F34, F35, F36,
						 F37, F38, F39, F40, F41, F42,
						 F43, F44, F45, F46, F47, F48,
						 F49, F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_llc_load_misses'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40, F41, F42,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_llc_load_misses'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40, F41, F42,
						      F43, F44, F45, F46, F47,
						      F48, F49, F50, F51, F52,
						      F53);
'd_field_mesos.v1.PerfStatistics_llc_load_misses'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, _, F34, F35, F36,
						  F37, F38, F39, F40, F41, F42,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 NewFValue, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_llc_stores'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_llc_stores'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, F31, F32, F33,
						 F34, F35, F36, F37, F38, F39,
						 F40, F41, F42, F43, F44, F45,
						 F46, F47, F48, F49, F50, F51,
						 F52, F53);
'd_field_mesos.v1.PerfStatistics_llc_stores'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, _, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, NewFValue, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_llc_store_misses'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_llc_store_misses'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6, F7,
						       F8, F9, F10, F11, F12,
						       F13, F14, F15, F16, F17,
						       F18, F19, F20, F21, F22,
						       F23, F24, F25, F26, F27,
						       F28, F29, F30, F31, F32,
						       F33, F34, F35, F36, F37,
						       F38, F39, F40, F41, F42,
						       F43, F44, F45, F46, F47,
						       F48, F49, F50, F51, F52,
						       F53);
'd_field_mesos.v1.PerfStatistics_llc_store_misses'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, _,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52,
						   F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, NewFValue, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_llc_prefetches'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_llc_prefetches'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7, F8,
						     F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42, F43,
						     F44, F45, F46, F47, F48,
						     F49, F50, F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_llc_prefetches'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, _, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, NewFValue, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_llc_prefetch_misses'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39, F40,
						      F41, F42, F43, F44, F45,
						      F46, F47, F48, F49, F50,
						      F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_llc_prefetch_misses'(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16, F17, F18,
							  F19, F20, F21, F22,
							  F23, F24, F25, F26,
							  F27, F28, F29, F30,
							  F31, F32, F33, F34,
							  F35, F36, F37, F38,
							  F39, F40, F41, F42,
							  F43, F44, F45, F46,
							  F47, F48, F49, F50,
							  F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_llc_prefetch_misses'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, _, F38, F39, F40,
						      F41, F42, F43, F44, F45,
						      F46, F47, F48, F49, F50,
						      F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, NewFValue,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_dtlb_loads'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_dtlb_loads'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, F31, F32, F33,
						 F34, F35, F36, F37, F38, F39,
						 F40, F41, F42, F43, F44, F45,
						 F46, F47, F48, F49, F50, F51,
						 F52, F53);
'd_field_mesos.v1.PerfStatistics_dtlb_loads'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, _, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37,
						 NewFValue, F39, F40, F41, F42,
						 F43, F44, F45, F46, F47, F48,
						 F49, F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_dtlb_load_misses'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_dtlb_load_misses'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6, F7,
						       F8, F9, F10, F11, F12,
						       F13, F14, F15, F16, F17,
						       F18, F19, F20, F21, F22,
						       F23, F24, F25, F26, F27,
						       F28, F29, F30, F31, F32,
						       F33, F34, F35, F36, F37,
						       F38, F39, F40, F41, F42,
						       F43, F44, F45, F46, F47,
						       F48, F49, F50, F51, F52,
						       F53);
'd_field_mesos.v1.PerfStatistics_dtlb_load_misses'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, _, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52,
						   F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 NewFValue, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_dtlb_stores'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12, F13,
					      F14, F15, F16, F17, F18, F19, F20,
					      F21, F22, F23, F24, F25, F26, F27,
					      F28, F29, F30, F31, F32, F33, F34,
					      F35, F36, F37, F38, F39, F40, F41,
					      F42, F43, F44, F45, F46, F47, F48,
					      F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_dtlb_stores'(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12, F13, F14, F15,
						  F16, F17, F18, F19, F20, F21,
						  F22, F23, F24, F25, F26, F27,
						  F28, F29, F30, F31, F32, F33,
						  F34, F35, F36, F37, F38, F39,
						  F40, F41, F42, F43, F44, F45,
						  F46, F47, F48, F49, F50, F51,
						  F52, F53);
'd_field_mesos.v1.PerfStatistics_dtlb_stores'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12, F13,
					      F14, F15, F16, F17, F18, F19, F20,
					      F21, F22, F23, F24, F25, F26, F27,
					      F28, F29, F30, F31, F32, F33, F34,
					      F35, F36, F37, F38, F39, _, F41,
					      F42, F43, F44, F45, F46, F47, F48,
					      F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 F39, NewFValue, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_dtlb_store_misses'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40, F41,
						    F42, F43, F44, F45, F46,
						    F47, F48, F49, F50, F51,
						    F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_dtlb_store_misses'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7, F8, F9, F10, F11,
							F12, F13, F14, F15, F16,
							F17, F18, F19, F20, F21,
							F22, F23, F24, F25, F26,
							F27, F28, F29, F30, F31,
							F32, F33, F34, F35, F36,
							F37, F38, F39, F40, F41,
							F42, F43, F44, F45, F46,
							F47, F48, F49, F50, F51,
							F52, F53);
'd_field_mesos.v1.PerfStatistics_dtlb_store_misses'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40, _, F42,
						    F43, F44, F45, F46, F47,
						    F48, F49, F50, F51, F52,
						    F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 F39, F40, NewFValue, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_dtlb_prefetches'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40, F41, F42,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_dtlb_prefetches'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40, F41, F42,
						      F43, F44, F45, F46, F47,
						      F48, F49, F50, F51, F52,
						      F53);
'd_field_mesos.v1.PerfStatistics_dtlb_prefetches'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40, F41, _,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 F39, F40, F41, NewFValue, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_dtlb_prefetch_misses'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_dtlb_prefetch_misses'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3, F4, F5,
							   F6, F7, F8, F9, F10,
							   F11, F12, F13, F14,
							   F15, F16, F17, F18,
							   F19, F20, F21, F22,
							   F23, F24, F25, F26,
							   F27, F28, F29, F30,
							   F31, F32, F33, F34,
							   F35, F36, F37, F38,
							   F39, F40, F41, F42,
							   F43, F44, F45, F46,
							   F47, F48, F49, F50,
							   F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_dtlb_prefetch_misses'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, _, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 F39, F40, F41, F42, NewFValue,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_itlb_loads'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_itlb_loads'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, F31, F32, F33,
						 F34, F35, F36, F37, F38, F39,
						 F40, F41, F42, F43, F44, F45,
						 F46, F47, F48, F49, F50, F51,
						 F52, F53);
'd_field_mesos.v1.PerfStatistics_itlb_loads'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, _, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 F39, F40, F41, F42, F43,
						 NewFValue, F45, F46, F47, F48,
						 F49, F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_itlb_load_misses'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_itlb_load_misses'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6, F7,
						       F8, F9, F10, F11, F12,
						       F13, F14, F15, F16, F17,
						       F18, F19, F20, F21, F22,
						       F23, F24, F25, F26, F27,
						       F28, F29, F30, F31, F32,
						       F33, F34, F35, F36, F37,
						       F38, F39, F40, F41, F42,
						       F43, F44, F45, F46, F47,
						       F48, F49, F50, F51, F52,
						       F53);
'd_field_mesos.v1.PerfStatistics_itlb_load_misses'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, _, F46, F47,
						   F48, F49, F50, F51, F52,
						   F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 F39, F40, F41, F42, F43, F44,
						 NewFValue, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_branch_loads'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26, F27, F28, F29, F30, F31,
					       F32, F33, F34, F35, F36, F37,
					       F38, F39, F40, F41, F42, F43,
					       F44, F45, F46, F47, F48, F49,
					       F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_branch_loads'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, F11, F12, F13, F14, F15,
						   F16, F17, F18, F19, F20, F21,
						   F22, F23, F24, F25, F26, F27,
						   F28, F29, F30, F31, F32, F33,
						   F34, F35, F36, F37, F38, F39,
						   F40, F41, F42, F43, F44, F45,
						   F46, F47, F48, F49, F50, F51,
						   F52, F53);
'd_field_mesos.v1.PerfStatistics_branch_loads'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26, F27, F28, F29, F30, F31,
					       F32, F33, F34, F35, F36, F37,
					       F38, F39, F40, F41, F42, F43,
					       F44, F45, _, F47, F48, F49, F50,
					       F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 F39, F40, F41, F42, F43, F44,
						 F45, NewFValue, F47, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_branch_load_misses'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40, F41,
						     F42, F43, F44, F45, F46,
						     F47, F48, F49, F50, F51,
						     F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_branch_load_misses'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3, F4, F5, F6,
							 F7, F8, F9, F10, F11,
							 F12, F13, F14, F15,
							 F16, F17, F18, F19,
							 F20, F21, F22, F23,
							 F24, F25, F26, F27,
							 F28, F29, F30, F31,
							 F32, F33, F34, F35,
							 F36, F37, F38, F39,
							 F40, F41, F42, F43,
							 F44, F45, F46, F47,
							 F48, F49, F50, F51,
							 F52, F53);
'd_field_mesos.v1.PerfStatistics_branch_load_misses'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40, F41,
						     F42, F43, F44, F45, F46, _,
						     F48, F49, F50, F51, F52,
						     F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 F39, F40, F41, F42, F43, F44,
						 F45, F46, NewFValue, F48, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_node_loads'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_node_loads'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, F31, F32, F33,
						 F34, F35, F36, F37, F38, F39,
						 F40, F41, F42, F43, F44, F45,
						 F46, F47, F48, F49, F50, F51,
						 F52, F53);
'd_field_mesos.v1.PerfStatistics_node_loads'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, _, F49,
					     F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 F39, F40, F41, F42, F43, F44,
						 F45, F46, F47, NewFValue, F49,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_node_load_misses'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_node_load_misses'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6, F7,
						       F8, F9, F10, F11, F12,
						       F13, F14, F15, F16, F17,
						       F18, F19, F20, F21, F22,
						       F23, F24, F25, F26, F27,
						       F28, F29, F30, F31, F32,
						       F33, F34, F35, F36, F37,
						       F38, F39, F40, F41, F42,
						       F43, F44, F45, F46, F47,
						       F48, F49, F50, F51, F52,
						       F53);
'd_field_mesos.v1.PerfStatistics_node_load_misses'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40, F41,
						   F42, F43, F44, F45, F46, F47,
						   F48, _, F50, F51, F52,
						   F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 F39, F40, F41, F42, F43, F44,
						 F45, F46, F47, F48, NewFValue,
						 F50, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_node_stores'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12, F13,
					      F14, F15, F16, F17, F18, F19, F20,
					      F21, F22, F23, F24, F25, F26, F27,
					      F28, F29, F30, F31, F32, F33, F34,
					      F35, F36, F37, F38, F39, F40, F41,
					      F42, F43, F44, F45, F46, F47, F48,
					      F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_node_stores'(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12, F13, F14, F15,
						  F16, F17, F18, F19, F20, F21,
						  F22, F23, F24, F25, F26, F27,
						  F28, F29, F30, F31, F32, F33,
						  F34, F35, F36, F37, F38, F39,
						  F40, F41, F42, F43, F44, F45,
						  F46, F47, F48, F49, F50, F51,
						  F52, F53);
'd_field_mesos.v1.PerfStatistics_node_stores'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12, F13,
					      F14, F15, F16, F17, F18, F19, F20,
					      F21, F22, F23, F24, F25, F26, F27,
					      F28, F29, F30, F31, F32, F33, F34,
					      F35, F36, F37, F38, F39, F40, F41,
					      F42, F43, F44, F45, F46, F47, F48,
					      F49, _, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 F39, F40, F41, F42, F43, F44,
						 F45, F46, F47, F48, F49,
						 NewFValue, F51, F52, F53).


'd_field_mesos.v1.PerfStatistics_node_store_misses'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40, F41,
						    F42, F43, F44, F45, F46,
						    F47, F48, F49, F50, F51,
						    F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_node_store_misses'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7, F8, F9, F10, F11,
							F12, F13, F14, F15, F16,
							F17, F18, F19, F20, F21,
							F22, F23, F24, F25, F26,
							F27, F28, F29, F30, F31,
							F32, F33, F34, F35, F36,
							F37, F38, F39, F40, F41,
							F42, F43, F44, F45, F46,
							F47, F48, F49, F50, F51,
							F52, F53);
'd_field_mesos.v1.PerfStatistics_node_store_misses'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40, F41,
						    F42, F43, F44, F45, F46,
						    F47, F48, F49, F50, _, F52,
						    F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 F39, F40, F41, F42, F43, F44,
						 F45, F46, F47, F48, F49, F50,
						 NewFValue, F52, F53).


'd_field_mesos.v1.PerfStatistics_node_prefetches'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40, F41, F42,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_node_prefetches'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40, F41, F42,
						      F43, F44, F45, F46, F47,
						      F48, F49, F50, F51, F52,
						      F53);
'd_field_mesos.v1.PerfStatistics_node_prefetches'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40, F41, F42,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, _, F53) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 F39, F40, F41, F42, F43, F44,
						 F45, F46, F47, F48, F49, F50,
						 F51, NewFValue, F53).


'd_field_mesos.v1.PerfStatistics_node_prefetch_misses'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, F53)
    when N < 57 ->
    'd_field_mesos.v1.PerfStatistics_node_prefetch_misses'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3, F4, F5,
							   F6, F7, F8, F9, F10,
							   F11, F12, F13, F14,
							   F15, F16, F17, F18,
							   F19, F20, F21, F22,
							   F23, F24, F25, F26,
							   F27, F28, F29, F30,
							   F31, F32, F33, F34,
							   F35, F36, F37, F38,
							   F39, F40, F41, F42,
							   F43, F44, F45, F46,
							   F47, F48, F49, F50,
							   F51, F52, F53);
'd_field_mesos.v1.PerfStatistics_node_prefetch_misses'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42, F43, F44, F45,
						       F46, F47, F48, F49, F50,
						       F51, F52, _) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6, F7, F8,
						 F9, F10, F11, F12, F13, F14,
						 F15, F16, F17, F18, F19, F20,
						 F21, F22, F23, F24, F25, F26,
						 F27, F28, F29, F30, F31, F32,
						 F33, F34, F35, F36, F37, F38,
						 F39, F40, F41, F42, F43, F44,
						 F45, F46, F47, F48, F49, F50,
						 F51, F52, NewFValue).


'skip_varint_mesos.v1.PerfStatistics'(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42, F43, F44, F45, F46, F47, F48,
				      F49, F50, F51, F52, F53) ->
    'skip_varint_mesos.v1.PerfStatistics'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, F36, F37, F38,
					  F39, F40, F41, F42, F43, F44, F45,
					  F46, F47, F48, F49, F50, F51, F52,
					  F53);
'skip_varint_mesos.v1.PerfStatistics'(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42, F43, F44, F45, F46, F47, F48,
				      F49, F50, F51, F52, F53) ->
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'skip_length_delimited_mesos.v1.PerfStatistics'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, F13,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26, F27, F28, F29, F30, F31,
						F32, F33, F34, F35, F36, F37,
						F38, F39, F40, F41, F42, F43,
						F44, F45, F46, F47, F48, F49,
						F50, F51, F52, F53)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.PerfStatistics'(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, F5, F6, F7, F8,
						    F9, F10, F11, F12, F13, F14,
						    F15, F16, F17, F18, F19,
						    F20, F21, F22, F23, F24,
						    F25, F26, F27, F28, F29,
						    F30, F31, F32, F33, F34,
						    F35, F36, F37, F38, F39,
						    F40, F41, F42, F43, F44,
						    F45, F46, F47, F48, F49,
						    F50, F51, F52, F53);
'skip_length_delimited_mesos.v1.PerfStatistics'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, F13,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26, F27, F28, F29, F30, F31,
						F32, F33, F34, F35, F36, F37,
						F38, F39, F40, F41, F42, F43,
						F44, F45, F46, F47, F48, F49,
						F50, F51, F52, F53) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest2, 0,
						 0, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'skip_32_mesos.v1.PerfStatistics'(<<_:32, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'skip_64_mesos.v1.PerfStatistics'(<<_:64, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    'dfp_read_field_def_mesos.v1.PerfStatistics'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53).


'd_msg_mesos.v1.ResourceStatistics'(Bin) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Bin, 0,
						     0, undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, undefined,
						     undefined, []).

'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<9,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_timestamp'(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<240,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_processes'(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<248,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_threads'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<17,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_cpus_user_time_secs'(Rest,
							      Z1, Z2, F1, F2,
							      F3, F4, F5, F6,
							      F7, F8, F9, F10,
							      F11, F12, F13,
							      F14, F15, F16,
							      F17, F18, F19,
							      F20, F21, F22,
							      F23, F24, F25,
							      F26, F27, F28,
							      F29, F30, F31,
							      F32, F33, F34,
							      F35, F36, F37,
							      F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<25,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_cpus_system_time_secs'(Rest,
								Z1, Z2, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, F36, F37,
								F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<33,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_cpus_limit'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<56,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_cpus_nr_periods'(Rest,
							  Z1, Z2, F1, F2, F3,
							  F4, F5, F6, F7, F8,
							  F9, F10, F11, F12,
							  F13, F14, F15, F16,
							  F17, F18, F19, F20,
							  F21, F22, F23, F24,
							  F25, F26, F27, F28,
							  F29, F30, F31, F32,
							  F33, F34, F35, F36,
							  F37, F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<64,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_cpus_nr_throttled'(Rest,
							    Z1, Z2, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<73,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_cpus_throttled_time_secs'(Rest,
								   Z1, Z2, F1,
								   F2, F3, F4,
								   F5, F6, F7,
								   F8, F9, F10,
								   F11, F12,
								   F13, F14,
								   F15, F16,
								   F17, F18,
								   F19, F20,
								   F21, F22,
								   F23, F24,
								   F25, F26,
								   F27, F28,
								   F29, F30,
								   F31, F32,
								   F33, F34,
								   F35, F36,
								   F37, F38,
								   F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<160,
						   2, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_mem_total_bytes'(Rest,
							  Z1, Z2, F1, F2, F3,
							  F4, F5, F6, F7, F8,
							  F9, F10, F11, F12,
							  F13, F14, F15, F16,
							  F17, F18, F19, F20,
							  F21, F22, F23, F24,
							  F25, F26, F27, F28,
							  F29, F30, F31, F32,
							  F33, F34, F35, F36,
							  F37, F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<168,
						   2, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_mem_total_memsw_bytes'(Rest,
								Z1, Z2, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, F36, F37,
								F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<48,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_mem_limit_bytes'(Rest,
							  Z1, Z2, F1, F2, F3,
							  F4, F5, F6, F7, F8,
							  F9, F10, F11, F12,
							  F13, F14, F15, F16,
							  F17, F18, F19, F20,
							  F21, F22, F23, F24,
							  F25, F26, F27, F28,
							  F29, F30, F31, F32,
							  F33, F34, F35, F36,
							  F37, F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<176,
						   2, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_mem_soft_limit_bytes'(Rest,
							       Z1, Z2, F1, F2,
							       F3, F4, F5, F6,
							       F7, F8, F9, F10,
							       F11, F12, F13,
							       F14, F15, F16,
							       F17, F18, F19,
							       F20, F21, F22,
							       F23, F24, F25,
							       F26, F27, F28,
							       F29, F30, F31,
							       F32, F33, F34,
							       F35, F36, F37,
							       F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<80,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_mem_file_bytes'(Rest,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<88,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_mem_anon_bytes'(Rest,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<184,
						   2, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_mem_cache_bytes'(Rest,
							  Z1, Z2, F1, F2, F3,
							  F4, F5, F6, F7, F8,
							  F9, F10, F11, F12,
							  F13, F14, F15, F16,
							  F17, F18, F19, F20,
							  F21, F22, F23, F24,
							  F25, F26, F27, F28,
							  F29, F30, F31, F32,
							  F33, F34, F35, F36,
							  F37, F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<40,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_mem_rss_bytes'(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39,
							F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<96,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_mem_mapped_file_bytes'(Rest,
								Z1, Z2, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, F36, F37,
								F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<192,
						   2, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_mem_swap_bytes'(Rest,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<128,
						   2, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_mem_low_pressure_counter'(Rest,
								   Z1, Z2, F1,
								   F2, F3, F4,
								   F5, F6, F7,
								   F8, F9, F10,
								   F11, F12,
								   F13, F14,
								   F15, F16,
								   F17, F18,
								   F19, F20,
								   F21, F22,
								   F23, F24,
								   F25, F26,
								   F27, F28,
								   F29, F30,
								   F31, F32,
								   F33, F34,
								   F35, F36,
								   F37, F38,
								   F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<136,
						   2, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_mem_medium_pressure_counter'(Rest,
								      Z1, Z2,
								      F1, F2,
								      F3, F4,
								      F5, F6,
								      F7, F8,
								      F9, F10,
								      F11, F12,
								      F13, F14,
								      F15, F16,
								      F17, F18,
								      F19, F20,
								      F21, F22,
								      F23, F24,
								      F25, F26,
								      F27, F28,
								      F29, F30,
								      F31, F32,
								      F33, F34,
								      F35, F36,
								      F37, F38,
								      F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<144,
						   2, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_mem_critical_pressure_counter'(Rest,
									Z1, Z2,
									F1, F2,
									F3, F4,
									F5, F6,
									F7, F8,
									F9, F10,
									F11,
									F12,
									F13,
									F14,
									F15,
									F16,
									F17,
									F18,
									F19,
									F20,
									F21,
									F22,
									F23,
									F24,
									F25,
									F26,
									F27,
									F28,
									F29,
									F30,
									F31,
									F32,
									F33,
									F34,
									F35,
									F36,
									F37,
									F38,
									F39,
									F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<208,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_disk_limit_bytes'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6, F7, F8,
							   F9, F10, F11, F12,
							   F13, F14, F15, F16,
							   F17, F18, F19, F20,
							   F21, F22, F23, F24,
							   F25, F26, F27, F28,
							   F29, F30, F31, F32,
							   F33, F34, F35, F36,
							   F37, F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<216,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_disk_used_bytes'(Rest,
							  Z1, Z2, F1, F2, F3,
							  F4, F5, F6, F7, F8,
							  F9, F10, F11, F12,
							  F13, F14, F15, F16,
							  F17, F18, F19, F20,
							  F21, F22, F23, F24,
							  F25, F26, F27, F28,
							  F29, F30, F31, F32,
							  F33, F34, F35, F36,
							  F37, F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<106,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_perf'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12, F13, F14, F15,
					       F16, F17, F18, F19, F20, F21,
					       F22, F23, F24, F25, F26, F27,
					       F28, F29, F30, F31, F32, F33,
					       F34, F35, F36, F37, F38, F39,
					       F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<112,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_rx_packets'(Rest,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<120,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_rx_bytes'(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<128,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_rx_errors'(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39,
							F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<136,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_rx_dropped'(Rest,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<144,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_tx_packets'(Rest,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<152,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_tx_bytes'(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<160,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_tx_errors'(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39,
							F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<168,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_tx_dropped'(Rest,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<177,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_tcp_rtt_microsecs_p50'(Rest,
								    Z1, Z2, F1,
								    F2, F3, F4,
								    F5, F6, F7,
								    F8, F9, F10,
								    F11, F12,
								    F13, F14,
								    F15, F16,
								    F17, F18,
								    F19, F20,
								    F21, F22,
								    F23, F24,
								    F25, F26,
								    F27, F28,
								    F29, F30,
								    F31, F32,
								    F33, F34,
								    F35, F36,
								    F37, F38,
								    F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<185,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_tcp_rtt_microsecs_p90'(Rest,
								    Z1, Z2, F1,
								    F2, F3, F4,
								    F5, F6, F7,
								    F8, F9, F10,
								    F11, F12,
								    F13, F14,
								    F15, F16,
								    F17, F18,
								    F19, F20,
								    F21, F22,
								    F23, F24,
								    F25, F26,
								    F27, F28,
								    F29, F30,
								    F31, F32,
								    F33, F34,
								    F35, F36,
								    F37, F38,
								    F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<193,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_tcp_rtt_microsecs_p95'(Rest,
								    Z1, Z2, F1,
								    F2, F3, F4,
								    F5, F6, F7,
								    F8, F9, F10,
								    F11, F12,
								    F13, F14,
								    F15, F16,
								    F17, F18,
								    F19, F20,
								    F21, F22,
								    F23, F24,
								    F25, F26,
								    F27, F28,
								    F29, F30,
								    F31, F32,
								    F33, F34,
								    F35, F36,
								    F37, F38,
								    F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<201,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_tcp_rtt_microsecs_p99'(Rest,
								    Z1, Z2, F1,
								    F2, F3, F4,
								    F5, F6, F7,
								    F8, F9, F10,
								    F11, F12,
								    F13, F14,
								    F15, F16,
								    F17, F18,
								    F19, F20,
								    F21, F22,
								    F23, F24,
								    F25, F26,
								    F27, F28,
								    F29, F30,
								    F31, F32,
								    F33, F34,
								    F35, F36,
								    F37, F38,
								    F39, F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<225,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_tcp_active_connections'(Rest,
								     Z1, Z2, F1,
								     F2, F3, F4,
								     F5, F6, F7,
								     F8, F9,
								     F10, F11,
								     F12, F13,
								     F14, F15,
								     F16, F17,
								     F18, F19,
								     F20, F21,
								     F22, F23,
								     F24, F25,
								     F26, F27,
								     F28, F29,
								     F30, F31,
								     F32, F33,
								     F34, F35,
								     F36, F37,
								     F38, F39,
								     F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<233,
						   1, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_tcp_time_wait_connections'(Rest,
									Z1, Z2,
									F1, F2,
									F3, F4,
									F5, F6,
									F7, F8,
									F9, F10,
									F11,
									F12,
									F13,
									F14,
									F15,
									F16,
									F17,
									F18,
									F19,
									F20,
									F21,
									F22,
									F23,
									F24,
									F25,
									F26,
									F27,
									F28,
									F29,
									F30,
									F31,
									F32,
									F33,
									F34,
									F35,
									F36,
									F37,
									F38,
									F39,
									F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<154,
						   2, Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'd_field_mesos.v1.ResourceStatistics_net_traffic_control_statistics'(Rest,
									 Z1, Z2,
									 F1, F2,
									 F3, F4,
									 F5, F6,
									 F7, F8,
									 F9,
									 F10,
									 F11,
									 F12,
									 F13,
									 F14,
									 F15,
									 F16,
									 F17,
									 F18,
									 F19,
									 F20,
									 F21,
									 F22,
									 F23,
									 F24,
									 F25,
									 F26,
									 F27,
									 F28,
									 F29,
									 F30,
									 F31,
									 F32,
									 F33,
									 F34,
									 F35,
									 F36,
									 F37,
									 F38,
									 F39,
									 F40);
'dfp_read_field_def_mesos.v1.ResourceStatistics'(<<>>,
						 0, 0, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    #'mesos.v1.ResourceStatistics'{timestamp = F1,
				   processes = F2, threads = F3,
				   cpus_user_time_secs = F4,
				   cpus_system_time_secs = F5, cpus_limit = F6,
				   cpus_nr_periods = F7, cpus_nr_throttled = F8,
				   cpus_throttled_time_secs = F9,
				   mem_total_bytes = F10,
				   mem_total_memsw_bytes = F11,
				   mem_limit_bytes = F12,
				   mem_soft_limit_bytes = F13,
				   mem_file_bytes = F14, mem_anon_bytes = F15,
				   mem_cache_bytes = F16, mem_rss_bytes = F17,
				   mem_mapped_file_bytes = F18,
				   mem_swap_bytes = F19,
				   mem_low_pressure_counter = F20,
				   mem_medium_pressure_counter = F21,
				   mem_critical_pressure_counter = F22,
				   disk_limit_bytes = F23,
				   disk_used_bytes = F24, perf = F25,
				   net_rx_packets = F26, net_rx_bytes = F27,
				   net_rx_errors = F28, net_rx_dropped = F29,
				   net_tx_packets = F30, net_tx_bytes = F31,
				   net_tx_errors = F32, net_tx_dropped = F33,
				   net_tcp_rtt_microsecs_p50 = F34,
				   net_tcp_rtt_microsecs_p90 = F35,
				   net_tcp_rtt_microsecs_p95 = F36,
				   net_tcp_rtt_microsecs_p99 = F37,
				   net_tcp_active_connections = F38,
				   net_tcp_time_wait_connections = F39,
				   net_traffic_control_statistics =
				       lists:reverse(F40)};
'dfp_read_field_def_mesos.v1.ResourceStatistics'(Other,
						 Z1, Z2, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'dg_read_field_def_mesos.v1.ResourceStatistics'(Other,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40).

'dg_read_field_def_mesos.v1.ResourceStatistics'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, F13,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26, F27, F28, F29, F30, F31,
						F32, F33, F34, F35, F36, F37,
						F38, F39, F40)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, F5, F6, F7, F8,
						    F9, F10, F11, F12, F13, F14,
						    F15, F16, F17, F18, F19,
						    F20, F21, F22, F23, F24,
						    F25, F26, F27, F28, F29,
						    F30, F31, F32, F33, F34,
						    F35, F36, F37, F38, F39,
						    F40);
'dg_read_field_def_mesos.v1.ResourceStatistics'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, F13,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26, F27, F28, F29, F30, F31,
						F32, F33, F34, F35, F36, F37,
						F38, F39, F40) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  'd_field_mesos.v1.ResourceStatistics_timestamp'(Rest, 0,
							  0, F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16, F17, F18,
							  F19, F20, F21, F22,
							  F23, F24, F25, F26,
							  F27, F28, F29, F30,
							  F31, F32, F33, F34,
							  F35, F36, F37, F38,
							  F39, F40);
      240 ->
	  'd_field_mesos.v1.ResourceStatistics_processes'(Rest, 0,
							  0, F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16, F17, F18,
							  F19, F20, F21, F22,
							  F23, F24, F25, F26,
							  F27, F28, F29, F30,
							  F31, F32, F33, F34,
							  F35, F36, F37, F38,
							  F39, F40);
      248 ->
	  'd_field_mesos.v1.ResourceStatistics_threads'(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39,
							F40);
      17 ->
	  'd_field_mesos.v1.ResourceStatistics_cpus_user_time_secs'(Rest,
								    0, 0, F1,
								    F2, F3, F4,
								    F5, F6, F7,
								    F8, F9, F10,
								    F11, F12,
								    F13, F14,
								    F15, F16,
								    F17, F18,
								    F19, F20,
								    F21, F22,
								    F23, F24,
								    F25, F26,
								    F27, F28,
								    F29, F30,
								    F31, F32,
								    F33, F34,
								    F35, F36,
								    F37, F38,
								    F39, F40);
      25 ->
	  'd_field_mesos.v1.ResourceStatistics_cpus_system_time_secs'(Rest,
								      0, 0, F1,
								      F2, F3,
								      F4, F5,
								      F6, F7,
								      F8, F9,
								      F10, F11,
								      F12, F13,
								      F14, F15,
								      F16, F17,
								      F18, F19,
								      F20, F21,
								      F22, F23,
								      F24, F25,
								      F26, F27,
								      F28, F29,
								      F30, F31,
								      F32, F33,
								      F34, F35,
								      F36, F37,
								      F38, F39,
								      F40);
      33 ->
	  'd_field_mesos.v1.ResourceStatistics_cpus_limit'(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10, F11, F12, F13,
							   F14, F15, F16, F17,
							   F18, F19, F20, F21,
							   F22, F23, F24, F25,
							   F26, F27, F28, F29,
							   F30, F31, F32, F33,
							   F34, F35, F36, F37,
							   F38, F39, F40);
      56 ->
	  'd_field_mesos.v1.ResourceStatistics_cpus_nr_periods'(Rest,
								0, 0, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, F36, F37,
								F38, F39, F40);
      64 ->
	  'd_field_mesos.v1.ResourceStatistics_cpus_nr_throttled'(Rest,
								  0, 0, F1, F2,
								  F3, F4, F5,
								  F6, F7, F8,
								  F9, F10, F11,
								  F12, F13, F14,
								  F15, F16, F17,
								  F18, F19, F20,
								  F21, F22, F23,
								  F24, F25, F26,
								  F27, F28, F29,
								  F30, F31, F32,
								  F33, F34, F35,
								  F36, F37, F38,
								  F39, F40);
      73 ->
	  'd_field_mesos.v1.ResourceStatistics_cpus_throttled_time_secs'(Rest,
									 0, 0,
									 F1, F2,
									 F3, F4,
									 F5, F6,
									 F7, F8,
									 F9,
									 F10,
									 F11,
									 F12,
									 F13,
									 F14,
									 F15,
									 F16,
									 F17,
									 F18,
									 F19,
									 F20,
									 F21,
									 F22,
									 F23,
									 F24,
									 F25,
									 F26,
									 F27,
									 F28,
									 F29,
									 F30,
									 F31,
									 F32,
									 F33,
									 F34,
									 F35,
									 F36,
									 F37,
									 F38,
									 F39,
									 F40);
      288 ->
	  'd_field_mesos.v1.ResourceStatistics_mem_total_bytes'(Rest,
								0, 0, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, F36, F37,
								F38, F39, F40);
      296 ->
	  'd_field_mesos.v1.ResourceStatistics_mem_total_memsw_bytes'(Rest,
								      0, 0, F1,
								      F2, F3,
								      F4, F5,
								      F6, F7,
								      F8, F9,
								      F10, F11,
								      F12, F13,
								      F14, F15,
								      F16, F17,
								      F18, F19,
								      F20, F21,
								      F22, F23,
								      F24, F25,
								      F26, F27,
								      F28, F29,
								      F30, F31,
								      F32, F33,
								      F34, F35,
								      F36, F37,
								      F38, F39,
								      F40);
      48 ->
	  'd_field_mesos.v1.ResourceStatistics_mem_limit_bytes'(Rest,
								0, 0, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, F36, F37,
								F38, F39, F40);
      304 ->
	  'd_field_mesos.v1.ResourceStatistics_mem_soft_limit_bytes'(Rest,
								     0, 0, F1,
								     F2, F3, F4,
								     F5, F6, F7,
								     F8, F9,
								     F10, F11,
								     F12, F13,
								     F14, F15,
								     F16, F17,
								     F18, F19,
								     F20, F21,
								     F22, F23,
								     F24, F25,
								     F26, F27,
								     F28, F29,
								     F30, F31,
								     F32, F33,
								     F34, F35,
								     F36, F37,
								     F38, F39,
								     F40);
      80 ->
	  'd_field_mesos.v1.ResourceStatistics_mem_file_bytes'(Rest,
							       0, 0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10, F11,
							       F12, F13, F14,
							       F15, F16, F17,
							       F18, F19, F20,
							       F21, F22, F23,
							       F24, F25, F26,
							       F27, F28, F29,
							       F30, F31, F32,
							       F33, F34, F35,
							       F36, F37, F38,
							       F39, F40);
      88 ->
	  'd_field_mesos.v1.ResourceStatistics_mem_anon_bytes'(Rest,
							       0, 0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10, F11,
							       F12, F13, F14,
							       F15, F16, F17,
							       F18, F19, F20,
							       F21, F22, F23,
							       F24, F25, F26,
							       F27, F28, F29,
							       F30, F31, F32,
							       F33, F34, F35,
							       F36, F37, F38,
							       F39, F40);
      312 ->
	  'd_field_mesos.v1.ResourceStatistics_mem_cache_bytes'(Rest,
								0, 0, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, F36, F37,
								F38, F39, F40);
      40 ->
	  'd_field_mesos.v1.ResourceStatistics_mem_rss_bytes'(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7,
							      F8, F9, F10, F11,
							      F12, F13, F14,
							      F15, F16, F17,
							      F18, F19, F20,
							      F21, F22, F23,
							      F24, F25, F26,
							      F27, F28, F29,
							      F30, F31, F32,
							      F33, F34, F35,
							      F36, F37, F38,
							      F39, F40);
      96 ->
	  'd_field_mesos.v1.ResourceStatistics_mem_mapped_file_bytes'(Rest,
								      0, 0, F1,
								      F2, F3,
								      F4, F5,
								      F6, F7,
								      F8, F9,
								      F10, F11,
								      F12, F13,
								      F14, F15,
								      F16, F17,
								      F18, F19,
								      F20, F21,
								      F22, F23,
								      F24, F25,
								      F26, F27,
								      F28, F29,
								      F30, F31,
								      F32, F33,
								      F34, F35,
								      F36, F37,
								      F38, F39,
								      F40);
      320 ->
	  'd_field_mesos.v1.ResourceStatistics_mem_swap_bytes'(Rest,
							       0, 0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10, F11,
							       F12, F13, F14,
							       F15, F16, F17,
							       F18, F19, F20,
							       F21, F22, F23,
							       F24, F25, F26,
							       F27, F28, F29,
							       F30, F31, F32,
							       F33, F34, F35,
							       F36, F37, F38,
							       F39, F40);
      256 ->
	  'd_field_mesos.v1.ResourceStatistics_mem_low_pressure_counter'(Rest,
									 0, 0,
									 F1, F2,
									 F3, F4,
									 F5, F6,
									 F7, F8,
									 F9,
									 F10,
									 F11,
									 F12,
									 F13,
									 F14,
									 F15,
									 F16,
									 F17,
									 F18,
									 F19,
									 F20,
									 F21,
									 F22,
									 F23,
									 F24,
									 F25,
									 F26,
									 F27,
									 F28,
									 F29,
									 F30,
									 F31,
									 F32,
									 F33,
									 F34,
									 F35,
									 F36,
									 F37,
									 F38,
									 F39,
									 F40);
      264 ->
	  'd_field_mesos.v1.ResourceStatistics_mem_medium_pressure_counter'(Rest,
									    0,
									    0,
									    F1,
									    F2,
									    F3,
									    F4,
									    F5,
									    F6,
									    F7,
									    F8,
									    F9,
									    F10,
									    F11,
									    F12,
									    F13,
									    F14,
									    F15,
									    F16,
									    F17,
									    F18,
									    F19,
									    F20,
									    F21,
									    F22,
									    F23,
									    F24,
									    F25,
									    F26,
									    F27,
									    F28,
									    F29,
									    F30,
									    F31,
									    F32,
									    F33,
									    F34,
									    F35,
									    F36,
									    F37,
									    F38,
									    F39,
									    F40);
      272 ->
	  'd_field_mesos.v1.ResourceStatistics_mem_critical_pressure_counter'(Rest,
									      0,
									      0,
									      F1,
									      F2,
									      F3,
									      F4,
									      F5,
									      F6,
									      F7,
									      F8,
									      F9,
									      F10,
									      F11,
									      F12,
									      F13,
									      F14,
									      F15,
									      F16,
									      F17,
									      F18,
									      F19,
									      F20,
									      F21,
									      F22,
									      F23,
									      F24,
									      F25,
									      F26,
									      F27,
									      F28,
									      F29,
									      F30,
									      F31,
									      F32,
									      F33,
									      F34,
									      F35,
									      F36,
									      F37,
									      F38,
									      F39,
									      F40);
      208 ->
	  'd_field_mesos.v1.ResourceStatistics_disk_limit_bytes'(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5, F6,
								 F7, F8, F9,
								 F10, F11, F12,
								 F13, F14, F15,
								 F16, F17, F18,
								 F19, F20, F21,
								 F22, F23, F24,
								 F25, F26, F27,
								 F28, F29, F30,
								 F31, F32, F33,
								 F34, F35, F36,
								 F37, F38, F39,
								 F40);
      216 ->
	  'd_field_mesos.v1.ResourceStatistics_disk_used_bytes'(Rest,
								0, 0, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, F36, F37,
								F38, F39, F40);
      106 ->
	  'd_field_mesos.v1.ResourceStatistics_perf'(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40);
      112 ->
	  'd_field_mesos.v1.ResourceStatistics_net_rx_packets'(Rest,
							       0, 0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10, F11,
							       F12, F13, F14,
							       F15, F16, F17,
							       F18, F19, F20,
							       F21, F22, F23,
							       F24, F25, F26,
							       F27, F28, F29,
							       F30, F31, F32,
							       F33, F34, F35,
							       F36, F37, F38,
							       F39, F40);
      120 ->
	  'd_field_mesos.v1.ResourceStatistics_net_rx_bytes'(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39,
							     F40);
      128 ->
	  'd_field_mesos.v1.ResourceStatistics_net_rx_errors'(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7,
							      F8, F9, F10, F11,
							      F12, F13, F14,
							      F15, F16, F17,
							      F18, F19, F20,
							      F21, F22, F23,
							      F24, F25, F26,
							      F27, F28, F29,
							      F30, F31, F32,
							      F33, F34, F35,
							      F36, F37, F38,
							      F39, F40);
      136 ->
	  'd_field_mesos.v1.ResourceStatistics_net_rx_dropped'(Rest,
							       0, 0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10, F11,
							       F12, F13, F14,
							       F15, F16, F17,
							       F18, F19, F20,
							       F21, F22, F23,
							       F24, F25, F26,
							       F27, F28, F29,
							       F30, F31, F32,
							       F33, F34, F35,
							       F36, F37, F38,
							       F39, F40);
      144 ->
	  'd_field_mesos.v1.ResourceStatistics_net_tx_packets'(Rest,
							       0, 0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10, F11,
							       F12, F13, F14,
							       F15, F16, F17,
							       F18, F19, F20,
							       F21, F22, F23,
							       F24, F25, F26,
							       F27, F28, F29,
							       F30, F31, F32,
							       F33, F34, F35,
							       F36, F37, F38,
							       F39, F40);
      152 ->
	  'd_field_mesos.v1.ResourceStatistics_net_tx_bytes'(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39,
							     F40);
      160 ->
	  'd_field_mesos.v1.ResourceStatistics_net_tx_errors'(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7,
							      F8, F9, F10, F11,
							      F12, F13, F14,
							      F15, F16, F17,
							      F18, F19, F20,
							      F21, F22, F23,
							      F24, F25, F26,
							      F27, F28, F29,
							      F30, F31, F32,
							      F33, F34, F35,
							      F36, F37, F38,
							      F39, F40);
      168 ->
	  'd_field_mesos.v1.ResourceStatistics_net_tx_dropped'(Rest,
							       0, 0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10, F11,
							       F12, F13, F14,
							       F15, F16, F17,
							       F18, F19, F20,
							       F21, F22, F23,
							       F24, F25, F26,
							       F27, F28, F29,
							       F30, F31, F32,
							       F33, F34, F35,
							       F36, F37, F38,
							       F39, F40);
      177 ->
	  'd_field_mesos.v1.ResourceStatistics_net_tcp_rtt_microsecs_p50'(Rest,
									  0, 0,
									  F1,
									  F2,
									  F3,
									  F4,
									  F5,
									  F6,
									  F7,
									  F8,
									  F9,
									  F10,
									  F11,
									  F12,
									  F13,
									  F14,
									  F15,
									  F16,
									  F17,
									  F18,
									  F19,
									  F20,
									  F21,
									  F22,
									  F23,
									  F24,
									  F25,
									  F26,
									  F27,
									  F28,
									  F29,
									  F30,
									  F31,
									  F32,
									  F33,
									  F34,
									  F35,
									  F36,
									  F37,
									  F38,
									  F39,
									  F40);
      185 ->
	  'd_field_mesos.v1.ResourceStatistics_net_tcp_rtt_microsecs_p90'(Rest,
									  0, 0,
									  F1,
									  F2,
									  F3,
									  F4,
									  F5,
									  F6,
									  F7,
									  F8,
									  F9,
									  F10,
									  F11,
									  F12,
									  F13,
									  F14,
									  F15,
									  F16,
									  F17,
									  F18,
									  F19,
									  F20,
									  F21,
									  F22,
									  F23,
									  F24,
									  F25,
									  F26,
									  F27,
									  F28,
									  F29,
									  F30,
									  F31,
									  F32,
									  F33,
									  F34,
									  F35,
									  F36,
									  F37,
									  F38,
									  F39,
									  F40);
      193 ->
	  'd_field_mesos.v1.ResourceStatistics_net_tcp_rtt_microsecs_p95'(Rest,
									  0, 0,
									  F1,
									  F2,
									  F3,
									  F4,
									  F5,
									  F6,
									  F7,
									  F8,
									  F9,
									  F10,
									  F11,
									  F12,
									  F13,
									  F14,
									  F15,
									  F16,
									  F17,
									  F18,
									  F19,
									  F20,
									  F21,
									  F22,
									  F23,
									  F24,
									  F25,
									  F26,
									  F27,
									  F28,
									  F29,
									  F30,
									  F31,
									  F32,
									  F33,
									  F34,
									  F35,
									  F36,
									  F37,
									  F38,
									  F39,
									  F40);
      201 ->
	  'd_field_mesos.v1.ResourceStatistics_net_tcp_rtt_microsecs_p99'(Rest,
									  0, 0,
									  F1,
									  F2,
									  F3,
									  F4,
									  F5,
									  F6,
									  F7,
									  F8,
									  F9,
									  F10,
									  F11,
									  F12,
									  F13,
									  F14,
									  F15,
									  F16,
									  F17,
									  F18,
									  F19,
									  F20,
									  F21,
									  F22,
									  F23,
									  F24,
									  F25,
									  F26,
									  F27,
									  F28,
									  F29,
									  F30,
									  F31,
									  F32,
									  F33,
									  F34,
									  F35,
									  F36,
									  F37,
									  F38,
									  F39,
									  F40);
      225 ->
	  'd_field_mesos.v1.ResourceStatistics_net_tcp_active_connections'(Rest,
									   0, 0,
									   F1,
									   F2,
									   F3,
									   F4,
									   F5,
									   F6,
									   F7,
									   F8,
									   F9,
									   F10,
									   F11,
									   F12,
									   F13,
									   F14,
									   F15,
									   F16,
									   F17,
									   F18,
									   F19,
									   F20,
									   F21,
									   F22,
									   F23,
									   F24,
									   F25,
									   F26,
									   F27,
									   F28,
									   F29,
									   F30,
									   F31,
									   F32,
									   F33,
									   F34,
									   F35,
									   F36,
									   F37,
									   F38,
									   F39,
									   F40);
      233 ->
	  'd_field_mesos.v1.ResourceStatistics_net_tcp_time_wait_connections'(Rest,
									      0,
									      0,
									      F1,
									      F2,
									      F3,
									      F4,
									      F5,
									      F6,
									      F7,
									      F8,
									      F9,
									      F10,
									      F11,
									      F12,
									      F13,
									      F14,
									      F15,
									      F16,
									      F17,
									      F18,
									      F19,
									      F20,
									      F21,
									      F22,
									      F23,
									      F24,
									      F25,
									      F26,
									      F27,
									      F28,
									      F29,
									      F30,
									      F31,
									      F32,
									      F33,
									      F34,
									      F35,
									      F36,
									      F37,
									      F38,
									      F39,
									      F40);
      282 ->
	  'd_field_mesos.v1.ResourceStatistics_net_traffic_control_statistics'(Rest,
									       0,
									       0,
									       F1,
									       F2,
									       F3,
									       F4,
									       F5,
									       F6,
									       F7,
									       F8,
									       F9,
									       F10,
									       F11,
									       F12,
									       F13,
									       F14,
									       F15,
									       F16,
									       F17,
									       F18,
									       F19,
									       F20,
									       F21,
									       F22,
									       F23,
									       F24,
									       F25,
									       F26,
									       F27,
									       F28,
									       F29,
									       F30,
									       F31,
									       F32,
									       F33,
									       F34,
									       F35,
									       F36,
									       F37,
									       F38,
									       F39,
									       F40);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.ResourceStatistics'(Rest, 0, 0,
							  F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16, F17, F18,
							  F19, F20, F21, F22,
							  F23, F24, F25, F26,
							  F27, F28, F29, F30,
							  F31, F32, F33, F34,
							  F35, F36, F37, F38,
							  F39, F40);
	    1 ->
		'skip_64_mesos.v1.ResourceStatistics'(Rest, 0, 0, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40);
	    2 ->
		'skip_length_delimited_mesos.v1.ResourceStatistics'(Rest,
								    0, 0, F1,
								    F2, F3, F4,
								    F5, F6, F7,
								    F8, F9, F10,
								    F11, F12,
								    F13, F14,
								    F15, F16,
								    F17, F18,
								    F19, F20,
								    F21, F22,
								    F23, F24,
								    F25, F26,
								    F27, F28,
								    F29, F30,
								    F31, F32,
								    F33, F34,
								    F35, F36,
								    F37, F38,
								    F39, F40);
	    5 ->
		'skip_32_mesos.v1.ResourceStatistics'(Rest, 0, 0, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40)
	  end
    end;
'dg_read_field_def_mesos.v1.ResourceStatistics'(<<>>, 0,
						0, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16, F17, F18, F19, F20,
						F21, F22, F23, F24, F25, F26,
						F27, F28, F29, F30, F31, F32,
						F33, F34, F35, F36, F37, F38,
						F39, F40) ->
    #'mesos.v1.ResourceStatistics'{timestamp = F1,
				   processes = F2, threads = F3,
				   cpus_user_time_secs = F4,
				   cpus_system_time_secs = F5, cpus_limit = F6,
				   cpus_nr_periods = F7, cpus_nr_throttled = F8,
				   cpus_throttled_time_secs = F9,
				   mem_total_bytes = F10,
				   mem_total_memsw_bytes = F11,
				   mem_limit_bytes = F12,
				   mem_soft_limit_bytes = F13,
				   mem_file_bytes = F14, mem_anon_bytes = F15,
				   mem_cache_bytes = F16, mem_rss_bytes = F17,
				   mem_mapped_file_bytes = F18,
				   mem_swap_bytes = F19,
				   mem_low_pressure_counter = F20,
				   mem_medium_pressure_counter = F21,
				   mem_critical_pressure_counter = F22,
				   disk_limit_bytes = F23,
				   disk_used_bytes = F24, perf = F25,
				   net_rx_packets = F26, net_rx_bytes = F27,
				   net_rx_errors = F28, net_rx_dropped = F29,
				   net_tx_packets = F30, net_tx_bytes = F31,
				   net_tx_errors = F32, net_tx_dropped = F33,
				   net_tcp_rtt_microsecs_p50 = F34,
				   net_tcp_rtt_microsecs_p90 = F35,
				   net_tcp_rtt_microsecs_p95 = F36,
				   net_tcp_rtt_microsecs_p99 = F37,
				   net_tcp_active_connections = F38,
				   net_tcp_time_wait_connections = F39,
				   net_traffic_control_statistics =
				       lists:reverse(F40)}.

'd_field_mesos.v1.ResourceStatistics_timestamp'(<<Value:64/little-float,
						  Rest/binary>>,
						Z1, Z2, _, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, F13,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26, F27, F28, F29, F30, F31,
						F32, F33, F34, F35, F36, F37,
						F38, F39, F40) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     Z1, Z2, Value, F2, F3, F4,
						     F5, F6, F7, F8, F9, F10,
						     F11, F12, F13, F14, F15,
						     F16, F17, F18, F19, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_processes'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, F13,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26, F27, F28, F29, F30, F31,
						F32, F33, F34, F35, F36, F37,
						F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_processes'(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, F5, F6, F7, F8,
						    F9, F10, F11, F12, F13, F14,
						    F15, F16, F17, F18, F19,
						    F20, F21, F22, F23, F24,
						    F25, F26, F27, F28, F29,
						    F30, F31, F32, F33, F34,
						    F35, F36, F37, F38, F39,
						    F40);
'd_field_mesos.v1.ResourceStatistics_processes'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, _, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, F13,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26, F27, F28, F29, F30, F31,
						F32, F33, F34, F35, F36, F37,
						F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, NewFValue, F3,
						     F4, F5, F6, F7, F8, F9,
						     F10, F11, F12, F13, F14,
						     F15, F16, F17, F18, F19,
						     F20, F21, F22, F23, F24,
						     F25, F26, F27, F28, F29,
						     F30, F31, F32, F33, F34,
						     F35, F36, F37, F38, F39,
						     F40).


'd_field_mesos.v1.ResourceStatistics_threads'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12, F13,
					      F14, F15, F16, F17, F18, F19, F20,
					      F21, F22, F23, F24, F25, F26, F27,
					      F28, F29, F30, F31, F32, F33, F34,
					      F35, F36, F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_threads'(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12, F13, F14, F15,
						  F16, F17, F18, F19, F20, F21,
						  F22, F23, F24, F25, F26, F27,
						  F28, F29, F30, F31, F32, F33,
						  F34, F35, F36, F37, F38, F39,
						  F40);
'd_field_mesos.v1.ResourceStatistics_threads'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, _, F4, F5, F6, F7,
					      F8, F9, F10, F11, F12, F13, F14,
					      F15, F16, F17, F18, F19, F20, F21,
					      F22, F23, F24, F25, F26, F27, F28,
					      F29, F30, F31, F32, F33, F34, F35,
					      F36, F37, F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, NewFValue,
						     F4, F5, F6, F7, F8, F9,
						     F10, F11, F12, F13, F14,
						     F15, F16, F17, F18, F19,
						     F20, F21, F22, F23, F24,
						     F25, F26, F27, F28, F29,
						     F30, F31, F32, F33, F34,
						     F35, F36, F37, F38, F39,
						     F40).


'd_field_mesos.v1.ResourceStatistics_cpus_user_time_secs'(<<Value:64/little-float,
							    Rest/binary>>,
							  Z1, Z2, F1, F2, F3, _,
							  F5, F6, F7, F8, F9,
							  F10, F11, F12, F13,
							  F14, F15, F16, F17,
							  F18, F19, F20, F21,
							  F22, F23, F24, F25,
							  F26, F27, F28, F29,
							  F30, F31, F32, F33,
							  F34, F35, F36, F37,
							  F38, F39, F40) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     Z1, Z2, F1, F2, F3, Value,
						     F5, F6, F7, F8, F9, F10,
						     F11, F12, F13, F14, F15,
						     F16, F17, F18, F19, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_cpus_system_time_secs'(<<Value:64/little-float,
							      Rest/binary>>,
							    Z1, Z2, F1, F2, F3,
							    F4, _, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39,
							    F40) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     Z1, Z2, F1, F2, F3, F4,
						     Value, F6, F7, F8, F9, F10,
						     F11, F12, F13, F14, F15,
						     F16, F17, F18, F19, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_cpus_limit'(<<Value:64/little-float,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5, _,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     Value, F7, F8, F9, F10,
						     F11, F12, F13, F14, F15,
						     F16, F17, F18, F19, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_cpus_nr_periods'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_cpus_nr_periods'(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16, F17, F18,
							  F19, F20, F21, F22,
							  F23, F24, F25, F26,
							  F27, F28, F29, F30,
							  F31, F32, F33, F34,
							  F35, F36, F37, F38,
							  F39, F40);
'd_field_mesos.v1.ResourceStatistics_cpus_nr_periods'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, _, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39,
						      F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, NewFValue, F8, F9, F10,
						     F11, F12, F13, F14, F15,
						     F16, F17, F18, F19, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_cpus_nr_throttled'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_cpus_nr_throttled'(Rest,
							    N + 7,
							    X bsl N + Acc, F1,
							    F2, F3, F4, F5, F6,
							    F7, F8, F9, F10,
							    F11, F12, F13, F14,
							    F15, F16, F17, F18,
							    F19, F20, F21, F22,
							    F23, F24, F25, F26,
							    F27, F28, F29, F30,
							    F31, F32, F33, F34,
							    F35, F36, F37, F38,
							    F39, F40);
'd_field_mesos.v1.ResourceStatistics_cpus_nr_throttled'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3, F4,
							F5, F6, F7, _, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39,
							F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, NewFValue, F9, F10,
						     F11, F12, F13, F14, F15,
						     F16, F17, F18, F19, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_cpus_throttled_time_secs'(<<Value:64/little-float,
								 Rest/binary>>,
							       Z1, Z2, F1, F2,
							       F3, F4, F5, F6,
							       F7, F8, _, F10,
							       F11, F12, F13,
							       F14, F15, F16,
							       F17, F18, F19,
							       F20, F21, F22,
							       F23, F24, F25,
							       F26, F27, F28,
							       F29, F30, F31,
							       F32, F33, F34,
							       F35, F36, F37,
							       F38, F39, F40) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, Value, F10,
						     F11, F12, F13, F14, F15,
						     F16, F17, F18, F19, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_mem_total_bytes'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_mem_total_bytes'(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16, F17, F18,
							  F19, F20, F21, F22,
							  F23, F24, F25, F26,
							  F27, F28, F29, F30,
							  F31, F32, F33, F34,
							  F35, F36, F37, F38,
							  F39, F40);
'd_field_mesos.v1.ResourceStatistics_mem_total_bytes'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, _,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39,
						      F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, NewFValue,
						     F11, F12, F13, F14, F15,
						     F16, F17, F18, F19, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_mem_total_memsw_bytes'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_mem_total_memsw_bytes'(Rest,
								N + 7,
								X bsl N + Acc,
								F1, F2, F3, F4,
								F5, F6, F7, F8,
								F9, F10, F11,
								F12, F13, F14,
								F15, F16, F17,
								F18, F19, F20,
								F21, F22, F23,
								F24, F25, F26,
								F27, F28, F29,
								F30, F31, F32,
								F33, F34, F35,
								F36, F37, F38,
								F39, F40);
'd_field_mesos.v1.ResourceStatistics_mem_total_memsw_bytes'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, _, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39,
							    F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10,
						     NewFValue, F12, F13, F14,
						     F15, F16, F17, F18, F19,
						     F20, F21, F22, F23, F24,
						     F25, F26, F27, F28, F29,
						     F30, F31, F32, F33, F34,
						     F35, F36, F37, F38, F39,
						     F40).


'd_field_mesos.v1.ResourceStatistics_mem_limit_bytes'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_mem_limit_bytes'(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16, F17, F18,
							  F19, F20, F21, F22,
							  F23, F24, F25, F26,
							  F27, F28, F29, F30,
							  F31, F32, F33, F34,
							  F35, F36, F37, F38,
							  F39, F40);
'd_field_mesos.v1.ResourceStatistics_mem_limit_bytes'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, _, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39,
						      F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     NewFValue, F13, F14, F15,
						     F16, F17, F18, F19, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_mem_soft_limit_bytes'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1, F2, F3,
							   F4, F5, F6, F7, F8,
							   F9, F10, F11, F12,
							   F13, F14, F15, F16,
							   F17, F18, F19, F20,
							   F21, F22, F23, F24,
							   F25, F26, F27, F28,
							   F29, F30, F31, F32,
							   F33, F34, F35, F36,
							   F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_mem_soft_limit_bytes'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F1, F2, F3, F4,
							       F5, F6, F7, F8,
							       F9, F10, F11,
							       F12, F13, F14,
							       F15, F16, F17,
							       F18, F19, F20,
							       F21, F22, F23,
							       F24, F25, F26,
							       F27, F28, F29,
							       F30, F31, F32,
							       F33, F34, F35,
							       F36, F37, F38,
							       F39, F40);
'd_field_mesos.v1.ResourceStatistics_mem_soft_limit_bytes'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F1, F2, F3,
							   F4, F5, F6, F7, F8,
							   F9, F10, F11, F12, _,
							   F14, F15, F16, F17,
							   F18, F19, F20, F21,
							   F22, F23, F24, F25,
							   F26, F27, F28, F29,
							   F30, F31, F32, F33,
							   F34, F35, F36, F37,
							   F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, NewFValue, F14, F15,
						     F16, F17, F18, F19, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_mem_file_bytes'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_mem_file_bytes'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3, F4, F5, F6,
							 F7, F8, F9, F10, F11,
							 F12, F13, F14, F15,
							 F16, F17, F18, F19,
							 F20, F21, F22, F23,
							 F24, F25, F26, F27,
							 F28, F29, F30, F31,
							 F32, F33, F34, F35,
							 F36, F37, F38, F39,
							 F40);
'd_field_mesos.v1.ResourceStatistics_mem_file_bytes'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, _, F15, F16, F17,
						     F18, F19, F20, F21, F22,
						     F23, F24, F25, F26, F27,
						     F28, F29, F30, F31, F32,
						     F33, F34, F35, F36, F37,
						     F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, NewFValue, F15,
						     F16, F17, F18, F19, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_mem_anon_bytes'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_mem_anon_bytes'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3, F4, F5, F6,
							 F7, F8, F9, F10, F11,
							 F12, F13, F14, F15,
							 F16, F17, F18, F19,
							 F20, F21, F22, F23,
							 F24, F25, F26, F27,
							 F28, F29, F30, F31,
							 F32, F33, F34, F35,
							 F36, F37, F38, F39,
							 F40);
'd_field_mesos.v1.ResourceStatistics_mem_anon_bytes'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, _, F16, F17,
						     F18, F19, F20, F21, F22,
						     F23, F24, F25, F26, F27,
						     F28, F29, F30, F31, F32,
						     F33, F34, F35, F36, F37,
						     F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, NewFValue,
						     F16, F17, F18, F19, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_mem_cache_bytes'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_mem_cache_bytes'(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16, F17, F18,
							  F19, F20, F21, F22,
							  F23, F24, F25, F26,
							  F27, F28, F29, F30,
							  F31, F32, F33, F34,
							  F35, F36, F37, F38,
							  F39, F40);
'd_field_mesos.v1.ResourceStatistics_mem_cache_bytes'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      _, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39,
						      F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15,
						     NewFValue, F17, F18, F19,
						     F20, F21, F22, F23, F24,
						     F25, F26, F27, F28, F29,
						     F30, F31, F32, F33, F34,
						     F35, F36, F37, F38, F39,
						     F40).


'd_field_mesos.v1.ResourceStatistics_mem_rss_bytes'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_mem_rss_bytes'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7, F8, F9, F10, F11,
							F12, F13, F14, F15, F16,
							F17, F18, F19, F20, F21,
							F22, F23, F24, F25, F26,
							F27, F28, F29, F30, F31,
							F32, F33, F34, F35, F36,
							F37, F38, F39, F40);
'd_field_mesos.v1.ResourceStatistics_mem_rss_bytes'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16, _,
						    F18, F19, F20, F21, F22,
						    F23, F24, F25, F26, F27,
						    F28, F29, F30, F31, F32,
						    F33, F34, F35, F36, F37,
						    F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     NewFValue, F18, F19, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_mem_mapped_file_bytes'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, F18, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_mem_mapped_file_bytes'(Rest,
								N + 7,
								X bsl N + Acc,
								F1, F2, F3, F4,
								F5, F6, F7, F8,
								F9, F10, F11,
								F12, F13, F14,
								F15, F16, F17,
								F18, F19, F20,
								F21, F22, F23,
								F24, F25, F26,
								F27, F28, F29,
								F30, F31, F32,
								F33, F34, F35,
								F36, F37, F38,
								F39, F40);
'd_field_mesos.v1.ResourceStatistics_mem_mapped_file_bytes'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    F17, _, F19, F20,
							    F21, F22, F23, F24,
							    F25, F26, F27, F28,
							    F29, F30, F31, F32,
							    F33, F34, F35, F36,
							    F37, F38, F39,
							    F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, NewFValue, F19, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_mem_swap_bytes'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_mem_swap_bytes'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3, F4, F5, F6,
							 F7, F8, F9, F10, F11,
							 F12, F13, F14, F15,
							 F16, F17, F18, F19,
							 F20, F21, F22, F23,
							 F24, F25, F26, F27,
							 F28, F29, F30, F31,
							 F32, F33, F34, F35,
							 F36, F37, F38, F39,
							 F40);
'd_field_mesos.v1.ResourceStatistics_mem_swap_bytes'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, _, F20, F21, F22,
						     F23, F24, F25, F26, F27,
						     F28, F29, F30, F31, F32,
						     F33, F34, F35, F36, F37,
						     F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, NewFValue, F20,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_mem_low_pressure_counter'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F1, F2,
							       F3, F4, F5, F6,
							       F7, F8, F9, F10,
							       F11, F12, F13,
							       F14, F15, F16,
							       F17, F18, F19,
							       F20, F21, F22,
							       F23, F24, F25,
							       F26, F27, F28,
							       F29, F30, F31,
							       F32, F33, F34,
							       F35, F36, F37,
							       F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_mem_low_pressure_counter'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F1, F2, F3,
								   F4, F5, F6,
								   F7, F8, F9,
								   F10, F11,
								   F12, F13,
								   F14, F15,
								   F16, F17,
								   F18, F19,
								   F20, F21,
								   F22, F23,
								   F24, F25,
								   F26, F27,
								   F28, F29,
								   F30, F31,
								   F32, F33,
								   F34, F35,
								   F36, F37,
								   F38, F39,
								   F40);
'd_field_mesos.v1.ResourceStatistics_mem_low_pressure_counter'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F1, F2,
							       F3, F4, F5, F6,
							       F7, F8, F9, F10,
							       F11, F12, F13,
							       F14, F15, F16,
							       F17, F18, F19, _,
							       F21, F22, F23,
							       F24, F25, F26,
							       F27, F28, F29,
							       F30, F31, F32,
							       F33, F34, F35,
							       F36, F37, F38,
							       F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, NewFValue,
						     F21, F22, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_mem_medium_pressure_counter'(<<1:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F1,
								  F2, F3, F4,
								  F5, F6, F7,
								  F8, F9, F10,
								  F11, F12, F13,
								  F14, F15, F16,
								  F17, F18, F19,
								  F20, F21, F22,
								  F23, F24, F25,
								  F26, F27, F28,
								  F29, F30, F31,
								  F32, F33, F34,
								  F35, F36, F37,
								  F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_mem_medium_pressure_counter'(Rest,
								      N + 7,
								      X bsl N +
									Acc,
								      F1, F2,
								      F3, F4,
								      F5, F6,
								      F7, F8,
								      F9, F10,
								      F11, F12,
								      F13, F14,
								      F15, F16,
								      F17, F18,
								      F19, F20,
								      F21, F22,
								      F23, F24,
								      F25, F26,
								      F27, F28,
								      F29, F30,
								      F31, F32,
								      F33, F34,
								      F35, F36,
								      F37, F38,
								      F39, F40);
'd_field_mesos.v1.ResourceStatistics_mem_medium_pressure_counter'(<<0:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F1,
								  F2, F3, F4,
								  F5, F6, F7,
								  F8, F9, F10,
								  F11, F12, F13,
								  F14, F15, F16,
								  F17, F18, F19,
								  F20, _, F22,
								  F23, F24, F25,
								  F26, F27, F28,
								  F29, F30, F31,
								  F32, F33, F34,
								  F35, F36, F37,
								  F38, F39,
								  F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20,
						     NewFValue, F22, F23, F24,
						     F25, F26, F27, F28, F29,
						     F30, F31, F32, F33, F34,
						     F35, F36, F37, F38, F39,
						     F40).


'd_field_mesos.v1.ResourceStatistics_mem_critical_pressure_counter'(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc, F1,
								    F2, F3, F4,
								    F5, F6, F7,
								    F8, F9, F10,
								    F11, F12,
								    F13, F14,
								    F15, F16,
								    F17, F18,
								    F19, F20,
								    F21, F22,
								    F23, F24,
								    F25, F26,
								    F27, F28,
								    F29, F30,
								    F31, F32,
								    F33, F34,
								    F35, F36,
								    F37, F38,
								    F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_mem_critical_pressure_counter'(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F1, F2,
									F3, F4,
									F5, F6,
									F7, F8,
									F9, F10,
									F11,
									F12,
									F13,
									F14,
									F15,
									F16,
									F17,
									F18,
									F19,
									F20,
									F21,
									F22,
									F23,
									F24,
									F25,
									F26,
									F27,
									F28,
									F29,
									F30,
									F31,
									F32,
									F33,
									F34,
									F35,
									F36,
									F37,
									F38,
									F39,
									F40);
'd_field_mesos.v1.ResourceStatistics_mem_critical_pressure_counter'(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc, F1,
								    F2, F3, F4,
								    F5, F6, F7,
								    F8, F9, F10,
								    F11, F12,
								    F13, F14,
								    F15, F16,
								    F17, F18,
								    F19, F20,
								    F21, _, F23,
								    F24, F25,
								    F26, F27,
								    F28, F29,
								    F30, F31,
								    F32, F33,
								    F34, F35,
								    F36, F37,
								    F38, F39,
								    F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     NewFValue, F23, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_disk_limit_bytes'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_disk_limit_bytes'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3, F4, F5,
							   F6, F7, F8, F9, F10,
							   F11, F12, F13, F14,
							   F15, F16, F17, F18,
							   F19, F20, F21, F22,
							   F23, F24, F25, F26,
							   F27, F28, F29, F30,
							   F31, F32, F33, F34,
							   F35, F36, F37, F38,
							   F39, F40);
'd_field_mesos.v1.ResourceStatistics_disk_limit_bytes'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, _, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39,
						       F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, NewFValue, F24, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_disk_used_bytes'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_disk_used_bytes'(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16, F17, F18,
							  F19, F20, F21, F22,
							  F23, F24, F25, F26,
							  F27, F28, F29, F30,
							  F31, F32, F33, F34,
							  F35, F36, F37, F38,
							  F39, F40);
'd_field_mesos.v1.ResourceStatistics_disk_used_bytes'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, _, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, F39,
						      F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, NewFValue, F25,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_perf'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36,
					   F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_perf'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16, F17,
					       F18, F19, F20, F21, F22, F23,
					       F24, F25, F26, F27, F28, F29,
					       F30, F31, F32, F33, F34, F35,
					       F36, F37, F38, F39, F40);
'd_field_mesos.v1.ResourceStatistics_perf'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36,
					   F37, F38, F39, F40) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.PerfStatistics'),
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest2,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24,
						     if F25 == undefined ->
							    NewFValue;
							true ->
							    'merge_msg_mesos.v1.PerfStatistics'(F25,
												NewFValue)
						     end,
						     F26, F27, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_net_rx_packets'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_net_rx_packets'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3, F4, F5, F6,
							 F7, F8, F9, F10, F11,
							 F12, F13, F14, F15,
							 F16, F17, F18, F19,
							 F20, F21, F22, F23,
							 F24, F25, F26, F27,
							 F28, F29, F30, F31,
							 F32, F33, F34, F35,
							 F36, F37, F38, F39,
							 F40);
'd_field_mesos.v1.ResourceStatistics_net_rx_packets'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, _, F27,
						     F28, F29, F30, F31, F32,
						     F33, F34, F35, F36, F37,
						     F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25,
						     NewFValue, F27, F28, F29,
						     F30, F31, F32, F33, F34,
						     F35, F36, F37, F38, F39,
						     F40).


'd_field_mesos.v1.ResourceStatistics_net_rx_bytes'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_net_rx_bytes'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6, F7,
						       F8, F9, F10, F11, F12,
						       F13, F14, F15, F16, F17,
						       F18, F19, F20, F21, F22,
						       F23, F24, F25, F26, F27,
						       F28, F29, F30, F31, F32,
						       F33, F34, F35, F36, F37,
						       F38, F39, F40);
'd_field_mesos.v1.ResourceStatistics_net_rx_bytes'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, _, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     NewFValue, F28, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_net_rx_errors'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_net_rx_errors'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7, F8, F9, F10, F11,
							F12, F13, F14, F15, F16,
							F17, F18, F19, F20, F21,
							F22, F23, F24, F25, F26,
							F27, F28, F29, F30, F31,
							F32, F33, F34, F35, F36,
							F37, F38, F39, F40);
'd_field_mesos.v1.ResourceStatistics_net_rx_errors'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, _, F29, F30, F31, F32,
						    F33, F34, F35, F36, F37,
						    F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, NewFValue, F29, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_net_rx_dropped'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_net_rx_dropped'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3, F4, F5, F6,
							 F7, F8, F9, F10, F11,
							 F12, F13, F14, F15,
							 F16, F17, F18, F19,
							 F20, F21, F22, F23,
							 F24, F25, F26, F27,
							 F28, F29, F30, F31,
							 F32, F33, F34, F35,
							 F36, F37, F38, F39,
							 F40);
'd_field_mesos.v1.ResourceStatistics_net_rx_dropped'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, _, F30, F31, F32,
						     F33, F34, F35, F36, F37,
						     F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, NewFValue, F30,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_net_tx_packets'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_net_tx_packets'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3, F4, F5, F6,
							 F7, F8, F9, F10, F11,
							 F12, F13, F14, F15,
							 F16, F17, F18, F19,
							 F20, F21, F22, F23,
							 F24, F25, F26, F27,
							 F28, F29, F30, F31,
							 F32, F33, F34, F35,
							 F36, F37, F38, F39,
							 F40);
'd_field_mesos.v1.ResourceStatistics_net_tx_packets'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, _, F31, F32,
						     F33, F34, F35, F36, F37,
						     F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, NewFValue,
						     F31, F32, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_net_tx_bytes'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, F31, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_net_tx_bytes'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6, F7,
						       F8, F9, F10, F11, F12,
						       F13, F14, F15, F16, F17,
						       F18, F19, F20, F21, F22,
						       F23, F24, F25, F26, F27,
						       F28, F29, F30, F31, F32,
						       F33, F34, F35, F36, F37,
						       F38, F39, F40);
'd_field_mesos.v1.ResourceStatistics_net_tx_bytes'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6, F7, F8, F9, F10, F11,
						   F12, F13, F14, F15, F16, F17,
						   F18, F19, F20, F21, F22, F23,
						   F24, F25, F26, F27, F28, F29,
						   F30, _, F32, F33, F34, F35,
						   F36, F37, F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30,
						     NewFValue, F32, F33, F34,
						     F35, F36, F37, F38, F39,
						     F40).


'd_field_mesos.v1.ResourceStatistics_net_tx_errors'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_net_tx_errors'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7, F8, F9, F10, F11,
							F12, F13, F14, F15, F16,
							F17, F18, F19, F20, F21,
							F22, F23, F24, F25, F26,
							F27, F28, F29, F30, F31,
							F32, F33, F34, F35, F36,
							F37, F38, F39, F40);
'd_field_mesos.v1.ResourceStatistics_net_tx_errors'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31, _,
						    F33, F34, F35, F36, F37,
						    F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     NewFValue, F33, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_net_tx_dropped'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_net_tx_dropped'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3, F4, F5, F6,
							 F7, F8, F9, F10, F11,
							 F12, F13, F14, F15,
							 F16, F17, F18, F19,
							 F20, F21, F22, F23,
							 F24, F25, F26, F27,
							 F28, F29, F30, F31,
							 F32, F33, F34, F35,
							 F36, F37, F38, F39,
							 F40);
'd_field_mesos.v1.ResourceStatistics_net_tx_dropped'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, _, F34, F35, F36, F37,
						     F38, F39, F40) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, NewFValue, F34, F35,
						     F36, F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_net_tcp_rtt_microsecs_p50'(<<Value:64/little-float,
								  Rest/binary>>,
								Z1, Z2, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, _,
								F35, F36, F37,
								F38, F39,
								F40) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, Value, F35, F36,
						     F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_net_tcp_rtt_microsecs_p90'(<<Value:64/little-float,
								  Rest/binary>>,
								Z1, Z2, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								_, F36, F37,
								F38, F39,
								F40) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, Value, F36,
						     F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_net_tcp_rtt_microsecs_p95'(<<Value:64/little-float,
								  Rest/binary>>,
								Z1, Z2, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, _, F37,
								F38, F39,
								F40) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, Value,
						     F37, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_net_tcp_rtt_microsecs_p99'(<<Value:64/little-float,
								  Rest/binary>>,
								Z1, Z2, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, F36, _,
								F38, F39,
								F40) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     Value, F38, F39, F40).


'd_field_mesos.v1.ResourceStatistics_net_tcp_active_connections'(<<Value:64/little-float,
								   Rest/binary>>,
								 Z1, Z2, F1, F2,
								 F3, F4, F5, F6,
								 F7, F8, F9,
								 F10, F11, F12,
								 F13, F14, F15,
								 F16, F17, F18,
								 F19, F20, F21,
								 F22, F23, F24,
								 F25, F26, F27,
								 F28, F29, F30,
								 F31, F32, F33,
								 F34, F35, F36,
								 F37, _, F39,
								 F40) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, Value, F39, F40).


'd_field_mesos.v1.ResourceStatistics_net_tcp_time_wait_connections'(<<Value:64/little-float,
								      Rest/binary>>,
								    Z1, Z2, F1,
								    F2, F3, F4,
								    F5, F6, F7,
								    F8, F9, F10,
								    F11, F12,
								    F13, F14,
								    F15, F16,
								    F17, F18,
								    F19, F20,
								    F21, F22,
								    F23, F24,
								    F25, F26,
								    F27, F28,
								    F29, F30,
								    F31, F32,
								    F33, F34,
								    F35, F36,
								    F37, F38, _,
								    F40) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, Value, F40).


'd_field_mesos.v1.ResourceStatistics_net_traffic_control_statistics'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc, F1,
								     F2, F3, F4,
								     F5, F6, F7,
								     F8, F9,
								     F10, F11,
								     F12, F13,
								     F14, F15,
								     F16, F17,
								     F18, F19,
								     F20, F21,
								     F22, F23,
								     F24, F25,
								     F26, F27,
								     F28, F29,
								     F30, F31,
								     F32, F33,
								     F34, F35,
								     F36, F37,
								     F38, F39,
								     F40)
    when N < 57 ->
    'd_field_mesos.v1.ResourceStatistics_net_traffic_control_statistics'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F1, F2,
									 F3, F4,
									 F5, F6,
									 F7, F8,
									 F9,
									 F10,
									 F11,
									 F12,
									 F13,
									 F14,
									 F15,
									 F16,
									 F17,
									 F18,
									 F19,
									 F20,
									 F21,
									 F22,
									 F23,
									 F24,
									 F25,
									 F26,
									 F27,
									 F28,
									 F29,
									 F30,
									 F31,
									 F32,
									 F33,
									 F34,
									 F35,
									 F36,
									 F37,
									 F38,
									 F39,
									 F40);
'd_field_mesos.v1.ResourceStatistics_net_traffic_control_statistics'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc, F1,
								     F2, F3, F4,
								     F5, F6, F7,
								     F8, F9,
								     F10, F11,
								     F12, F13,
								     F14, F15,
								     F16, F17,
								     F18, F19,
								     F20, F21,
								     F22, F23,
								     F24, F25,
								     F26, F27,
								     F28, F29,
								     F30, F31,
								     F32, F33,
								     F34, F35,
								     F36, F37,
								     F38, F39,
								     F40) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.TrafficControlStatistics'),
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest2,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39,
						     [NewFValue | F40]).


'skip_varint_mesos.v1.ResourceStatistics'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40) ->
    'skip_varint_mesos.v1.ResourceStatistics'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12, F13, F14, F15,
					      F16, F17, F18, F19, F20, F21, F22,
					      F23, F24, F25, F26, F27, F28, F29,
					      F30, F31, F32, F33, F34, F35, F36,
					      F37, F38, F39, F40);
'skip_varint_mesos.v1.ResourceStatistics'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40).


'skip_length_delimited_mesos.v1.ResourceStatistics'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ResourceStatistics'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7, F8, F9, F10, F11,
							F12, F13, F14, F15, F16,
							F17, F18, F19, F20, F21,
							F22, F23, F24, F25, F26,
							F27, F28, F29, F30, F31,
							F32, F33, F34, F35, F36,
							F37, F38, F39, F40);
'skip_length_delimited_mesos.v1.ResourceStatistics'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest2,
						     0, 0, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40).


'skip_32_mesos.v1.ResourceStatistics'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40).


'skip_64_mesos.v1.ResourceStatistics'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40) ->
    'dfp_read_field_def_mesos.v1.ResourceStatistics'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40).


'd_msg_mesos.v1.Credentials'(Bin) ->
    'dfp_read_field_def_mesos.v1.Credentials'(Bin, 0, 0,
					      []).

'dfp_read_field_def_mesos.v1.Credentials'(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    'd_field_mesos.v1.Credentials_credentials'(Rest, Z1, Z2,
					       F1);
'dfp_read_field_def_mesos.v1.Credentials'(<<>>, 0, 0,
					  F1) ->
    #'mesos.v1.Credentials'{credentials =
				lists:reverse(F1)};
'dfp_read_field_def_mesos.v1.Credentials'(Other, Z1, Z2,
					  F1) ->
    'dg_read_field_def_mesos.v1.Credentials'(Other, Z1, Z2,
					     F1).

'dg_read_field_def_mesos.v1.Credentials'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Credentials'(Rest, N + 7,
					     X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.Credentials'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.Credentials_credentials'(Rest, 0, 0,
						     F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.Credentials'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.Credentials'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.Credentials'(Rest, 0, 0,
							     F1);
	    5 -> 'skip_32_mesos.v1.Credentials'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.Credentials'(<<>>, 0, 0,
					 F1) ->
    #'mesos.v1.Credentials'{credentials =
				lists:reverse(F1)}.

'd_field_mesos.v1.Credentials_credentials'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.Credentials_credentials'(Rest, N + 7,
					       X bsl N + Acc, F1);
'd_field_mesos.v1.Credentials_credentials'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Credential'),
    'dfp_read_field_def_mesos.v1.Credentials'(Rest2, 0, 0,
					      [NewFValue | F1]).


'skip_varint_mesos.v1.Credentials'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    'skip_varint_mesos.v1.Credentials'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.Credentials'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Credentials'(Rest, Z1, Z2,
					      F1).


'skip_length_delimited_mesos.v1.Credentials'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Credentials'(Rest,
						 N + 7, X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.Credentials'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Credentials'(Rest2, 0, 0,
					      F1).


'skip_32_mesos.v1.Credentials'(<<_:32, Rest/binary>>,
			       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Credentials'(Rest, Z1, Z2,
					      F1).


'skip_64_mesos.v1.Credentials'(<<_:64, Rest/binary>>,
			       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.Credentials'(Rest, Z1, Z2,
					      F1).


'd_msg_mesos.v1.ResourceUsage.Executor'(Bin) ->
    'dfp_read_field_def_mesos.v1.ResourceUsage.Executor'(Bin,
							 0, 0, undefined, [],
							 undefined).

'dfp_read_field_def_mesos.v1.ResourceUsage.Executor'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.ResourceUsage.Executor_executor_info'(Rest,
							    Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.ResourceUsage.Executor'(<<18,
						       Rest/binary>>,
						     Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.ResourceUsage.Executor_allocated'(Rest,
							Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.ResourceUsage.Executor'(<<26,
						       Rest/binary>>,
						     Z1, Z2, F1, F2, F3) ->
    'd_field_mesos.v1.ResourceUsage.Executor_statistics'(Rest,
							 Z1, Z2, F1, F2, F3);
'dfp_read_field_def_mesos.v1.ResourceUsage.Executor'(<<>>,
						     0, 0, F1, F2, F3) ->
    #'mesos.v1.ResourceUsage.Executor'{executor_info = F1,
				       allocated = lists:reverse(F2),
				       statistics = F3};
'dfp_read_field_def_mesos.v1.ResourceUsage.Executor'(Other,
						     Z1, Z2, F1, F2, F3) ->
    'dg_read_field_def_mesos.v1.ResourceUsage.Executor'(Other,
							Z1, Z2, F1, F2, F3).

'dg_read_field_def_mesos.v1.ResourceUsage.Executor'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ResourceUsage.Executor'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3);
'dg_read_field_def_mesos.v1.ResourceUsage.Executor'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.ResourceUsage.Executor_executor_info'(Rest,
								  0, 0, F1, F2,
								  F3);
      18 ->
	  'd_field_mesos.v1.ResourceUsage.Executor_allocated'(Rest,
							      0, 0, F1, F2, F3);
      26 ->
	  'd_field_mesos.v1.ResourceUsage.Executor_statistics'(Rest,
							       0, 0, F1, F2,
							       F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.ResourceUsage.Executor'(Rest, 0,
							      0, F1, F2, F3);
	    1 ->
		'skip_64_mesos.v1.ResourceUsage.Executor'(Rest, 0, 0,
							  F1, F2, F3);
	    2 ->
		'skip_length_delimited_mesos.v1.ResourceUsage.Executor'(Rest,
									0, 0,
									F1, F2,
									F3);
	    5 ->
		'skip_32_mesos.v1.ResourceUsage.Executor'(Rest, 0, 0,
							  F1, F2, F3)
	  end
    end;
'dg_read_field_def_mesos.v1.ResourceUsage.Executor'(<<>>,
						    0, 0, F1, F2, F3) ->
    #'mesos.v1.ResourceUsage.Executor'{executor_info = F1,
				       allocated = lists:reverse(F2),
				       statistics = F3}.

'd_field_mesos.v1.ResourceUsage.Executor_executor_info'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.ResourceUsage.Executor_executor_info'(Rest,
							    N + 7,
							    X bsl N + Acc, F1,
							    F2, F3);
'd_field_mesos.v1.ResourceUsage.Executor_executor_info'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ExecutorInfo'),
    'dfp_read_field_def_mesos.v1.ResourceUsage.Executor'(Rest2,
							 0, 0,
							 if F1 == undefined ->
								NewFValue;
							    true ->
								'merge_msg_mesos.v1.ExecutorInfo'(F1,
												  NewFValue)
							 end,
							 F2, F3).


'd_field_mesos.v1.ResourceUsage.Executor_allocated'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.ResourceUsage.Executor_allocated'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3);
'd_field_mesos.v1.ResourceUsage.Executor_allocated'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Resource'),
    'dfp_read_field_def_mesos.v1.ResourceUsage.Executor'(Rest2,
							 0, 0, F1,
							 [NewFValue | F2], F3).


'd_field_mesos.v1.ResourceUsage.Executor_statistics'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_mesos.v1.ResourceUsage.Executor_statistics'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3);
'd_field_mesos.v1.ResourceUsage.Executor_statistics'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.ResourceStatistics'),
    'dfp_read_field_def_mesos.v1.ResourceUsage.Executor'(Rest2,
							 0, 0, F1, F2,
							 if F3 == undefined ->
								NewFValue;
							    true ->
								'merge_msg_mesos.v1.ResourceStatistics'(F3,
													NewFValue)
							 end).


'skip_varint_mesos.v1.ResourceUsage.Executor'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1, F2, F3) ->
    'skip_varint_mesos.v1.ResourceUsage.Executor'(Rest, Z1,
						  Z2, F1, F2, F3);
'skip_varint_mesos.v1.ResourceUsage.Executor'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.ResourceUsage.Executor'(Rest,
							 Z1, Z2, F1, F2, F3).


'skip_length_delimited_mesos.v1.ResourceUsage.Executor'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ResourceUsage.Executor'(Rest,
							    N + 7,
							    X bsl N + Acc, F1,
							    F2, F3);
'skip_length_delimited_mesos.v1.ResourceUsage.Executor'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ResourceUsage.Executor'(Rest2,
							 0, 0, F1, F2, F3).


'skip_32_mesos.v1.ResourceUsage.Executor'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.ResourceUsage.Executor'(Rest,
							 Z1, Z2, F1, F2, F3).


'skip_64_mesos.v1.ResourceUsage.Executor'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_mesos.v1.ResourceUsage.Executor'(Rest,
							 Z1, Z2, F1, F2, F3).


'd_msg_mesos.v1.ACL'(Bin) ->
    'dfp_read_field_def_mesos.v1.ACL'(Bin, 0, 0).

'dfp_read_field_def_mesos.v1.ACL'(<<>>, 0, 0) ->
    #'mesos.v1.ACL'{};
'dfp_read_field_def_mesos.v1.ACL'(Other, Z1, Z2) ->
    'dg_read_field_def_mesos.v1.ACL'(Other, Z1, Z2).

'dg_read_field_def_mesos.v1.ACL'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ACL'(Rest, N + 7,
				     X bsl N + Acc);
'dg_read_field_def_mesos.v1.ACL'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> 'skip_varint_mesos.v1.ACL'(Rest, 0, 0);
      1 -> 'skip_64_mesos.v1.ACL'(Rest, 0, 0);
      2 -> 'skip_length_delimited_mesos.v1.ACL'(Rest, 0, 0);
      5 -> 'skip_32_mesos.v1.ACL'(Rest, 0, 0)
    end;
'dg_read_field_def_mesos.v1.ACL'(<<>>, 0, 0) ->
    #'mesos.v1.ACL'{}.

'skip_varint_mesos.v1.ACL'(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2) ->
    'skip_varint_mesos.v1.ACL'(Rest, Z1, Z2);
'skip_varint_mesos.v1.ACL'(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2) ->
    'dfp_read_field_def_mesos.v1.ACL'(Rest, Z1, Z2).


'skip_length_delimited_mesos.v1.ACL'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ACL'(Rest, N + 7,
					 X bsl N + Acc);
'skip_length_delimited_mesos.v1.ACL'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ACL'(Rest2, 0, 0).


'skip_32_mesos.v1.ACL'(<<_:32, Rest/binary>>, Z1, Z2) ->
    'dfp_read_field_def_mesos.v1.ACL'(Rest, Z1, Z2).


'skip_64_mesos.v1.ACL'(<<_:64, Rest/binary>>, Z1, Z2) ->
    'dfp_read_field_def_mesos.v1.ACL'(Rest, Z1, Z2).


'd_msg_mesos.v1.ACL.RunTask'(Bin) ->
    'dfp_read_field_def_mesos.v1.ACL.RunTask'(Bin, 0, 0,
					      undefined, undefined).

'dfp_read_field_def_mesos.v1.ACL.RunTask'(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.ACL.RunTask_principals'(Rest, Z1, Z2,
					      F1, F2);
'dfp_read_field_def_mesos.v1.ACL.RunTask'(<<18,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.ACL.RunTask_users'(Rest, Z1, Z2, F1,
					 F2);
'dfp_read_field_def_mesos.v1.ACL.RunTask'(<<>>, 0, 0,
					  F1, F2) ->
    #'mesos.v1.ACL.RunTask'{principals = F1, users = F2};
'dfp_read_field_def_mesos.v1.ACL.RunTask'(Other, Z1, Z2,
					  F1, F2) ->
    'dg_read_field_def_mesos.v1.ACL.RunTask'(Other, Z1, Z2,
					     F1, F2).

'dg_read_field_def_mesos.v1.ACL.RunTask'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ACL.RunTask'(Rest, N + 7,
					     X bsl N + Acc, F1, F2);
'dg_read_field_def_mesos.v1.ACL.RunTask'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.ACL.RunTask_principals'(Rest, 0, 0,
						    F1, F2);
      18 ->
	  'd_field_mesos.v1.ACL.RunTask_users'(Rest, 0, 0, F1,
					       F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.ACL.RunTask'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_mesos.v1.ACL.RunTask'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.ACL.RunTask'(Rest, 0, 0,
							     F1, F2);
	    5 -> 'skip_32_mesos.v1.ACL.RunTask'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.ACL.RunTask'(<<>>, 0, 0, F1,
					 F2) ->
    #'mesos.v1.ACL.RunTask'{principals = F1, users = F2}.

'd_field_mesos.v1.ACL.RunTask_principals'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.ACL.RunTask_principals'(Rest, N + 7,
					      X bsl N + Acc, F1, F2);
'd_field_mesos.v1.ACL.RunTask_principals'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ACL.Entity'),
    'dfp_read_field_def_mesos.v1.ACL.RunTask'(Rest2, 0, 0,
					      if F1 == undefined -> NewFValue;
						 true ->
						     'merge_msg_mesos.v1.ACL.Entity'(F1,
										     NewFValue)
					      end,
					      F2).


'd_field_mesos.v1.ACL.RunTask_users'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.ACL.RunTask_users'(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
'd_field_mesos.v1.ACL.RunTask_users'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ACL.Entity'),
    'dfp_read_field_def_mesos.v1.ACL.RunTask'(Rest2, 0, 0,
					      F1,
					      if F2 == undefined -> NewFValue;
						 true ->
						     'merge_msg_mesos.v1.ACL.Entity'(F2,
										     NewFValue)
					      end).


'skip_varint_mesos.v1.ACL.RunTask'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.ACL.RunTask'(Rest, Z1, Z2, F1,
				       F2);
'skip_varint_mesos.v1.ACL.RunTask'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ACL.RunTask'(Rest, Z1, Z2,
					      F1, F2).


'skip_length_delimited_mesos.v1.ACL.RunTask'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ACL.RunTask'(Rest,
						 N + 7, X bsl N + Acc, F1, F2);
'skip_length_delimited_mesos.v1.ACL.RunTask'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ACL.RunTask'(Rest2, 0, 0,
					      F1, F2).


'skip_32_mesos.v1.ACL.RunTask'(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ACL.RunTask'(Rest, Z1, Z2,
					      F1, F2).


'skip_64_mesos.v1.ACL.RunTask'(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ACL.RunTask'(Rest, Z1, Z2,
					      F1, F2).


'd_msg_mesos.v1.ACL.RegisterFramework'(Bin) ->
    'dfp_read_field_def_mesos.v1.ACL.RegisterFramework'(Bin,
							0, 0, undefined,
							undefined).

'dfp_read_field_def_mesos.v1.ACL.RegisterFramework'(<<10,
						      Rest/binary>>,
						    Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.ACL.RegisterFramework_principals'(Rest,
							Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.ACL.RegisterFramework'(<<18,
						      Rest/binary>>,
						    Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.ACL.RegisterFramework_roles'(Rest, Z1,
						   Z2, F1, F2);
'dfp_read_field_def_mesos.v1.ACL.RegisterFramework'(<<>>,
						    0, 0, F1, F2) ->
    #'mesos.v1.ACL.RegisterFramework'{principals = F1,
				      roles = F2};
'dfp_read_field_def_mesos.v1.ACL.RegisterFramework'(Other,
						    Z1, Z2, F1, F2) ->
    'dg_read_field_def_mesos.v1.ACL.RegisterFramework'(Other,
						       Z1, Z2, F1, F2).

'dg_read_field_def_mesos.v1.ACL.RegisterFramework'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ACL.RegisterFramework'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2);
'dg_read_field_def_mesos.v1.ACL.RegisterFramework'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.ACL.RegisterFramework_principals'(Rest,
							      0, 0, F1, F2);
      18 ->
	  'd_field_mesos.v1.ACL.RegisterFramework_roles'(Rest, 0,
							 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.ACL.RegisterFramework'(Rest, 0, 0,
							     F1, F2);
	    1 ->
		'skip_64_mesos.v1.ACL.RegisterFramework'(Rest, 0, 0, F1,
							 F2);
	    2 ->
		'skip_length_delimited_mesos.v1.ACL.RegisterFramework'(Rest,
								       0, 0, F1,
								       F2);
	    5 ->
		'skip_32_mesos.v1.ACL.RegisterFramework'(Rest, 0, 0, F1,
							 F2)
	  end
    end;
'dg_read_field_def_mesos.v1.ACL.RegisterFramework'(<<>>,
						   0, 0, F1, F2) ->
    #'mesos.v1.ACL.RegisterFramework'{principals = F1,
				      roles = F2}.

'd_field_mesos.v1.ACL.RegisterFramework_principals'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.ACL.RegisterFramework_principals'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2);
'd_field_mesos.v1.ACL.RegisterFramework_principals'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ACL.Entity'),
    'dfp_read_field_def_mesos.v1.ACL.RegisterFramework'(Rest2,
							0, 0,
							if F1 == undefined ->
							       NewFValue;
							   true ->
							       'merge_msg_mesos.v1.ACL.Entity'(F1,
											       NewFValue)
							end,
							F2).


'd_field_mesos.v1.ACL.RegisterFramework_roles'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.ACL.RegisterFramework_roles'(Rest,
						   N + 7, X bsl N + Acc, F1,
						   F2);
'd_field_mesos.v1.ACL.RegisterFramework_roles'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ACL.Entity'),
    'dfp_read_field_def_mesos.v1.ACL.RegisterFramework'(Rest2,
							0, 0, F1,
							if F2 == undefined ->
							       NewFValue;
							   true ->
							       'merge_msg_mesos.v1.ACL.Entity'(F2,
											       NewFValue)
							end).


'skip_varint_mesos.v1.ACL.RegisterFramework'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.ACL.RegisterFramework'(Rest, Z1,
						 Z2, F1, F2);
'skip_varint_mesos.v1.ACL.RegisterFramework'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ACL.RegisterFramework'(Rest,
							Z1, Z2, F1, F2).


'skip_length_delimited_mesos.v1.ACL.RegisterFramework'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ACL.RegisterFramework'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2);
'skip_length_delimited_mesos.v1.ACL.RegisterFramework'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ACL.RegisterFramework'(Rest2,
							0, 0, F1, F2).


'skip_32_mesos.v1.ACL.RegisterFramework'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ACL.RegisterFramework'(Rest,
							Z1, Z2, F1, F2).


'skip_64_mesos.v1.ACL.RegisterFramework'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ACL.RegisterFramework'(Rest,
							Z1, Z2, F1, F2).


'd_msg_mesos.v1.ACL.ShutdownFramework'(Bin) ->
    'dfp_read_field_def_mesos.v1.ACL.ShutdownFramework'(Bin,
							0, 0, undefined,
							undefined).

'dfp_read_field_def_mesos.v1.ACL.ShutdownFramework'(<<10,
						      Rest/binary>>,
						    Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.ACL.ShutdownFramework_principals'(Rest,
							Z1, Z2, F1, F2);
'dfp_read_field_def_mesos.v1.ACL.ShutdownFramework'(<<18,
						      Rest/binary>>,
						    Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.ACL.ShutdownFramework_framework_principals'(Rest,
								  Z1, Z2, F1,
								  F2);
'dfp_read_field_def_mesos.v1.ACL.ShutdownFramework'(<<>>,
						    0, 0, F1, F2) ->
    #'mesos.v1.ACL.ShutdownFramework'{principals = F1,
				      framework_principals = F2};
'dfp_read_field_def_mesos.v1.ACL.ShutdownFramework'(Other,
						    Z1, Z2, F1, F2) ->
    'dg_read_field_def_mesos.v1.ACL.ShutdownFramework'(Other,
						       Z1, Z2, F1, F2).

'dg_read_field_def_mesos.v1.ACL.ShutdownFramework'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ACL.ShutdownFramework'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2);
'dg_read_field_def_mesos.v1.ACL.ShutdownFramework'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.ACL.ShutdownFramework_principals'(Rest,
							      0, 0, F1, F2);
      18 ->
	  'd_field_mesos.v1.ACL.ShutdownFramework_framework_principals'(Rest,
									0, 0,
									F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.ACL.ShutdownFramework'(Rest, 0, 0,
							     F1, F2);
	    1 ->
		'skip_64_mesos.v1.ACL.ShutdownFramework'(Rest, 0, 0, F1,
							 F2);
	    2 ->
		'skip_length_delimited_mesos.v1.ACL.ShutdownFramework'(Rest,
								       0, 0, F1,
								       F2);
	    5 ->
		'skip_32_mesos.v1.ACL.ShutdownFramework'(Rest, 0, 0, F1,
							 F2)
	  end
    end;
'dg_read_field_def_mesos.v1.ACL.ShutdownFramework'(<<>>,
						   0, 0, F1, F2) ->
    #'mesos.v1.ACL.ShutdownFramework'{principals = F1,
				      framework_principals = F2}.

'd_field_mesos.v1.ACL.ShutdownFramework_principals'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.ACL.ShutdownFramework_principals'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2);
'd_field_mesos.v1.ACL.ShutdownFramework_principals'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ACL.Entity'),
    'dfp_read_field_def_mesos.v1.ACL.ShutdownFramework'(Rest2,
							0, 0,
							if F1 == undefined ->
							       NewFValue;
							   true ->
							       'merge_msg_mesos.v1.ACL.Entity'(F1,
											       NewFValue)
							end,
							F2).


'd_field_mesos.v1.ACL.ShutdownFramework_framework_principals'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.ACL.ShutdownFramework_framework_principals'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F1, F2);
'd_field_mesos.v1.ACL.ShutdownFramework_framework_principals'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ACL.Entity'),
    'dfp_read_field_def_mesos.v1.ACL.ShutdownFramework'(Rest2,
							0, 0, F1,
							if F2 == undefined ->
							       NewFValue;
							   true ->
							       'merge_msg_mesos.v1.ACL.Entity'(F2,
											       NewFValue)
							end).


'skip_varint_mesos.v1.ACL.ShutdownFramework'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.ACL.ShutdownFramework'(Rest, Z1,
						 Z2, F1, F2);
'skip_varint_mesos.v1.ACL.ShutdownFramework'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ACL.ShutdownFramework'(Rest,
							Z1, Z2, F1, F2).


'skip_length_delimited_mesos.v1.ACL.ShutdownFramework'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ACL.ShutdownFramework'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2);
'skip_length_delimited_mesos.v1.ACL.ShutdownFramework'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ACL.ShutdownFramework'(Rest2,
							0, 0, F1, F2).


'skip_32_mesos.v1.ACL.ShutdownFramework'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ACL.ShutdownFramework'(Rest,
							Z1, Z2, F1, F2).


'skip_64_mesos.v1.ACL.ShutdownFramework'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ACL.ShutdownFramework'(Rest,
							Z1, Z2, F1, F2).


'd_msg_mesos.v1.ACLs'(Bin) ->
    'dfp_read_field_def_mesos.v1.ACLs'(Bin, 0, 0, undefined,
				       [], [], []).

'dfp_read_field_def_mesos.v1.ACLs'(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4) ->
    'd_field_mesos.v1.ACLs_permissive'(Rest, Z1, Z2, F1, F2,
				       F3, F4);
'dfp_read_field_def_mesos.v1.ACLs'(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4) ->
    'd_field_mesos.v1.ACLs_register_frameworks'(Rest, Z1,
						Z2, F1, F2, F3, F4);
'dfp_read_field_def_mesos.v1.ACLs'(<<26, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4) ->
    'd_field_mesos.v1.ACLs_run_tasks'(Rest, Z1, Z2, F1, F2,
				      F3, F4);
'dfp_read_field_def_mesos.v1.ACLs'(<<34, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4) ->
    'd_field_mesos.v1.ACLs_shutdown_frameworks'(Rest, Z1,
						Z2, F1, F2, F3, F4);
'dfp_read_field_def_mesos.v1.ACLs'(<<>>, 0, 0, F1, F2,
				   F3, F4) ->
    #'mesos.v1.ACLs'{permissive = F1,
		     register_frameworks = lists:reverse(F2),
		     run_tasks = lists:reverse(F3),
		     shutdown_frameworks = lists:reverse(F4)};
'dfp_read_field_def_mesos.v1.ACLs'(Other, Z1, Z2, F1,
				   F2, F3, F4) ->
    'dg_read_field_def_mesos.v1.ACLs'(Other, Z1, Z2, F1, F2,
				      F3, F4).

'dg_read_field_def_mesos.v1.ACLs'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ACLs'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4);
'dg_read_field_def_mesos.v1.ACLs'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_mesos.v1.ACLs_permissive'(Rest, 0, 0, F1, F2,
					     F3, F4);
      18 ->
	  'd_field_mesos.v1.ACLs_register_frameworks'(Rest, 0, 0,
						      F1, F2, F3, F4);
      26 ->
	  'd_field_mesos.v1.ACLs_run_tasks'(Rest, 0, 0, F1, F2,
					    F3, F4);
      34 ->
	  'd_field_mesos.v1.ACLs_shutdown_frameworks'(Rest, 0, 0,
						      F1, F2, F3, F4);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.ACLs'(Rest, 0, 0, F1, F2, F3, F4);
	    1 ->
		'skip_64_mesos.v1.ACLs'(Rest, 0, 0, F1, F2, F3, F4);
	    2 ->
		'skip_length_delimited_mesos.v1.ACLs'(Rest, 0, 0, F1,
						      F2, F3, F4);
	    5 -> 'skip_32_mesos.v1.ACLs'(Rest, 0, 0, F1, F2, F3, F4)
	  end
    end;
'dg_read_field_def_mesos.v1.ACLs'(<<>>, 0, 0, F1, F2,
				  F3, F4) ->
    #'mesos.v1.ACLs'{permissive = F1,
		     register_frameworks = lists:reverse(F2),
		     run_tasks = lists:reverse(F3),
		     shutdown_frameworks = lists:reverse(F4)}.

'd_field_mesos.v1.ACLs_permissive'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_mesos.v1.ACLs_permissive'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4);
'd_field_mesos.v1.ACLs_permissive'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, F3, F4) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_mesos.v1.ACLs'(Rest, 0, 0,
				       NewFValue, F2, F3, F4).


'd_field_mesos.v1.ACLs_register_frameworks'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_mesos.v1.ACLs_register_frameworks'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4);
'd_field_mesos.v1.ACLs_register_frameworks'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.ACL.RegisterFramework'),
    'dfp_read_field_def_mesos.v1.ACLs'(Rest2, 0, 0, F1,
				       [NewFValue | F2], F3, F4).


'd_field_mesos.v1.ACLs_run_tasks'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_mesos.v1.ACLs_run_tasks'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4);
'd_field_mesos.v1.ACLs_run_tasks'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.ACL.RunTask'),
    'dfp_read_field_def_mesos.v1.ACLs'(Rest2, 0, 0, F1, F2,
				       [NewFValue | F3], F4).


'd_field_mesos.v1.ACLs_shutdown_frameworks'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_mesos.v1.ACLs_shutdown_frameworks'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4);
'd_field_mesos.v1.ACLs_shutdown_frameworks'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.ACL.ShutdownFramework'),
    'dfp_read_field_def_mesos.v1.ACLs'(Rest2, 0, 0, F1, F2,
				       F3, [NewFValue | F4]).


'skip_varint_mesos.v1.ACLs'(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4) ->
    'skip_varint_mesos.v1.ACLs'(Rest, Z1, Z2, F1, F2, F3,
				F4);
'skip_varint_mesos.v1.ACLs'(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4) ->
    'dfp_read_field_def_mesos.v1.ACLs'(Rest, Z1, Z2, F1, F2,
				       F3, F4).


'skip_length_delimited_mesos.v1.ACLs'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ACLs'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4);
'skip_length_delimited_mesos.v1.ACLs'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ACLs'(Rest2, 0, 0, F1, F2,
				       F3, F4).


'skip_32_mesos.v1.ACLs'(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4) ->
    'dfp_read_field_def_mesos.v1.ACLs'(Rest, Z1, Z2, F1, F2,
				       F3, F4).


'skip_64_mesos.v1.ACLs'(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4) ->
    'dfp_read_field_def_mesos.v1.ACLs'(Rest, Z1, Z2, F1, F2,
				       F3, F4).


'd_msg_mesos.v1.MasterInfo'(Bin) ->
    'dfp_read_field_def_mesos.v1.MasterInfo'(Bin, 0, 0,
					     undefined, undefined, undefined,
					     undefined, undefined, undefined,
					     undefined).

'dfp_read_field_def_mesos.v1.MasterInfo'(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.MasterInfo_id'(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.MasterInfo'(<<16,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.MasterInfo_ip'(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.MasterInfo'(<<24,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.MasterInfo_port'(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.MasterInfo'(<<34,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.MasterInfo_pid'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.MasterInfo'(<<42,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.MasterInfo_hostname'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.MasterInfo'(<<50,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.MasterInfo_version'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.MasterInfo'(<<58,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'd_field_mesos.v1.MasterInfo_address'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_mesos.v1.MasterInfo'(<<>>, 0, 0, F1,
					 F2, F3, F4, F5, F6, F7) ->
    #'mesos.v1.MasterInfo'{id = F1, ip = F2, port = F3,
			   pid = F4, hostname = F5, version = F6, address = F7};
'dfp_read_field_def_mesos.v1.MasterInfo'(Other, Z1, Z2,
					 F1, F2, F3, F4, F5, F6, F7) ->
    'dg_read_field_def_mesos.v1.MasterInfo'(Other, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7).

'dg_read_field_def_mesos.v1.MasterInfo'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.MasterInfo'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7);
'dg_read_field_def_mesos.v1.MasterInfo'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.MasterInfo_id'(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7);
      16 ->
	  'd_field_mesos.v1.MasterInfo_ip'(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7);
      24 ->
	  'd_field_mesos.v1.MasterInfo_port'(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7);
      34 ->
	  'd_field_mesos.v1.MasterInfo_pid'(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7);
      42 ->
	  'd_field_mesos.v1.MasterInfo_hostname'(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7);
      50 ->
	  'd_field_mesos.v1.MasterInfo_version'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7);
      58 ->
	  'd_field_mesos.v1.MasterInfo_address'(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.MasterInfo'(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7);
	    1 ->
		'skip_64_mesos.v1.MasterInfo'(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6, F7);
	    2 ->
		'skip_length_delimited_mesos.v1.MasterInfo'(Rest, 0, 0,
							    F1, F2, F3, F4, F5,
							    F6, F7);
	    5 ->
		'skip_32_mesos.v1.MasterInfo'(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6, F7)
	  end
    end;
'dg_read_field_def_mesos.v1.MasterInfo'(<<>>, 0, 0, F1,
					F2, F3, F4, F5, F6, F7) ->
    #'mesos.v1.MasterInfo'{id = F1, ip = F2, port = F3,
			   pid = F4, hostname = F5, version = F6, address = F7}.

'd_field_mesos.v1.MasterInfo_id'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.MasterInfo_id'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
'd_field_mesos.v1.MasterInfo_id'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.MasterInfo'(Rest2, 0, 0,
					     NewFValue, F2, F3, F4, F5, F6, F7).


'd_field_mesos.v1.MasterInfo_ip'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.MasterInfo_ip'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
'd_field_mesos.v1.MasterInfo_ip'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, _, F3, F4, F5, F6, F7) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.MasterInfo'(Rest, 0, 0, F1,
					     NewFValue, F3, F4, F5, F6, F7).


'd_field_mesos.v1.MasterInfo_port'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.MasterInfo_port'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7);
'd_field_mesos.v1.MasterInfo_port'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, _, F4, F5, F6, F7) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_mesos.v1.MasterInfo'(Rest, 0, 0, F1,
					     F2, NewFValue, F4, F5, F6, F7).


'd_field_mesos.v1.MasterInfo_pid'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.MasterInfo_pid'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				      F7);
'd_field_mesos.v1.MasterInfo_pid'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, _, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.MasterInfo'(Rest2, 0, 0,
					     F1, F2, F3, NewFValue, F5, F6, F7).


'd_field_mesos.v1.MasterInfo_hostname'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.MasterInfo_hostname'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7);
'd_field_mesos.v1.MasterInfo_hostname'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, _, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.MasterInfo'(Rest2, 0, 0,
					     F1, F2, F3, F4, NewFValue, F6, F7).


'd_field_mesos.v1.MasterInfo_version'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.MasterInfo_version'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7);
'd_field_mesos.v1.MasterInfo_version'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, _, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.MasterInfo'(Rest2, 0, 0,
					     F1, F2, F3, F4, F5, NewFValue, F7).


'd_field_mesos.v1.MasterInfo_address'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_mesos.v1.MasterInfo_address'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7);
'd_field_mesos.v1.MasterInfo_address'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Address'),
    'dfp_read_field_def_mesos.v1.MasterInfo'(Rest2, 0, 0,
					     F1, F2, F3, F4, F5, F6,
					     if F7 == undefined -> NewFValue;
						true ->
						    'merge_msg_mesos.v1.Address'(F7,
										 NewFValue)
					     end).


'skip_varint_mesos.v1.MasterInfo'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'skip_varint_mesos.v1.MasterInfo'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7);
'skip_varint_mesos.v1.MasterInfo'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_mesos.v1.MasterInfo'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7).


'skip_length_delimited_mesos.v1.MasterInfo'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.MasterInfo'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7);
'skip_length_delimited_mesos.v1.MasterInfo'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6,
					    F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.MasterInfo'(Rest2, 0, 0,
					     F1, F2, F3, F4, F5, F6, F7).


'skip_32_mesos.v1.MasterInfo'(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_mesos.v1.MasterInfo'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7).


'skip_64_mesos.v1.MasterInfo'(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_mesos.v1.MasterInfo'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7).


'd_msg_mesos.v1.ResourceUsage'(Bin) ->
    'dfp_read_field_def_mesos.v1.ResourceUsage'(Bin, 0, 0,
						[], []).

'dfp_read_field_def_mesos.v1.ResourceUsage'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.ResourceUsage_executors'(Rest, Z1, Z2,
					       F1, F2);
'dfp_read_field_def_mesos.v1.ResourceUsage'(<<18,
					      Rest/binary>>,
					    Z1, Z2, F1, F2) ->
    'd_field_mesos.v1.ResourceUsage_total'(Rest, Z1, Z2, F1,
					   F2);
'dfp_read_field_def_mesos.v1.ResourceUsage'(<<>>, 0, 0,
					    F1, F2) ->
    #'mesos.v1.ResourceUsage'{executors = lists:reverse(F1),
			      total = lists:reverse(F2)};
'dfp_read_field_def_mesos.v1.ResourceUsage'(Other, Z1,
					    Z2, F1, F2) ->
    'dg_read_field_def_mesos.v1.ResourceUsage'(Other, Z1,
					       Z2, F1, F2).

'dg_read_field_def_mesos.v1.ResourceUsage'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ResourceUsage'(Rest, N + 7,
					       X bsl N + Acc, F1, F2);
'dg_read_field_def_mesos.v1.ResourceUsage'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.ResourceUsage_executors'(Rest, 0, 0,
						     F1, F2);
      18 ->
	  'd_field_mesos.v1.ResourceUsage_total'(Rest, 0, 0, F1,
						 F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.ResourceUsage'(Rest, 0, 0, F1,
						     F2);
	    1 ->
		'skip_64_mesos.v1.ResourceUsage'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_mesos.v1.ResourceUsage'(Rest, 0,
							       0, F1, F2);
	    5 ->
		'skip_32_mesos.v1.ResourceUsage'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_mesos.v1.ResourceUsage'(<<>>, 0, 0,
					   F1, F2) ->
    #'mesos.v1.ResourceUsage'{executors = lists:reverse(F1),
			      total = lists:reverse(F2)}.

'd_field_mesos.v1.ResourceUsage_executors'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.ResourceUsage_executors'(Rest, N + 7,
					       X bsl N + Acc, F1, F2);
'd_field_mesos.v1.ResourceUsage_executors'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'mesos.v1.ResourceUsage.Executor'),
    'dfp_read_field_def_mesos.v1.ResourceUsage'(Rest2, 0, 0,
						[NewFValue | F1], F2).


'd_field_mesos.v1.ResourceUsage_total'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 57 ->
    'd_field_mesos.v1.ResourceUsage_total'(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
'd_field_mesos.v1.ResourceUsage_total'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Resource'),
    'dfp_read_field_def_mesos.v1.ResourceUsage'(Rest2, 0, 0,
						F1, [NewFValue | F2]).


'skip_varint_mesos.v1.ResourceUsage'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    'skip_varint_mesos.v1.ResourceUsage'(Rest, Z1, Z2, F1,
					 F2);
'skip_varint_mesos.v1.ResourceUsage'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ResourceUsage'(Rest, Z1,
						Z2, F1, F2).


'skip_length_delimited_mesos.v1.ResourceUsage'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ResourceUsage'(Rest,
						   N + 7, X bsl N + Acc, F1,
						   F2);
'skip_length_delimited_mesos.v1.ResourceUsage'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ResourceUsage'(Rest2, 0, 0,
						F1, F2).


'skip_32_mesos.v1.ResourceUsage'(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ResourceUsage'(Rest, Z1,
						Z2, F1, F2).


'skip_64_mesos.v1.ResourceUsage'(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_mesos.v1.ResourceUsage'(Rest, Z1,
						Z2, F1, F2).


'd_msg_mesos.v1.Value'(Bin) ->
    'dfp_read_field_def_mesos.v1.Value'(Bin, 0, 0,
					undefined, undefined, undefined,
					undefined, undefined).

'dfp_read_field_def_mesos.v1.Value'(<<8, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.Value_type'(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5);
'dfp_read_field_def_mesos.v1.Value'(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.Value_scalar'(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5);
'dfp_read_field_def_mesos.v1.Value'(<<26, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.Value_ranges'(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5);
'dfp_read_field_def_mesos.v1.Value'(<<34, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.Value_set'(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5);
'dfp_read_field_def_mesos.v1.Value'(<<42, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_mesos.v1.Value_text'(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5);
'dfp_read_field_def_mesos.v1.Value'(<<>>, 0, 0, F1, F2,
				    F3, F4, F5) ->
    #'mesos.v1.Value'{type = F1, scalar = F2, ranges = F3,
		      set = F4, text = F5};
'dfp_read_field_def_mesos.v1.Value'(Other, Z1, Z2, F1,
				    F2, F3, F4, F5) ->
    'dg_read_field_def_mesos.v1.Value'(Other, Z1, Z2, F1,
				       F2, F3, F4, F5).

'dg_read_field_def_mesos.v1.Value'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.Value'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5);
'dg_read_field_def_mesos.v1.Value'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_mesos.v1.Value_type'(Rest, 0, 0, F1, F2, F3,
					F4, F5);
      18 ->
	  'd_field_mesos.v1.Value_scalar'(Rest, 0, 0, F1, F2, F3,
					  F4, F5);
      26 ->
	  'd_field_mesos.v1.Value_ranges'(Rest, 0, 0, F1, F2, F3,
					  F4, F5);
      34 ->
	  'd_field_mesos.v1.Value_set'(Rest, 0, 0, F1, F2, F3, F4,
				       F5);
      42 ->
	  'd_field_mesos.v1.Value_text'(Rest, 0, 0, F1, F2, F3,
					F4, F5);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mesos.v1.Value'(Rest, 0, 0, F1, F2, F3, F4,
					     F5);
	    1 ->
		'skip_64_mesos.v1.Value'(Rest, 0, 0, F1, F2, F3, F4,
					 F5);
	    2 ->
		'skip_length_delimited_mesos.v1.Value'(Rest, 0, 0, F1,
						       F2, F3, F4, F5);
	    5 ->
		'skip_32_mesos.v1.Value'(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
'dg_read_field_def_mesos.v1.Value'(<<>>, 0, 0, F1, F2,
				   F3, F4, F5) ->
    #'mesos.v1.Value'{type = F1, scalar = F2, ranges = F3,
		      set = F4, text = F5}.

'd_field_mesos.v1.Value_type'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.Value_type'(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.Value_type'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, F3, F4, F5) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_mesos.v1.Value.Type'(Tmp),
    'dfp_read_field_def_mesos.v1.Value'(Rest, 0, 0,
					NewFValue, F2, F3, F4, F5).


'd_field_mesos.v1.Value_scalar'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.Value_scalar'(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.Value_scalar'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Value.Scalar'),
    'dfp_read_field_def_mesos.v1.Value'(Rest2, 0, 0, F1,
					if F2 == undefined -> NewFValue;
					   true ->
					       'merge_msg_mesos.v1.Value.Scalar'(F2,
										 NewFValue)
					end,
					F3, F4, F5).


'd_field_mesos.v1.Value_ranges'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.Value_ranges'(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.Value_ranges'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Value.Ranges'),
    'dfp_read_field_def_mesos.v1.Value'(Rest2, 0, 0, F1, F2,
					if F3 == undefined -> NewFValue;
					   true ->
					       'merge_msg_mesos.v1.Value.Ranges'(F3,
										 NewFValue)
					end,
					F4, F5).


'd_field_mesos.v1.Value_set'(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.Value_set'(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5);
'd_field_mesos.v1.Value_set'(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Value.Set'),
    'dfp_read_field_def_mesos.v1.Value'(Rest2, 0, 0, F1, F2,
					F3,
					if F4 == undefined -> NewFValue;
					   true ->
					       'merge_msg_mesos.v1.Value.Set'(F4,
									      NewFValue)
					end,
					F5).


'd_field_mesos.v1.Value_text'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_mesos.v1.Value_text'(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_mesos.v1.Value_text'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'mesos.v1.Value.Text'),
    'dfp_read_field_def_mesos.v1.Value'(Rest2, 0, 0, F1, F2,
					F3, F4,
					if F5 == undefined -> NewFValue;
					   true ->
					       'merge_msg_mesos.v1.Value.Text'(F5,
									       NewFValue)
					end).


'skip_varint_mesos.v1.Value'(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5) ->
    'skip_varint_mesos.v1.Value'(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5);
'skip_varint_mesos.v1.Value'(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_mesos.v1.Value'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5).


'skip_length_delimited_mesos.v1.Value'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.Value'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5);
'skip_length_delimited_mesos.v1.Value'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.Value'(Rest2, 0, 0, F1, F2,
					F3, F4, F5).


'skip_32_mesos.v1.Value'(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_mesos.v1.Value'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5).


'skip_64_mesos.v1.Value'(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_mesos.v1.Value'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5).


'd_msg_mesos.v1.ContainerID'(Bin) ->
    'dfp_read_field_def_mesos.v1.ContainerID'(Bin, 0, 0,
					      undefined).

'dfp_read_field_def_mesos.v1.ContainerID'(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    'd_field_mesos.v1.ContainerID_value'(Rest, Z1, Z2, F1);
'dfp_read_field_def_mesos.v1.ContainerID'(<<>>, 0, 0,
					  F1) ->
    #'mesos.v1.ContainerID'{value = F1};
'dfp_read_field_def_mesos.v1.ContainerID'(Other, Z1, Z2,
					  F1) ->
    'dg_read_field_def_mesos.v1.ContainerID'(Other, Z1, Z2,
					     F1).

'dg_read_field_def_mesos.v1.ContainerID'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_mesos.v1.ContainerID'(Rest, N + 7,
					     X bsl N + Acc, F1);
'dg_read_field_def_mesos.v1.ContainerID'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mesos.v1.ContainerID_value'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_mesos.v1.ContainerID'(Rest, 0, 0, F1);
	    1 -> 'skip_64_mesos.v1.ContainerID'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_mesos.v1.ContainerID'(Rest, 0, 0,
							     F1);
	    5 -> 'skip_32_mesos.v1.ContainerID'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_mesos.v1.ContainerID'(<<>>, 0, 0,
					 F1) ->
    #'mesos.v1.ContainerID'{value = F1}.

'd_field_mesos.v1.ContainerID_value'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 57 ->
    'd_field_mesos.v1.ContainerID_value'(Rest, N + 7,
					 X bsl N + Acc, F1);
'd_field_mesos.v1.ContainerID_value'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_mesos.v1.ContainerID'(Rest2, 0, 0,
					      NewFValue).


'skip_varint_mesos.v1.ContainerID'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    'skip_varint_mesos.v1.ContainerID'(Rest, Z1, Z2, F1);
'skip_varint_mesos.v1.ContainerID'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.ContainerID'(Rest, Z1, Z2,
					      F1).


'skip_length_delimited_mesos.v1.ContainerID'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_mesos.v1.ContainerID'(Rest,
						 N + 7, X bsl N + Acc, F1);
'skip_length_delimited_mesos.v1.ContainerID'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mesos.v1.ContainerID'(Rest2, 0, 0,
					      F1).


'skip_32_mesos.v1.ContainerID'(<<_:32, Rest/binary>>,
			       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.ContainerID'(Rest, Z1, Z2,
					      F1).


'skip_64_mesos.v1.ContainerID'(<<_:64, Rest/binary>>,
			       Z1, Z2, F1) ->
    'dfp_read_field_def_mesos.v1.ContainerID'(Rest, Z1, Z2,
					      F1).




merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #'mesos.v1.Label'{} ->
	  'merge_msg_mesos.v1.Label'(Prev, New);
      #'mesos.v1.Labels'{} ->
	  'merge_msg_mesos.v1.Labels'(Prev, New);
      #'mesos.v1.Image.AppC'{} ->
	  'merge_msg_mesos.v1.Image.AppC'(Prev, New);
      #'mesos.v1.Image'{} ->
	  'merge_msg_mesos.v1.Image'(Prev, New);
      #'mesos.v1.ContainerInfo.MesosInfo'{} ->
	  'merge_msg_mesos.v1.ContainerInfo.MesosInfo'(Prev, New);
      #'mesos.v1.Parameter'{} ->
	  'merge_msg_mesos.v1.Parameter'(Prev, New);
      #'mesos.v1.ContainerInfo.DockerInfo.PortMapping'{} ->
	  'merge_msg_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Prev,
								    New);
      #'mesos.v1.ContainerInfo.DockerInfo'{} ->
	  'merge_msg_mesos.v1.ContainerInfo.DockerInfo'(Prev,
							New);
      #'mesos.v1.Volume'{} ->
	  'merge_msg_mesos.v1.Volume'(Prev, New);
      #'mesos.v1.ContainerInfo'{} ->
	  'merge_msg_mesos.v1.ContainerInfo'(Prev, New);
      #'mesos.v1.AgentID'{} ->
	  'merge_msg_mesos.v1.AgentID'(Prev, New);
      #'mesos.v1.Value.Text'{} ->
	  'merge_msg_mesos.v1.Value.Text'(Prev, New);
      #'mesos.v1.Value.Set'{} ->
	  'merge_msg_mesos.v1.Value.Set'(Prev, New);
      #'mesos.v1.Value.Range'{} ->
	  'merge_msg_mesos.v1.Value.Range'(Prev, New);
      #'mesos.v1.Value.Ranges'{} ->
	  'merge_msg_mesos.v1.Value.Ranges'(Prev, New);
      #'mesos.v1.Value.Scalar'{} ->
	  'merge_msg_mesos.v1.Value.Scalar'(Prev, New);
      #'mesos.v1.Attribute'{} ->
	  'merge_msg_mesos.v1.Attribute'(Prev, New);
      #'mesos.v1.Resource.RevocableInfo'{} ->
	  'merge_msg_mesos.v1.Resource.RevocableInfo'(Prev, New);
      #'mesos.v1.Resource.DiskInfo.Persistence'{} ->
	  'merge_msg_mesos.v1.Resource.DiskInfo.Persistence'(Prev,
							     New);
      #'mesos.v1.Resource.DiskInfo'{} ->
	  'merge_msg_mesos.v1.Resource.DiskInfo'(Prev, New);
      #'mesos.v1.Resource.ReservationInfo'{} ->
	  'merge_msg_mesos.v1.Resource.ReservationInfo'(Prev,
							New);
      #'mesos.v1.Resource'{} ->
	  'merge_msg_mesos.v1.Resource'(Prev, New);
      #'mesos.v1.AgentInfo'{} ->
	  'merge_msg_mesos.v1.AgentInfo'(Prev, New);
      #'mesos.v1.Request'{} ->
	  'merge_msg_mesos.v1.Request'(Prev, New);
      #'mesos.v1.scheduler.Call.Request'{} ->
	  'merge_msg_mesos.v1.scheduler.Call.Request'(Prev, New);
      #'mesos.v1.ExecutorID'{} ->
	  'merge_msg_mesos.v1.ExecutorID'(Prev, New);
      #'mesos.v1.scheduler.Call.Message'{} ->
	  'merge_msg_mesos.v1.scheduler.Call.Message'(Prev, New);
      #'mesos.v1.TaskID'{} ->
	  'merge_msg_mesos.v1.TaskID'(Prev, New);
      #'mesos.v1.scheduler.Call.Reconcile.Task'{} ->
	  'merge_msg_mesos.v1.scheduler.Call.Reconcile.Task'(Prev,
							     New);
      #'mesos.v1.scheduler.Call.Reconcile'{} ->
	  'merge_msg_mesos.v1.scheduler.Call.Reconcile'(Prev,
							New);
      #'mesos.v1.scheduler.Call.Acknowledge'{} ->
	  'merge_msg_mesos.v1.scheduler.Call.Acknowledge'(Prev,
							  New);
      #'mesos.v1.scheduler.Call.Shutdown'{} ->
	  'merge_msg_mesos.v1.scheduler.Call.Shutdown'(Prev, New);
      #'mesos.v1.scheduler.Call.Kill'{} ->
	  'merge_msg_mesos.v1.scheduler.Call.Kill'(Prev, New);
      #'mesos.v1.Filters'{} ->
	  'merge_msg_mesos.v1.Filters'(Prev, New);
      #'mesos.v1.OfferID'{} ->
	  'merge_msg_mesos.v1.OfferID'(Prev, New);
      #'mesos.v1.scheduler.Call.Decline'{} ->
	  'merge_msg_mesos.v1.scheduler.Call.Decline'(Prev, New);
      #'mesos.v1.Offer.Operation.Destroy'{} ->
	  'merge_msg_mesos.v1.Offer.Operation.Destroy'(Prev, New);
      #'mesos.v1.Offer.Operation.Create'{} ->
	  'merge_msg_mesos.v1.Offer.Operation.Create'(Prev, New);
      #'mesos.v1.Offer.Operation.Unreserve'{} ->
	  'merge_msg_mesos.v1.Offer.Operation.Unreserve'(Prev,
							 New);
      #'mesos.v1.Offer.Operation.Reserve'{} ->
	  'merge_msg_mesos.v1.Offer.Operation.Reserve'(Prev, New);
      #'mesos.v1.Port'{} ->
	  'merge_msg_mesos.v1.Port'(Prev, New);
      #'mesos.v1.Ports'{} ->
	  'merge_msg_mesos.v1.Ports'(Prev, New);
      #'mesos.v1.DiscoveryInfo'{} ->
	  'merge_msg_mesos.v1.DiscoveryInfo'(Prev, New);
      #'mesos.v1.Environment.Variable'{} ->
	  'merge_msg_mesos.v1.Environment.Variable'(Prev, New);
      #'mesos.v1.Environment'{} ->
	  'merge_msg_mesos.v1.Environment'(Prev, New);
      #'mesos.v1.CommandInfo.URI'{} ->
	  'merge_msg_mesos.v1.CommandInfo.URI'(Prev, New);
      #'mesos.v1.CommandInfo.ContainerInfo'{} ->
	  'merge_msg_mesos.v1.CommandInfo.ContainerInfo'(Prev,
							 New);
      #'mesos.v1.CommandInfo'{} ->
	  'merge_msg_mesos.v1.CommandInfo'(Prev, New);
      #'mesos.v1.HealthCheck.HTTP'{} ->
	  'merge_msg_mesos.v1.HealthCheck.HTTP'(Prev, New);
      #'mesos.v1.HealthCheck'{} ->
	  'merge_msg_mesos.v1.HealthCheck'(Prev, New);
      #'mesos.v1.FrameworkID'{} ->
	  'merge_msg_mesos.v1.FrameworkID'(Prev, New);
      #'mesos.v1.ExecutorInfo'{} ->
	  'merge_msg_mesos.v1.ExecutorInfo'(Prev, New);
      #'mesos.v1.TaskInfo'{} ->
	  'merge_msg_mesos.v1.TaskInfo'(Prev, New);
      #'mesos.v1.Offer.Operation.Launch'{} ->
	  'merge_msg_mesos.v1.Offer.Operation.Launch'(Prev, New);
      #'mesos.v1.Offer.Operation'{} ->
	  'merge_msg_mesos.v1.Offer.Operation'(Prev, New);
      #'mesos.v1.scheduler.Call.Accept'{} ->
	  'merge_msg_mesos.v1.scheduler.Call.Accept'(Prev, New);
      #'mesos.v1.FrameworkInfo.Capability'{} ->
	  'merge_msg_mesos.v1.FrameworkInfo.Capability'(Prev,
							New);
      #'mesos.v1.FrameworkInfo'{} ->
	  'merge_msg_mesos.v1.FrameworkInfo'(Prev, New);
      #'mesos.v1.scheduler.Call.Subscribe'{} ->
	  'merge_msg_mesos.v1.scheduler.Call.Subscribe'(Prev,
							New);
      #'mesos.v1.scheduler.Call'{} ->
	  'merge_msg_mesos.v1.scheduler.Call'(Prev, New);
      #'mesos.v1.RateLimit'{} ->
	  'merge_msg_mesos.v1.RateLimit'(Prev, New);
      #'mesos.v1.RateLimits'{} ->
	  'merge_msg_mesos.v1.RateLimits'(Prev, New);
      #'mesos.v1.Parameters'{} ->
	  'merge_msg_mesos.v1.Parameters'(Prev, New);
      #'mesos.v1.Address'{} ->
	  'merge_msg_mesos.v1.Address'(Prev, New);
      #'mesos.v1.URL'{} ->
	  'merge_msg_mesos.v1.URL'(Prev, New);
      #'mesos.v1.Offer'{} ->
	  'merge_msg_mesos.v1.Offer'(Prev, New);
      #'mesos.v1.Credential'{} ->
	  'merge_msg_mesos.v1.Credential'(Prev, New);
      #'mesos.v1.ACL.Entity'{} ->
	  'merge_msg_mesos.v1.ACL.Entity'(Prev, New);
      #'mesos.v1.TaskStatus'{} ->
	  'merge_msg_mesos.v1.TaskStatus'(Prev, New);
      #'mesos.v1.scheduler.Event.Update'{} ->
	  'merge_msg_mesos.v1.scheduler.Event.Update'(Prev, New);
      #'mesos.v1.scheduler.Event.Error'{} ->
	  'merge_msg_mesos.v1.scheduler.Event.Error'(Prev, New);
      #'mesos.v1.scheduler.Event.Failure'{} ->
	  'merge_msg_mesos.v1.scheduler.Event.Failure'(Prev, New);
      #'mesos.v1.scheduler.Event.Message'{} ->
	  'merge_msg_mesos.v1.scheduler.Event.Message'(Prev, New);
      #'mesos.v1.scheduler.Event.Rescind'{} ->
	  'merge_msg_mesos.v1.scheduler.Event.Rescind'(Prev, New);
      #'mesos.v1.scheduler.Event.Offers'{} ->
	  'merge_msg_mesos.v1.scheduler.Event.Offers'(Prev, New);
      #'mesos.v1.scheduler.Event.Subscribed'{} ->
	  'merge_msg_mesos.v1.scheduler.Event.Subscribed'(Prev,
							  New);
      #'mesos.v1.scheduler.Event'{} ->
	  'merge_msg_mesos.v1.scheduler.Event'(Prev, New);
      #'mesos.v1.TrafficControlStatistics'{} ->
	  'merge_msg_mesos.v1.TrafficControlStatistics'(Prev,
							New);
      #'mesos.v1.PerfStatistics'{} ->
	  'merge_msg_mesos.v1.PerfStatistics'(Prev, New);
      #'mesos.v1.ResourceStatistics'{} ->
	  'merge_msg_mesos.v1.ResourceStatistics'(Prev, New);
      #'mesos.v1.Credentials'{} ->
	  'merge_msg_mesos.v1.Credentials'(Prev, New);
      #'mesos.v1.ResourceUsage.Executor'{} ->
	  'merge_msg_mesos.v1.ResourceUsage.Executor'(Prev, New);
      #'mesos.v1.ACL'{} ->
	  'merge_msg_mesos.v1.ACL'(Prev, New);
      #'mesos.v1.ACL.RunTask'{} ->
	  'merge_msg_mesos.v1.ACL.RunTask'(Prev, New);
      #'mesos.v1.ACL.RegisterFramework'{} ->
	  'merge_msg_mesos.v1.ACL.RegisterFramework'(Prev, New);
      #'mesos.v1.ACL.ShutdownFramework'{} ->
	  'merge_msg_mesos.v1.ACL.ShutdownFramework'(Prev, New);
      #'mesos.v1.ACLs'{} ->
	  'merge_msg_mesos.v1.ACLs'(Prev, New);
      #'mesos.v1.MasterInfo'{} ->
	  'merge_msg_mesos.v1.MasterInfo'(Prev, New);
      #'mesos.v1.ResourceUsage'{} ->
	  'merge_msg_mesos.v1.ResourceUsage'(Prev, New);
      #'mesos.v1.Value'{} ->
	  'merge_msg_mesos.v1.Value'(Prev, New);
      #'mesos.v1.ContainerID'{} ->
	  'merge_msg_mesos.v1.ContainerID'(Prev, New)
    end.

'merge_msg_mesos.v1.Label'(#'mesos.v1.Label'{key =
						 PFkey,
					     value = PFvalue},
			   #'mesos.v1.Label'{key = NFkey, value = NFvalue}) ->
    #'mesos.v1.Label'{key =
			  if NFkey =:= undefined -> PFkey;
			     true -> NFkey
			  end,
		      value =
			  if NFvalue =:= undefined -> PFvalue;
			     true -> NFvalue
			  end}.

'merge_msg_mesos.v1.Labels'(Prev, undefined) -> Prev;
'merge_msg_mesos.v1.Labels'(undefined, New) -> New;
'merge_msg_mesos.v1.Labels'(#'mesos.v1.Labels'{labels =
						   PFlabels},
			    #'mesos.v1.Labels'{labels = NFlabels}) ->
    #'mesos.v1.Labels'{labels = PFlabels ++ NFlabels}.

'merge_msg_mesos.v1.Image.AppC'(Prev, undefined) ->
    Prev;
'merge_msg_mesos.v1.Image.AppC'(undefined, New) -> New;
'merge_msg_mesos.v1.Image.AppC'(#'mesos.v1.Image.AppC'{name
							   = PFname,
						       id = PFid,
						       labels = PFlabels},
				#'mesos.v1.Image.AppC'{name = NFname, id = NFid,
						       labels = NFlabels}) ->
    #'mesos.v1.Image.AppC'{name =
			       if NFname =:= undefined -> PFname;
				  true -> NFname
			       end,
			   id =
			       if NFid =:= undefined -> PFid;
				  true -> NFid
			       end,
			   labels =
			       'merge_msg_mesos.v1.Labels'(PFlabels, NFlabels)}.

'merge_msg_mesos.v1.Image'(Prev, undefined) -> Prev;
'merge_msg_mesos.v1.Image'(undefined, New) -> New;
'merge_msg_mesos.v1.Image'(#'mesos.v1.Image'{type =
						 PFtype,
					     appc = PFappc},
			   #'mesos.v1.Image'{type = NFtype, appc = NFappc}) ->
    #'mesos.v1.Image'{type =
			  if NFtype =:= undefined -> PFtype;
			     true -> NFtype
			  end,
		      appc = 'merge_msg_mesos.v1.Image.AppC'(PFappc, NFappc)}.

'merge_msg_mesos.v1.ContainerInfo.MesosInfo'(Prev,
					     undefined) ->
    Prev;
'merge_msg_mesos.v1.ContainerInfo.MesosInfo'(undefined,
					     New) ->
    New;
'merge_msg_mesos.v1.ContainerInfo.MesosInfo'(#'mesos.v1.ContainerInfo.MesosInfo'{image
										     =
										     PFimage},
					     #'mesos.v1.ContainerInfo.MesosInfo'{image
										     =
										     NFimage}) ->
    #'mesos.v1.ContainerInfo.MesosInfo'{image =
					    'merge_msg_mesos.v1.Image'(PFimage,
								       NFimage)}.

'merge_msg_mesos.v1.Parameter'(#'mesos.v1.Parameter'{key
							 = PFkey,
						     value = PFvalue},
			       #'mesos.v1.Parameter'{key = NFkey,
						     value = NFvalue}) ->
    #'mesos.v1.Parameter'{key =
			      if NFkey =:= undefined -> PFkey;
				 true -> NFkey
			      end,
			  value =
			      if NFvalue =:= undefined -> PFvalue;
				 true -> NFvalue
			      end}.

'merge_msg_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(#'mesos.v1.ContainerInfo.DockerInfo.PortMapping'{host_port
													       =
													       PFhost_port,
													   container_port
													       =
													       PFcontainer_port,
													   protocol
													       =
													       PFprotocol},
							  #'mesos.v1.ContainerInfo.DockerInfo.PortMapping'{host_port
													       =
													       NFhost_port,
													   container_port
													       =
													       NFcontainer_port,
													   protocol
													       =
													       NFprotocol}) ->
    #'mesos.v1.ContainerInfo.DockerInfo.PortMapping'{host_port
							 =
							 if NFhost_port =:=
							      undefined ->
								PFhost_port;
							    true -> NFhost_port
							 end,
						     container_port =
							 if NFcontainer_port =:=
							      undefined ->
								PFcontainer_port;
							    true ->
								NFcontainer_port
							 end,
						     protocol =
							 if NFprotocol =:=
							      undefined ->
								PFprotocol;
							    true -> NFprotocol
							 end}.

'merge_msg_mesos.v1.ContainerInfo.DockerInfo'(Prev,
					      undefined) ->
    Prev;
'merge_msg_mesos.v1.ContainerInfo.DockerInfo'(undefined,
					      New) ->
    New;
'merge_msg_mesos.v1.ContainerInfo.DockerInfo'(#'mesos.v1.ContainerInfo.DockerInfo'{image
										       =
										       PFimage,
										   network
										       =
										       PFnetwork,
										   port_mappings
										       =
										       PFport_mappings,
										   privileged
										       =
										       PFprivileged,
										   parameters
										       =
										       PFparameters,
										   force_pull_image
										       =
										       PFforce_pull_image},
					      #'mesos.v1.ContainerInfo.DockerInfo'{image
										       =
										       NFimage,
										   network
										       =
										       NFnetwork,
										   port_mappings
										       =
										       NFport_mappings,
										   privileged
										       =
										       NFprivileged,
										   parameters
										       =
										       NFparameters,
										   force_pull_image
										       =
										       NFforce_pull_image}) ->
    #'mesos.v1.ContainerInfo.DockerInfo'{image =
					     if NFimage =:= undefined ->
						    PFimage;
						true -> NFimage
					     end,
					 network =
					     if NFnetwork =:= undefined ->
						    PFnetwork;
						true -> NFnetwork
					     end,
					 port_mappings =
					     PFport_mappings ++ NFport_mappings,
					 privileged =
					     if NFprivileged =:= undefined ->
						    PFprivileged;
						true -> NFprivileged
					     end,
					 parameters =
					     PFparameters ++ NFparameters,
					 force_pull_image =
					     if NFforce_pull_image =:=
						  undefined ->
						    PFforce_pull_image;
						true -> NFforce_pull_image
					     end}.

'merge_msg_mesos.v1.Volume'(Prev, undefined) -> Prev;
'merge_msg_mesos.v1.Volume'(undefined, New) -> New;
'merge_msg_mesos.v1.Volume'(#'mesos.v1.Volume'{mode =
						   PFmode,
					       container_path =
						   PFcontainer_path,
					       host_path = PFhost_path,
					       image = PFimage},
			    #'mesos.v1.Volume'{mode = NFmode,
					       container_path =
						   NFcontainer_path,
					       host_path = NFhost_path,
					       image = NFimage}) ->
    #'mesos.v1.Volume'{mode =
			   if NFmode =:= undefined -> PFmode;
			      true -> NFmode
			   end,
		       container_path =
			   if NFcontainer_path =:= undefined ->
				  PFcontainer_path;
			      true -> NFcontainer_path
			   end,
		       host_path =
			   if NFhost_path =:= undefined -> PFhost_path;
			      true -> NFhost_path
			   end,
		       image = 'merge_msg_mesos.v1.Image'(PFimage, NFimage)}.

'merge_msg_mesos.v1.ContainerInfo'(Prev, undefined) ->
    Prev;
'merge_msg_mesos.v1.ContainerInfo'(undefined, New) ->
    New;
'merge_msg_mesos.v1.ContainerInfo'(#'mesos.v1.ContainerInfo'{type
								 = PFtype,
							     volumes =
								 PFvolumes,
							     hostname =
								 PFhostname,
							     docker = PFdocker,
							     mesos = PFmesos},
				   #'mesos.v1.ContainerInfo'{type = NFtype,
							     volumes =
								 NFvolumes,
							     hostname =
								 NFhostname,
							     docker = NFdocker,
							     mesos =
								 NFmesos}) ->
    #'mesos.v1.ContainerInfo'{type =
				  if NFtype =:= undefined -> PFtype;
				     true -> NFtype
				  end,
			      volumes = PFvolumes ++ NFvolumes,
			      hostname =
				  if NFhostname =:= undefined -> PFhostname;
				     true -> NFhostname
				  end,
			      docker =
				  'merge_msg_mesos.v1.ContainerInfo.DockerInfo'(PFdocker,
										NFdocker),
			      mesos =
				  'merge_msg_mesos.v1.ContainerInfo.MesosInfo'(PFmesos,
									       NFmesos)}.

'merge_msg_mesos.v1.AgentID'(Prev, undefined) -> Prev;
'merge_msg_mesos.v1.AgentID'(undefined, New) -> New;
'merge_msg_mesos.v1.AgentID'(#'mesos.v1.AgentID'{value =
						     PFvalue},
			     #'mesos.v1.AgentID'{value = NFvalue}) ->
    #'mesos.v1.AgentID'{value =
			    if NFvalue =:= undefined -> PFvalue;
			       true -> NFvalue
			    end}.

'merge_msg_mesos.v1.Value.Text'(Prev, undefined) ->
    Prev;
'merge_msg_mesos.v1.Value.Text'(undefined, New) -> New;
'merge_msg_mesos.v1.Value.Text'(#'mesos.v1.Value.Text'{value
							   = PFvalue},
				#'mesos.v1.Value.Text'{value = NFvalue}) ->
    #'mesos.v1.Value.Text'{value =
			       if NFvalue =:= undefined -> PFvalue;
				  true -> NFvalue
			       end}.

'merge_msg_mesos.v1.Value.Set'(Prev, undefined) -> Prev;
'merge_msg_mesos.v1.Value.Set'(undefined, New) -> New;
'merge_msg_mesos.v1.Value.Set'(#'mesos.v1.Value.Set'{item
							 = PFitem},
			       #'mesos.v1.Value.Set'{item = NFitem}) ->
    #'mesos.v1.Value.Set'{item = PFitem ++ NFitem}.

'merge_msg_mesos.v1.Value.Range'(#'mesos.v1.Value.Range'{'begin'
							     = PFbegin,
							 'end' = PFend},
				 #'mesos.v1.Value.Range'{'begin' = NFbegin,
							 'end' = NFend}) ->
    #'mesos.v1.Value.Range'{'begin' =
				if NFbegin =:= undefined -> PFbegin;
				   true -> NFbegin
				end,
			    'end' =
				if NFend =:= undefined -> PFend;
				   true -> NFend
				end}.

'merge_msg_mesos.v1.Value.Ranges'(Prev, undefined) ->
    Prev;
'merge_msg_mesos.v1.Value.Ranges'(undefined, New) ->
    New;
'merge_msg_mesos.v1.Value.Ranges'(#'mesos.v1.Value.Ranges'{range
							       = PFrange},
				  #'mesos.v1.Value.Ranges'{range = NFrange}) ->
    #'mesos.v1.Value.Ranges'{range = PFrange ++ NFrange}.

'merge_msg_mesos.v1.Value.Scalar'(Prev, undefined) ->
    Prev;
'merge_msg_mesos.v1.Value.Scalar'(undefined, New) ->
    New;
'merge_msg_mesos.v1.Value.Scalar'(#'mesos.v1.Value.Scalar'{value
							       = PFvalue},
				  #'mesos.v1.Value.Scalar'{value = NFvalue}) ->
    #'mesos.v1.Value.Scalar'{value =
				 if NFvalue =:= undefined -> PFvalue;
				    true -> NFvalue
				 end}.

'merge_msg_mesos.v1.Attribute'(#'mesos.v1.Attribute'{name
							 = PFname,
						     type = PFtype,
						     scalar = PFscalar,
						     ranges = PFranges,
						     set = PFset,
						     text = PFtext},
			       #'mesos.v1.Attribute'{name = NFname,
						     type = NFtype,
						     scalar = NFscalar,
						     ranges = NFranges,
						     set = NFset,
						     text = NFtext}) ->
    #'mesos.v1.Attribute'{name =
			      if NFname =:= undefined -> PFname;
				 true -> NFname
			      end,
			  type =
			      if NFtype =:= undefined -> PFtype;
				 true -> NFtype
			      end,
			  scalar =
			      'merge_msg_mesos.v1.Value.Scalar'(PFscalar,
								NFscalar),
			  ranges =
			      'merge_msg_mesos.v1.Value.Ranges'(PFranges,
								NFranges),
			  set = 'merge_msg_mesos.v1.Value.Set'(PFset, NFset),
			  text =
			      'merge_msg_mesos.v1.Value.Text'(PFtext, NFtext)}.

'merge_msg_mesos.v1.Resource.RevocableInfo'(_Prev,
					    New) ->
    New.

'merge_msg_mesos.v1.Resource.DiskInfo.Persistence'(Prev,
						   undefined) ->
    Prev;
'merge_msg_mesos.v1.Resource.DiskInfo.Persistence'(undefined,
						   New) ->
    New;
'merge_msg_mesos.v1.Resource.DiskInfo.Persistence'(#'mesos.v1.Resource.DiskInfo.Persistence'{id
												 =
												 PFid},
						   #'mesos.v1.Resource.DiskInfo.Persistence'{id
												 =
												 NFid}) ->
    #'mesos.v1.Resource.DiskInfo.Persistence'{id =
						  if NFid =:= undefined -> PFid;
						     true -> NFid
						  end}.

'merge_msg_mesos.v1.Resource.DiskInfo'(Prev,
				       undefined) ->
    Prev;
'merge_msg_mesos.v1.Resource.DiskInfo'(undefined,
				       New) ->
    New;
'merge_msg_mesos.v1.Resource.DiskInfo'(#'mesos.v1.Resource.DiskInfo'{persistence
									 =
									 PFpersistence,
								     volume =
									 PFvolume},
				       #'mesos.v1.Resource.DiskInfo'{persistence
									 =
									 NFpersistence,
								     volume =
									 NFvolume}) ->
    #'mesos.v1.Resource.DiskInfo'{persistence =
				      'merge_msg_mesos.v1.Resource.DiskInfo.Persistence'(PFpersistence,
											 NFpersistence),
				  volume =
				      'merge_msg_mesos.v1.Volume'(PFvolume,
								  NFvolume)}.

'merge_msg_mesos.v1.Resource.ReservationInfo'(Prev,
					      undefined) ->
    Prev;
'merge_msg_mesos.v1.Resource.ReservationInfo'(undefined,
					      New) ->
    New;
'merge_msg_mesos.v1.Resource.ReservationInfo'(#'mesos.v1.Resource.ReservationInfo'{principal
										       =
										       PFprincipal},
					      #'mesos.v1.Resource.ReservationInfo'{principal
										       =
										       NFprincipal}) ->
    #'mesos.v1.Resource.ReservationInfo'{principal =
					     if NFprincipal =:= undefined ->
						    PFprincipal;
						true -> NFprincipal
					     end}.

'merge_msg_mesos.v1.Resource'(#'mesos.v1.Resource'{name
						       = PFname,
						   type = PFtype,
						   scalar = PFscalar,
						   ranges = PFranges,
						   set = PFset, role = PFrole,
						   reservation = PFreservation,
						   disk = PFdisk,
						   revocable = PFrevocable},
			      #'mesos.v1.Resource'{name = NFname, type = NFtype,
						   scalar = NFscalar,
						   ranges = NFranges,
						   set = NFset, role = NFrole,
						   reservation = NFreservation,
						   disk = NFdisk,
						   revocable = NFrevocable}) ->
    #'mesos.v1.Resource'{name =
			     if NFname =:= undefined -> PFname;
				true -> NFname
			     end,
			 type =
			     if NFtype =:= undefined -> PFtype;
				true -> NFtype
			     end,
			 scalar =
			     'merge_msg_mesos.v1.Value.Scalar'(PFscalar,
							       NFscalar),
			 ranges =
			     'merge_msg_mesos.v1.Value.Ranges'(PFranges,
							       NFranges),
			 set = 'merge_msg_mesos.v1.Value.Set'(PFset, NFset),
			 role =
			     if NFrole =:= undefined -> PFrole;
				true -> NFrole
			     end,
			 reservation =
			     'merge_msg_mesos.v1.Resource.ReservationInfo'(PFreservation,
									   NFreservation),
			 disk =
			     'merge_msg_mesos.v1.Resource.DiskInfo'(PFdisk,
								    NFdisk),
			 revocable =
			     'merge_msg_mesos.v1.Resource.RevocableInfo'(PFrevocable,
									 NFrevocable)}.

'merge_msg_mesos.v1.AgentInfo'(#'mesos.v1.AgentInfo'{hostname
							 = PFhostname,
						     port = PFport,
						     resources = PFresources,
						     attributes = PFattributes,
						     id = PFid},
			       #'mesos.v1.AgentInfo'{hostname = NFhostname,
						     port = NFport,
						     resources = NFresources,
						     attributes = NFattributes,
						     id = NFid}) ->
    #'mesos.v1.AgentInfo'{hostname =
			      if NFhostname =:= undefined -> PFhostname;
				 true -> NFhostname
			      end,
			  port =
			      if NFport =:= undefined -> PFport;
				 true -> NFport
			      end,
			  resources = PFresources ++ NFresources,
			  attributes = PFattributes ++ NFattributes,
			  id = 'merge_msg_mesos.v1.AgentID'(PFid, NFid)}.

'merge_msg_mesos.v1.Request'(#'mesos.v1.Request'{agent_id
						     = PFagent_id,
						 resources = PFresources},
			     #'mesos.v1.Request'{agent_id = NFagent_id,
						 resources = NFresources}) ->
    #'mesos.v1.Request'{agent_id =
			    'merge_msg_mesos.v1.AgentID'(PFagent_id,
							 NFagent_id),
			resources = PFresources ++ NFresources}.

'merge_msg_mesos.v1.scheduler.Call.Request'(Prev,
					    undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Call.Request'(undefined,
					    New) ->
    New;
'merge_msg_mesos.v1.scheduler.Call.Request'(#'mesos.v1.scheduler.Call.Request'{requests
										   =
										   PFrequests},
					    #'mesos.v1.scheduler.Call.Request'{requests
										   =
										   NFrequests}) ->
    #'mesos.v1.scheduler.Call.Request'{requests =
					   PFrequests ++ NFrequests}.

'merge_msg_mesos.v1.ExecutorID'(Prev, undefined) ->
    Prev;
'merge_msg_mesos.v1.ExecutorID'(undefined, New) -> New;
'merge_msg_mesos.v1.ExecutorID'(#'mesos.v1.ExecutorID'{value
							   = PFvalue},
				#'mesos.v1.ExecutorID'{value = NFvalue}) ->
    #'mesos.v1.ExecutorID'{value =
			       if NFvalue =:= undefined -> PFvalue;
				  true -> NFvalue
			       end}.

'merge_msg_mesos.v1.scheduler.Call.Message'(Prev,
					    undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Call.Message'(undefined,
					    New) ->
    New;
'merge_msg_mesos.v1.scheduler.Call.Message'(#'mesos.v1.scheduler.Call.Message'{agent_id
										   =
										   PFagent_id,
									       executor_id
										   =
										   PFexecutor_id,
									       data
										   =
										   PFdata},
					    #'mesos.v1.scheduler.Call.Message'{agent_id
										   =
										   NFagent_id,
									       executor_id
										   =
										   NFexecutor_id,
									       data
										   =
										   NFdata}) ->
    #'mesos.v1.scheduler.Call.Message'{agent_id =
					   'merge_msg_mesos.v1.AgentID'(PFagent_id,
									NFagent_id),
				       executor_id =
					   'merge_msg_mesos.v1.ExecutorID'(PFexecutor_id,
									   NFexecutor_id),
				       data =
					   if NFdata =:= undefined -> PFdata;
					      true -> NFdata
					   end}.

'merge_msg_mesos.v1.TaskID'(#'mesos.v1.TaskID'{value =
						   PFvalue},
			    #'mesos.v1.TaskID'{value = NFvalue}) ->
    #'mesos.v1.TaskID'{value =
			   if NFvalue =:= undefined -> PFvalue;
			      true -> NFvalue
			   end}.

'merge_msg_mesos.v1.scheduler.Call.Reconcile.Task'(#'mesos.v1.scheduler.Call.Reconcile.Task'{task_id
												 =
												 PFtask_id,
											     agent_id
												 =
												 PFagent_id},
						   #'mesos.v1.scheduler.Call.Reconcile.Task'{task_id
												 =
												 NFtask_id,
											     agent_id
												 =
												 NFagent_id}) ->
    #'mesos.v1.scheduler.Call.Reconcile.Task'{task_id =
						  'merge_msg_mesos.v1.TaskID'(PFtask_id,
									      NFtask_id),
					      agent_id =
						  'merge_msg_mesos.v1.AgentID'(PFagent_id,
									       NFagent_id)}.

'merge_msg_mesos.v1.scheduler.Call.Reconcile'(Prev,
					      undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Call.Reconcile'(undefined,
					      New) ->
    New;
'merge_msg_mesos.v1.scheduler.Call.Reconcile'(#'mesos.v1.scheduler.Call.Reconcile'{tasks
										       =
										       PFtasks},
					      #'mesos.v1.scheduler.Call.Reconcile'{tasks
										       =
										       NFtasks}) ->
    #'mesos.v1.scheduler.Call.Reconcile'{tasks =
					     PFtasks ++ NFtasks}.

'merge_msg_mesos.v1.scheduler.Call.Acknowledge'(Prev,
						undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Call.Acknowledge'(undefined,
						New) ->
    New;
'merge_msg_mesos.v1.scheduler.Call.Acknowledge'(#'mesos.v1.scheduler.Call.Acknowledge'{agent_id
											   =
											   PFagent_id,
										       task_id
											   =
											   PFtask_id,
										       uuid
											   =
											   PFuuid},
						#'mesos.v1.scheduler.Call.Acknowledge'{agent_id
											   =
											   NFagent_id,
										       task_id
											   =
											   NFtask_id,
										       uuid
											   =
											   NFuuid}) ->
    #'mesos.v1.scheduler.Call.Acknowledge'{agent_id =
					       'merge_msg_mesos.v1.AgentID'(PFagent_id,
									    NFagent_id),
					   task_id =
					       'merge_msg_mesos.v1.TaskID'(PFtask_id,
									   NFtask_id),
					   uuid =
					       if NFuuid =:= undefined ->
						      PFuuid;
						  true -> NFuuid
					       end}.

'merge_msg_mesos.v1.scheduler.Call.Shutdown'(Prev,
					     undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Call.Shutdown'(undefined,
					     New) ->
    New;
'merge_msg_mesos.v1.scheduler.Call.Shutdown'(#'mesos.v1.scheduler.Call.Shutdown'{executor_id
										     =
										     PFexecutor_id,
										 agent_id
										     =
										     PFagent_id},
					     #'mesos.v1.scheduler.Call.Shutdown'{executor_id
										     =
										     NFexecutor_id,
										 agent_id
										     =
										     NFagent_id}) ->
    #'mesos.v1.scheduler.Call.Shutdown'{executor_id =
					    'merge_msg_mesos.v1.ExecutorID'(PFexecutor_id,
									    NFexecutor_id),
					agent_id =
					    'merge_msg_mesos.v1.AgentID'(PFagent_id,
									 NFagent_id)}.

'merge_msg_mesos.v1.scheduler.Call.Kill'(Prev,
					 undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Call.Kill'(undefined,
					 New) ->
    New;
'merge_msg_mesos.v1.scheduler.Call.Kill'(#'mesos.v1.scheduler.Call.Kill'{task_id
									     =
									     PFtask_id,
									 agent_id
									     =
									     PFagent_id},
					 #'mesos.v1.scheduler.Call.Kill'{task_id
									     =
									     NFtask_id,
									 agent_id
									     =
									     NFagent_id}) ->
    #'mesos.v1.scheduler.Call.Kill'{task_id =
					'merge_msg_mesos.v1.TaskID'(PFtask_id,
								    NFtask_id),
				    agent_id =
					'merge_msg_mesos.v1.AgentID'(PFagent_id,
								     NFagent_id)}.

'merge_msg_mesos.v1.Filters'(Prev, undefined) -> Prev;
'merge_msg_mesos.v1.Filters'(undefined, New) -> New;
'merge_msg_mesos.v1.Filters'(#'mesos.v1.Filters'{refuse_seconds
						     = PFrefuse_seconds},
			     #'mesos.v1.Filters'{refuse_seconds =
						     NFrefuse_seconds}) ->
    #'mesos.v1.Filters'{refuse_seconds =
			    if NFrefuse_seconds =:= undefined ->
				   PFrefuse_seconds;
			       true -> NFrefuse_seconds
			    end}.

'merge_msg_mesos.v1.OfferID'(#'mesos.v1.OfferID'{value =
						     PFvalue},
			     #'mesos.v1.OfferID'{value = NFvalue}) ->
    #'mesos.v1.OfferID'{value =
			    if NFvalue =:= undefined -> PFvalue;
			       true -> NFvalue
			    end}.

'merge_msg_mesos.v1.scheduler.Call.Decline'(Prev,
					    undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Call.Decline'(undefined,
					    New) ->
    New;
'merge_msg_mesos.v1.scheduler.Call.Decline'(#'mesos.v1.scheduler.Call.Decline'{offer_ids
										   =
										   PFoffer_ids,
									       filters
										   =
										   PFfilters},
					    #'mesos.v1.scheduler.Call.Decline'{offer_ids
										   =
										   NFoffer_ids,
									       filters
										   =
										   NFfilters}) ->
    #'mesos.v1.scheduler.Call.Decline'{offer_ids =
					   PFoffer_ids ++ NFoffer_ids,
				       filters =
					   'merge_msg_mesos.v1.Filters'(PFfilters,
									NFfilters)}.

'merge_msg_mesos.v1.Offer.Operation.Destroy'(Prev,
					     undefined) ->
    Prev;
'merge_msg_mesos.v1.Offer.Operation.Destroy'(undefined,
					     New) ->
    New;
'merge_msg_mesos.v1.Offer.Operation.Destroy'(#'mesos.v1.Offer.Operation.Destroy'{volumes
										     =
										     PFvolumes},
					     #'mesos.v1.Offer.Operation.Destroy'{volumes
										     =
										     NFvolumes}) ->
    #'mesos.v1.Offer.Operation.Destroy'{volumes =
					    PFvolumes ++ NFvolumes}.

'merge_msg_mesos.v1.Offer.Operation.Create'(Prev,
					    undefined) ->
    Prev;
'merge_msg_mesos.v1.Offer.Operation.Create'(undefined,
					    New) ->
    New;
'merge_msg_mesos.v1.Offer.Operation.Create'(#'mesos.v1.Offer.Operation.Create'{volumes
										   =
										   PFvolumes},
					    #'mesos.v1.Offer.Operation.Create'{volumes
										   =
										   NFvolumes}) ->
    #'mesos.v1.Offer.Operation.Create'{volumes =
					   PFvolumes ++ NFvolumes}.

'merge_msg_mesos.v1.Offer.Operation.Unreserve'(Prev,
					       undefined) ->
    Prev;
'merge_msg_mesos.v1.Offer.Operation.Unreserve'(undefined,
					       New) ->
    New;
'merge_msg_mesos.v1.Offer.Operation.Unreserve'(#'mesos.v1.Offer.Operation.Unreserve'{resources
											 =
											 PFresources},
					       #'mesos.v1.Offer.Operation.Unreserve'{resources
											 =
											 NFresources}) ->
    #'mesos.v1.Offer.Operation.Unreserve'{resources =
					      PFresources ++ NFresources}.

'merge_msg_mesos.v1.Offer.Operation.Reserve'(Prev,
					     undefined) ->
    Prev;
'merge_msg_mesos.v1.Offer.Operation.Reserve'(undefined,
					     New) ->
    New;
'merge_msg_mesos.v1.Offer.Operation.Reserve'(#'mesos.v1.Offer.Operation.Reserve'{resources
										     =
										     PFresources},
					     #'mesos.v1.Offer.Operation.Reserve'{resources
										     =
										     NFresources}) ->
    #'mesos.v1.Offer.Operation.Reserve'{resources =
					    PFresources ++ NFresources}.

'merge_msg_mesos.v1.Port'(#'mesos.v1.Port'{number =
					       PFnumber,
					   name = PFname,
					   protocol = PFprotocol},
			  #'mesos.v1.Port'{number = NFnumber, name = NFname,
					   protocol = NFprotocol}) ->
    #'mesos.v1.Port'{number =
			 if NFnumber =:= undefined -> PFnumber;
			    true -> NFnumber
			 end,
		     name =
			 if NFname =:= undefined -> PFname;
			    true -> NFname
			 end,
		     protocol =
			 if NFprotocol =:= undefined -> PFprotocol;
			    true -> NFprotocol
			 end}.

'merge_msg_mesos.v1.Ports'(Prev, undefined) -> Prev;
'merge_msg_mesos.v1.Ports'(undefined, New) -> New;
'merge_msg_mesos.v1.Ports'(#'mesos.v1.Ports'{ports =
						 PFports},
			   #'mesos.v1.Ports'{ports = NFports}) ->
    #'mesos.v1.Ports'{ports = PFports ++ NFports}.

'merge_msg_mesos.v1.DiscoveryInfo'(Prev, undefined) ->
    Prev;
'merge_msg_mesos.v1.DiscoveryInfo'(undefined, New) ->
    New;
'merge_msg_mesos.v1.DiscoveryInfo'(#'mesos.v1.DiscoveryInfo'{visibility
								 = PFvisibility,
							     name = PFname,
							     environment =
								 PFenvironment,
							     location =
								 PFlocation,
							     version =
								 PFversion,
							     ports = PFports,
							     labels = PFlabels},
				   #'mesos.v1.DiscoveryInfo'{visibility =
								 NFvisibility,
							     name = NFname,
							     environment =
								 NFenvironment,
							     location =
								 NFlocation,
							     version =
								 NFversion,
							     ports = NFports,
							     labels =
								 NFlabels}) ->
    #'mesos.v1.DiscoveryInfo'{visibility =
				  if NFvisibility =:= undefined -> PFvisibility;
				     true -> NFvisibility
				  end,
			      name =
				  if NFname =:= undefined -> PFname;
				     true -> NFname
				  end,
			      environment =
				  if NFenvironment =:= undefined ->
					 PFenvironment;
				     true -> NFenvironment
				  end,
			      location =
				  if NFlocation =:= undefined -> PFlocation;
				     true -> NFlocation
				  end,
			      version =
				  if NFversion =:= undefined -> PFversion;
				     true -> NFversion
				  end,
			      ports =
				  'merge_msg_mesos.v1.Ports'(PFports, NFports),
			      labels =
				  'merge_msg_mesos.v1.Labels'(PFlabels,
							      NFlabels)}.

'merge_msg_mesos.v1.Environment.Variable'(#'mesos.v1.Environment.Variable'{name
									       =
									       PFname,
									   value
									       =
									       PFvalue},
					  #'mesos.v1.Environment.Variable'{name
									       =
									       NFname,
									   value
									       =
									       NFvalue}) ->
    #'mesos.v1.Environment.Variable'{name =
					 if NFname =:= undefined -> PFname;
					    true -> NFname
					 end,
				     value =
					 if NFvalue =:= undefined -> PFvalue;
					    true -> NFvalue
					 end}.

'merge_msg_mesos.v1.Environment'(Prev, undefined) ->
    Prev;
'merge_msg_mesos.v1.Environment'(undefined, New) -> New;
'merge_msg_mesos.v1.Environment'(#'mesos.v1.Environment'{variables
							     = PFvariables},
				 #'mesos.v1.Environment'{variables =
							     NFvariables}) ->
    #'mesos.v1.Environment'{variables =
				PFvariables ++ NFvariables}.

'merge_msg_mesos.v1.CommandInfo.URI'(#'mesos.v1.CommandInfo.URI'{value
								     = PFvalue,
								 executable =
								     PFexecutable,
								 extract =
								     PFextract,
								 cache =
								     PFcache},
				     #'mesos.v1.CommandInfo.URI'{value =
								     NFvalue,
								 executable =
								     NFexecutable,
								 extract =
								     NFextract,
								 cache =
								     NFcache}) ->
    #'mesos.v1.CommandInfo.URI'{value =
				    if NFvalue =:= undefined -> PFvalue;
				       true -> NFvalue
				    end,
				executable =
				    if NFexecutable =:= undefined ->
					   PFexecutable;
				       true -> NFexecutable
				    end,
				extract =
				    if NFextract =:= undefined -> PFextract;
				       true -> NFextract
				    end,
				cache =
				    if NFcache =:= undefined -> PFcache;
				       true -> NFcache
				    end}.

'merge_msg_mesos.v1.CommandInfo.ContainerInfo'(Prev,
					       undefined) ->
    Prev;
'merge_msg_mesos.v1.CommandInfo.ContainerInfo'(undefined,
					       New) ->
    New;
'merge_msg_mesos.v1.CommandInfo.ContainerInfo'(#'mesos.v1.CommandInfo.ContainerInfo'{image
											 =
											 PFimage,
										     options
											 =
											 PFoptions},
					       #'mesos.v1.CommandInfo.ContainerInfo'{image
											 =
											 NFimage,
										     options
											 =
											 NFoptions}) ->
    #'mesos.v1.CommandInfo.ContainerInfo'{image =
					      if NFimage =:= undefined ->
						     PFimage;
						 true -> NFimage
					      end,
					  options = PFoptions ++ NFoptions}.

'merge_msg_mesos.v1.CommandInfo'(Prev, undefined) ->
    Prev;
'merge_msg_mesos.v1.CommandInfo'(undefined, New) -> New;
'merge_msg_mesos.v1.CommandInfo'(#'mesos.v1.CommandInfo'{container
							     = PFcontainer,
							 uris = PFuris,
							 environment =
							     PFenvironment,
							 shell = PFshell,
							 value = PFvalue,
							 arguments =
							     PFarguments,
							 user = PFuser},
				 #'mesos.v1.CommandInfo'{container =
							     NFcontainer,
							 uris = NFuris,
							 environment =
							     NFenvironment,
							 shell = NFshell,
							 value = NFvalue,
							 arguments =
							     NFarguments,
							 user = NFuser}) ->
    #'mesos.v1.CommandInfo'{container =
				'merge_msg_mesos.v1.CommandInfo.ContainerInfo'(PFcontainer,
									       NFcontainer),
			    uris = PFuris ++ NFuris,
			    environment =
				'merge_msg_mesos.v1.Environment'(PFenvironment,
								 NFenvironment),
			    shell =
				if NFshell =:= undefined -> PFshell;
				   true -> NFshell
				end,
			    value =
				if NFvalue =:= undefined -> PFvalue;
				   true -> NFvalue
				end,
			    arguments = PFarguments ++ NFarguments,
			    user =
				if NFuser =:= undefined -> PFuser;
				   true -> NFuser
				end}.

'merge_msg_mesos.v1.HealthCheck.HTTP'(Prev,
				      undefined) ->
    Prev;
'merge_msg_mesos.v1.HealthCheck.HTTP'(undefined, New) ->
    New;
'merge_msg_mesos.v1.HealthCheck.HTTP'(#'mesos.v1.HealthCheck.HTTP'{port
								       = PFport,
								   path =
								       PFpath,
								   statuses =
								       PFstatuses},
				      #'mesos.v1.HealthCheck.HTTP'{port =
								       NFport,
								   path =
								       NFpath,
								   statuses =
								       NFstatuses}) ->
    #'mesos.v1.HealthCheck.HTTP'{port =
				     if NFport =:= undefined -> PFport;
					true -> NFport
				     end,
				 path =
				     if NFpath =:= undefined -> PFpath;
					true -> NFpath
				     end,
				 statuses = PFstatuses ++ NFstatuses}.

'merge_msg_mesos.v1.HealthCheck'(Prev, undefined) ->
    Prev;
'merge_msg_mesos.v1.HealthCheck'(undefined, New) -> New;
'merge_msg_mesos.v1.HealthCheck'(#'mesos.v1.HealthCheck'{http
							     = PFhttp,
							 delay_seconds =
							     PFdelay_seconds,
							 interval_seconds =
							     PFinterval_seconds,
							 timeout_seconds =
							     PFtimeout_seconds,
							 consecutive_failures =
							     PFconsecutive_failures,
							 grace_period_seconds =
							     PFgrace_period_seconds,
							 command = PFcommand},
				 #'mesos.v1.HealthCheck'{http = NFhttp,
							 delay_seconds =
							     NFdelay_seconds,
							 interval_seconds =
							     NFinterval_seconds,
							 timeout_seconds =
							     NFtimeout_seconds,
							 consecutive_failures =
							     NFconsecutive_failures,
							 grace_period_seconds =
							     NFgrace_period_seconds,
							 command =
							     NFcommand}) ->
    #'mesos.v1.HealthCheck'{http =
				'merge_msg_mesos.v1.HealthCheck.HTTP'(PFhttp,
								      NFhttp),
			    delay_seconds =
				if NFdelay_seconds =:= undefined ->
				       PFdelay_seconds;
				   true -> NFdelay_seconds
				end,
			    interval_seconds =
				if NFinterval_seconds =:= undefined ->
				       PFinterval_seconds;
				   true -> NFinterval_seconds
				end,
			    timeout_seconds =
				if NFtimeout_seconds =:= undefined ->
				       PFtimeout_seconds;
				   true -> NFtimeout_seconds
				end,
			    consecutive_failures =
				if NFconsecutive_failures =:= undefined ->
				       PFconsecutive_failures;
				   true -> NFconsecutive_failures
				end,
			    grace_period_seconds =
				if NFgrace_period_seconds =:= undefined ->
				       PFgrace_period_seconds;
				   true -> NFgrace_period_seconds
				end,
			    command =
				'merge_msg_mesos.v1.CommandInfo'(PFcommand,
								 NFcommand)}.

'merge_msg_mesos.v1.FrameworkID'(Prev, undefined) ->
    Prev;
'merge_msg_mesos.v1.FrameworkID'(undefined, New) -> New;
'merge_msg_mesos.v1.FrameworkID'(#'mesos.v1.FrameworkID'{value
							     = PFvalue},
				 #'mesos.v1.FrameworkID'{value = NFvalue}) ->
    #'mesos.v1.FrameworkID'{value =
				if NFvalue =:= undefined -> PFvalue;
				   true -> NFvalue
				end}.

'merge_msg_mesos.v1.ExecutorInfo'(Prev, undefined) ->
    Prev;
'merge_msg_mesos.v1.ExecutorInfo'(undefined, New) ->
    New;
'merge_msg_mesos.v1.ExecutorInfo'(#'mesos.v1.ExecutorInfo'{executor_id
							       = PFexecutor_id,
							   framework_id =
							       PFframework_id,
							   command = PFcommand,
							   container =
							       PFcontainer,
							   resources =
							       PFresources,
							   name = PFname,
							   source = PFsource,
							   data = PFdata,
							   discovery =
							       PFdiscovery},
				  #'mesos.v1.ExecutorInfo'{executor_id =
							       NFexecutor_id,
							   framework_id =
							       NFframework_id,
							   command = NFcommand,
							   container =
							       NFcontainer,
							   resources =
							       NFresources,
							   name = NFname,
							   source = NFsource,
							   data = NFdata,
							   discovery =
							       NFdiscovery}) ->
    #'mesos.v1.ExecutorInfo'{executor_id =
				 'merge_msg_mesos.v1.ExecutorID'(PFexecutor_id,
								 NFexecutor_id),
			     framework_id =
				 'merge_msg_mesos.v1.FrameworkID'(PFframework_id,
								  NFframework_id),
			     command =
				 'merge_msg_mesos.v1.CommandInfo'(PFcommand,
								  NFcommand),
			     container =
				 'merge_msg_mesos.v1.ContainerInfo'(PFcontainer,
								    NFcontainer),
			     resources = PFresources ++ NFresources,
			     name =
				 if NFname =:= undefined -> PFname;
				    true -> NFname
				 end,
			     source =
				 if NFsource =:= undefined -> PFsource;
				    true -> NFsource
				 end,
			     data =
				 if NFdata =:= undefined -> PFdata;
				    true -> NFdata
				 end,
			     discovery =
				 'merge_msg_mesos.v1.DiscoveryInfo'(PFdiscovery,
								    NFdiscovery)}.

'merge_msg_mesos.v1.TaskInfo'(#'mesos.v1.TaskInfo'{name
						       = PFname,
						   task_id = PFtask_id,
						   agent_id = PFagent_id,
						   resources = PFresources,
						   executor = PFexecutor,
						   command = PFcommand,
						   container = PFcontainer,
						   data = PFdata,
						   health_check =
						       PFhealth_check,
						   labels = PFlabels,
						   discovery = PFdiscovery},
			      #'mesos.v1.TaskInfo'{name = NFname,
						   task_id = NFtask_id,
						   agent_id = NFagent_id,
						   resources = NFresources,
						   executor = NFexecutor,
						   command = NFcommand,
						   container = NFcontainer,
						   data = NFdata,
						   health_check =
						       NFhealth_check,
						   labels = NFlabels,
						   discovery = NFdiscovery}) ->
    #'mesos.v1.TaskInfo'{name =
			     if NFname =:= undefined -> PFname;
				true -> NFname
			     end,
			 task_id =
			     'merge_msg_mesos.v1.TaskID'(PFtask_id, NFtask_id),
			 agent_id =
			     'merge_msg_mesos.v1.AgentID'(PFagent_id,
							  NFagent_id),
			 resources = PFresources ++ NFresources,
			 executor =
			     'merge_msg_mesos.v1.ExecutorInfo'(PFexecutor,
							       NFexecutor),
			 command =
			     'merge_msg_mesos.v1.CommandInfo'(PFcommand,
							      NFcommand),
			 container =
			     'merge_msg_mesos.v1.ContainerInfo'(PFcontainer,
								NFcontainer),
			 data =
			     if NFdata =:= undefined -> PFdata;
				true -> NFdata
			     end,
			 health_check =
			     'merge_msg_mesos.v1.HealthCheck'(PFhealth_check,
							      NFhealth_check),
			 labels =
			     'merge_msg_mesos.v1.Labels'(PFlabels, NFlabels),
			 discovery =
			     'merge_msg_mesos.v1.DiscoveryInfo'(PFdiscovery,
								NFdiscovery)}.

'merge_msg_mesos.v1.Offer.Operation.Launch'(Prev,
					    undefined) ->
    Prev;
'merge_msg_mesos.v1.Offer.Operation.Launch'(undefined,
					    New) ->
    New;
'merge_msg_mesos.v1.Offer.Operation.Launch'(#'mesos.v1.Offer.Operation.Launch'{task_infos
										   =
										   PFtask_infos},
					    #'mesos.v1.Offer.Operation.Launch'{task_infos
										   =
										   NFtask_infos}) ->
    #'mesos.v1.Offer.Operation.Launch'{task_infos =
					   PFtask_infos ++ NFtask_infos}.

'merge_msg_mesos.v1.Offer.Operation'(#'mesos.v1.Offer.Operation'{type
								     = PFtype,
								 launch =
								     PFlaunch,
								 reserve =
								     PFreserve,
								 unreserve =
								     PFunreserve,
								 create =
								     PFcreate,
								 destroy =
								     PFdestroy},
				     #'mesos.v1.Offer.Operation'{type = NFtype,
								 launch =
								     NFlaunch,
								 reserve =
								     NFreserve,
								 unreserve =
								     NFunreserve,
								 create =
								     NFcreate,
								 destroy =
								     NFdestroy}) ->
    #'mesos.v1.Offer.Operation'{type =
				    if NFtype =:= undefined -> PFtype;
				       true -> NFtype
				    end,
				launch =
				    'merge_msg_mesos.v1.Offer.Operation.Launch'(PFlaunch,
										NFlaunch),
				reserve =
				    'merge_msg_mesos.v1.Offer.Operation.Reserve'(PFreserve,
										 NFreserve),
				unreserve =
				    'merge_msg_mesos.v1.Offer.Operation.Unreserve'(PFunreserve,
										   NFunreserve),
				create =
				    'merge_msg_mesos.v1.Offer.Operation.Create'(PFcreate,
										NFcreate),
				destroy =
				    'merge_msg_mesos.v1.Offer.Operation.Destroy'(PFdestroy,
										 NFdestroy)}.

'merge_msg_mesos.v1.scheduler.Call.Accept'(Prev,
					   undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Call.Accept'(undefined,
					   New) ->
    New;
'merge_msg_mesos.v1.scheduler.Call.Accept'(#'mesos.v1.scheduler.Call.Accept'{offer_ids
										 =
										 PFoffer_ids,
									     operations
										 =
										 PFoperations,
									     filters
										 =
										 PFfilters},
					   #'mesos.v1.scheduler.Call.Accept'{offer_ids
										 =
										 NFoffer_ids,
									     operations
										 =
										 NFoperations,
									     filters
										 =
										 NFfilters}) ->
    #'mesos.v1.scheduler.Call.Accept'{offer_ids =
					  PFoffer_ids ++ NFoffer_ids,
				      operations = PFoperations ++ NFoperations,
				      filters =
					  'merge_msg_mesos.v1.Filters'(PFfilters,
								       NFfilters)}.

'merge_msg_mesos.v1.FrameworkInfo.Capability'(#'mesos.v1.FrameworkInfo.Capability'{type
										       =
										       PFtype},
					      #'mesos.v1.FrameworkInfo.Capability'{type
										       =
										       NFtype}) ->
    #'mesos.v1.FrameworkInfo.Capability'{type =
					     if NFtype =:= undefined -> PFtype;
						true -> NFtype
					     end}.

'merge_msg_mesos.v1.FrameworkInfo'(#'mesos.v1.FrameworkInfo'{user
								 = PFuser,
							     name = PFname,
							     id = PFid,
							     failover_timeout =
								 PFfailover_timeout,
							     checkpoint =
								 PFcheckpoint,
							     role = PFrole,
							     hostname =
								 PFhostname,
							     principal =
								 PFprincipal,
							     webui_url =
								 PFwebui_url,
							     capabilities =
								 PFcapabilities},
				   #'mesos.v1.FrameworkInfo'{user = NFuser,
							     name = NFname,
							     id = NFid,
							     failover_timeout =
								 NFfailover_timeout,
							     checkpoint =
								 NFcheckpoint,
							     role = NFrole,
							     hostname =
								 NFhostname,
							     principal =
								 NFprincipal,
							     webui_url =
								 NFwebui_url,
							     capabilities =
								 NFcapabilities}) ->
    #'mesos.v1.FrameworkInfo'{user =
				  if NFuser =:= undefined -> PFuser;
				     true -> NFuser
				  end,
			      name =
				  if NFname =:= undefined -> PFname;
				     true -> NFname
				  end,
			      id = 'merge_msg_mesos.v1.FrameworkID'(PFid, NFid),
			      failover_timeout =
				  if NFfailover_timeout =:= undefined ->
					 PFfailover_timeout;
				     true -> NFfailover_timeout
				  end,
			      checkpoint =
				  if NFcheckpoint =:= undefined -> PFcheckpoint;
				     true -> NFcheckpoint
				  end,
			      role =
				  if NFrole =:= undefined -> PFrole;
				     true -> NFrole
				  end,
			      hostname =
				  if NFhostname =:= undefined -> PFhostname;
				     true -> NFhostname
				  end,
			      principal =
				  if NFprincipal =:= undefined -> PFprincipal;
				     true -> NFprincipal
				  end,
			      webui_url =
				  if NFwebui_url =:= undefined -> PFwebui_url;
				     true -> NFwebui_url
				  end,
			      capabilities = PFcapabilities ++ NFcapabilities}.

'merge_msg_mesos.v1.scheduler.Call.Subscribe'(Prev,
					      undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Call.Subscribe'(undefined,
					      New) ->
    New;
'merge_msg_mesos.v1.scheduler.Call.Subscribe'(#'mesos.v1.scheduler.Call.Subscribe'{framework_info
										       =
										       PFframework_info,
										   force
										       =
										       PFforce},
					      #'mesos.v1.scheduler.Call.Subscribe'{framework_info
										       =
										       NFframework_info,
										   force
										       =
										       NFforce}) ->
    #'mesos.v1.scheduler.Call.Subscribe'{framework_info =
					     'merge_msg_mesos.v1.FrameworkInfo'(PFframework_info,
										NFframework_info),
					 force =
					     if NFforce =:= undefined ->
						    PFforce;
						true -> NFforce
					     end}.

'merge_msg_mesos.v1.scheduler.Call'(#'mesos.v1.scheduler.Call'{framework_id
								   =
								   PFframework_id,
							       type = PFtype,
							       subscribe =
								   PFsubscribe,
							       accept =
								   PFaccept,
							       decline =
								   PFdecline,
							       kill = PFkill,
							       shutdown =
								   PFshutdown,
							       acknowledge =
								   PFacknowledge,
							       reconcile =
								   PFreconcile,
							       message =
								   PFmessage,
							       request =
								   PFrequest},
				    #'mesos.v1.scheduler.Call'{framework_id =
								   NFframework_id,
							       type = NFtype,
							       subscribe =
								   NFsubscribe,
							       accept =
								   NFaccept,
							       decline =
								   NFdecline,
							       kill = NFkill,
							       shutdown =
								   NFshutdown,
							       acknowledge =
								   NFacknowledge,
							       reconcile =
								   NFreconcile,
							       message =
								   NFmessage,
							       request =
								   NFrequest}) ->
    #'mesos.v1.scheduler.Call'{framework_id =
				   'merge_msg_mesos.v1.FrameworkID'(PFframework_id,
								    NFframework_id),
			       type =
				   if NFtype =:= undefined -> PFtype;
				      true -> NFtype
				   end,
			       subscribe =
				   'merge_msg_mesos.v1.scheduler.Call.Subscribe'(PFsubscribe,
										 NFsubscribe),
			       accept =
				   'merge_msg_mesos.v1.scheduler.Call.Accept'(PFaccept,
									      NFaccept),
			       decline =
				   'merge_msg_mesos.v1.scheduler.Call.Decline'(PFdecline,
									       NFdecline),
			       kill =
				   'merge_msg_mesos.v1.scheduler.Call.Kill'(PFkill,
									    NFkill),
			       shutdown =
				   'merge_msg_mesos.v1.scheduler.Call.Shutdown'(PFshutdown,
										NFshutdown),
			       acknowledge =
				   'merge_msg_mesos.v1.scheduler.Call.Acknowledge'(PFacknowledge,
										   NFacknowledge),
			       reconcile =
				   'merge_msg_mesos.v1.scheduler.Call.Reconcile'(PFreconcile,
										 NFreconcile),
			       message =
				   'merge_msg_mesos.v1.scheduler.Call.Message'(PFmessage,
									       NFmessage),
			       request =
				   'merge_msg_mesos.v1.scheduler.Call.Request'(PFrequest,
									       NFrequest)}.

'merge_msg_mesos.v1.RateLimit'(#'mesos.v1.RateLimit'{qps
							 = PFqps,
						     principal = PFprincipal,
						     capacity = PFcapacity},
			       #'mesos.v1.RateLimit'{qps = NFqps,
						     principal = NFprincipal,
						     capacity = NFcapacity}) ->
    #'mesos.v1.RateLimit'{qps =
			      if NFqps =:= undefined -> PFqps;
				 true -> NFqps
			      end,
			  principal =
			      if NFprincipal =:= undefined -> PFprincipal;
				 true -> NFprincipal
			      end,
			  capacity =
			      if NFcapacity =:= undefined -> PFcapacity;
				 true -> NFcapacity
			      end}.

'merge_msg_mesos.v1.RateLimits'(#'mesos.v1.RateLimits'{limits
							   = PFlimits,
						       aggregate_default_qps =
							   PFaggregate_default_qps,
						       aggregate_default_capacity
							   =
							   PFaggregate_default_capacity},
				#'mesos.v1.RateLimits'{limits = NFlimits,
						       aggregate_default_qps =
							   NFaggregate_default_qps,
						       aggregate_default_capacity
							   =
							   NFaggregate_default_capacity}) ->
    #'mesos.v1.RateLimits'{limits = PFlimits ++ NFlimits,
			   aggregate_default_qps =
			       if NFaggregate_default_qps =:= undefined ->
				      PFaggregate_default_qps;
				  true -> NFaggregate_default_qps
			       end,
			   aggregate_default_capacity =
			       if NFaggregate_default_capacity =:= undefined ->
				      PFaggregate_default_capacity;
				  true -> NFaggregate_default_capacity
			       end}.

'merge_msg_mesos.v1.Parameters'(#'mesos.v1.Parameters'{parameter
							   = PFparameter},
				#'mesos.v1.Parameters'{parameter =
							   NFparameter}) ->
    #'mesos.v1.Parameters'{parameter =
			       PFparameter ++ NFparameter}.

'merge_msg_mesos.v1.Address'(Prev, undefined) -> Prev;
'merge_msg_mesos.v1.Address'(undefined, New) -> New;
'merge_msg_mesos.v1.Address'(#'mesos.v1.Address'{hostname
						     = PFhostname,
						 ip = PFip, port = PFport},
			     #'mesos.v1.Address'{hostname = NFhostname,
						 ip = NFip, port = NFport}) ->
    #'mesos.v1.Address'{hostname =
			    if NFhostname =:= undefined -> PFhostname;
			       true -> NFhostname
			    end,
			ip =
			    if NFip =:= undefined -> PFip;
			       true -> NFip
			    end,
			port =
			    if NFport =:= undefined -> PFport;
			       true -> NFport
			    end}.

'merge_msg_mesos.v1.URL'(Prev, undefined) -> Prev;
'merge_msg_mesos.v1.URL'(undefined, New) -> New;
'merge_msg_mesos.v1.URL'(#'mesos.v1.URL'{scheme =
					     PFscheme,
					 address = PFaddress, path = PFpath,
					 query = PFquery,
					 fragment = PFfragment},
			 #'mesos.v1.URL'{scheme = NFscheme, address = NFaddress,
					 path = NFpath, query = NFquery,
					 fragment = NFfragment}) ->
    #'mesos.v1.URL'{scheme =
			if NFscheme =:= undefined -> PFscheme;
			   true -> NFscheme
			end,
		    address =
			'merge_msg_mesos.v1.Address'(PFaddress, NFaddress),
		    path =
			if NFpath =:= undefined -> PFpath;
			   true -> NFpath
			end,
		    query = PFquery ++ NFquery,
		    fragment =
			if NFfragment =:= undefined -> PFfragment;
			   true -> NFfragment
			end}.

'merge_msg_mesos.v1.Offer'(#'mesos.v1.Offer'{id = PFid,
					     framework_id = PFframework_id,
					     agent_id = PFagent_id,
					     hostname = PFhostname, url = PFurl,
					     resources = PFresources,
					     attributes = PFattributes,
					     executor_ids = PFexecutor_ids},
			   #'mesos.v1.Offer'{id = NFid,
					     framework_id = NFframework_id,
					     agent_id = NFagent_id,
					     hostname = NFhostname, url = NFurl,
					     resources = NFresources,
					     attributes = NFattributes,
					     executor_ids = NFexecutor_ids}) ->
    #'mesos.v1.Offer'{id =
			  'merge_msg_mesos.v1.OfferID'(PFid, NFid),
		      framework_id =
			  'merge_msg_mesos.v1.FrameworkID'(PFframework_id,
							   NFframework_id),
		      agent_id =
			  'merge_msg_mesos.v1.AgentID'(PFagent_id, NFagent_id),
		      hostname =
			  if NFhostname =:= undefined -> PFhostname;
			     true -> NFhostname
			  end,
		      url = 'merge_msg_mesos.v1.URL'(PFurl, NFurl),
		      resources = PFresources ++ NFresources,
		      attributes = PFattributes ++ NFattributes,
		      executor_ids = PFexecutor_ids ++ NFexecutor_ids}.

'merge_msg_mesos.v1.Credential'(#'mesos.v1.Credential'{principal
							   = PFprincipal,
						       secret = PFsecret},
				#'mesos.v1.Credential'{principal = NFprincipal,
						       secret = NFsecret}) ->
    #'mesos.v1.Credential'{principal =
			       if NFprincipal =:= undefined -> PFprincipal;
				  true -> NFprincipal
			       end,
			   secret =
			       if NFsecret =:= undefined -> PFsecret;
				  true -> NFsecret
			       end}.

'merge_msg_mesos.v1.ACL.Entity'(#'mesos.v1.ACL.Entity'{type
							   = PFtype,
						       values = PFvalues},
				#'mesos.v1.ACL.Entity'{type = NFtype,
						       values = NFvalues}) ->
    #'mesos.v1.ACL.Entity'{type =
			       if NFtype =:= undefined -> PFtype;
				  true -> NFtype
			       end,
			   values = PFvalues ++ NFvalues}.

'merge_msg_mesos.v1.TaskStatus'(#'mesos.v1.TaskStatus'{task_id
							   = PFtask_id,
						       state = PFstate,
						       message = PFmessage,
						       source = PFsource,
						       reason = PFreason,
						       data = PFdata,
						       agent_id = PFagent_id,
						       executor_id =
							   PFexecutor_id,
						       timestamp = PFtimestamp,
						       uuid = PFuuid,
						       healthy = PFhealthy,
						       labels = PFlabels},
				#'mesos.v1.TaskStatus'{task_id = NFtask_id,
						       state = NFstate,
						       message = NFmessage,
						       source = NFsource,
						       reason = NFreason,
						       data = NFdata,
						       agent_id = NFagent_id,
						       executor_id =
							   NFexecutor_id,
						       timestamp = NFtimestamp,
						       uuid = NFuuid,
						       healthy = NFhealthy,
						       labels = NFlabels}) ->
    #'mesos.v1.TaskStatus'{task_id =
			       'merge_msg_mesos.v1.TaskID'(PFtask_id,
							   NFtask_id),
			   state =
			       if NFstate =:= undefined -> PFstate;
				  true -> NFstate
			       end,
			   message =
			       if NFmessage =:= undefined -> PFmessage;
				  true -> NFmessage
			       end,
			   source =
			       if NFsource =:= undefined -> PFsource;
				  true -> NFsource
			       end,
			   reason =
			       if NFreason =:= undefined -> PFreason;
				  true -> NFreason
			       end,
			   data =
			       if NFdata =:= undefined -> PFdata;
				  true -> NFdata
			       end,
			   agent_id =
			       'merge_msg_mesos.v1.AgentID'(PFagent_id,
							    NFagent_id),
			   executor_id =
			       'merge_msg_mesos.v1.ExecutorID'(PFexecutor_id,
							       NFexecutor_id),
			   timestamp =
			       if NFtimestamp =:= undefined -> PFtimestamp;
				  true -> NFtimestamp
			       end,
			   uuid =
			       if NFuuid =:= undefined -> PFuuid;
				  true -> NFuuid
			       end,
			   healthy =
			       if NFhealthy =:= undefined -> PFhealthy;
				  true -> NFhealthy
			       end,
			   labels =
			       'merge_msg_mesos.v1.Labels'(PFlabels, NFlabels)}.

'merge_msg_mesos.v1.scheduler.Event.Update'(Prev,
					    undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Event.Update'(undefined,
					    New) ->
    New;
'merge_msg_mesos.v1.scheduler.Event.Update'(#'mesos.v1.scheduler.Event.Update'{status
										   =
										   PFstatus},
					    #'mesos.v1.scheduler.Event.Update'{status
										   =
										   NFstatus}) ->
    #'mesos.v1.scheduler.Event.Update'{status =
					   'merge_msg_mesos.v1.TaskStatus'(PFstatus,
									   NFstatus)}.

'merge_msg_mesos.v1.scheduler.Event.Error'(Prev,
					   undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Event.Error'(undefined,
					   New) ->
    New;
'merge_msg_mesos.v1.scheduler.Event.Error'(#'mesos.v1.scheduler.Event.Error'{message
										 =
										 PFmessage},
					   #'mesos.v1.scheduler.Event.Error'{message
										 =
										 NFmessage}) ->
    #'mesos.v1.scheduler.Event.Error'{message =
					  if NFmessage =:= undefined ->
						 PFmessage;
					     true -> NFmessage
					  end}.

'merge_msg_mesos.v1.scheduler.Event.Failure'(Prev,
					     undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Event.Failure'(undefined,
					     New) ->
    New;
'merge_msg_mesos.v1.scheduler.Event.Failure'(#'mesos.v1.scheduler.Event.Failure'{agent_id
										     =
										     PFagent_id,
										 executor_id
										     =
										     PFexecutor_id,
										 status
										     =
										     PFstatus},
					     #'mesos.v1.scheduler.Event.Failure'{agent_id
										     =
										     NFagent_id,
										 executor_id
										     =
										     NFexecutor_id,
										 status
										     =
										     NFstatus}) ->
    #'mesos.v1.scheduler.Event.Failure'{agent_id =
					    'merge_msg_mesos.v1.AgentID'(PFagent_id,
									 NFagent_id),
					executor_id =
					    'merge_msg_mesos.v1.ExecutorID'(PFexecutor_id,
									    NFexecutor_id),
					status =
					    if NFstatus =:= undefined ->
						   PFstatus;
					       true -> NFstatus
					    end}.

'merge_msg_mesos.v1.scheduler.Event.Message'(Prev,
					     undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Event.Message'(undefined,
					     New) ->
    New;
'merge_msg_mesos.v1.scheduler.Event.Message'(#'mesos.v1.scheduler.Event.Message'{agent_id
										     =
										     PFagent_id,
										 executor_id
										     =
										     PFexecutor_id,
										 data
										     =
										     PFdata},
					     #'mesos.v1.scheduler.Event.Message'{agent_id
										     =
										     NFagent_id,
										 executor_id
										     =
										     NFexecutor_id,
										 data
										     =
										     NFdata}) ->
    #'mesos.v1.scheduler.Event.Message'{agent_id =
					    'merge_msg_mesos.v1.AgentID'(PFagent_id,
									 NFagent_id),
					executor_id =
					    'merge_msg_mesos.v1.ExecutorID'(PFexecutor_id,
									    NFexecutor_id),
					data =
					    if NFdata =:= undefined -> PFdata;
					       true -> NFdata
					    end}.

'merge_msg_mesos.v1.scheduler.Event.Rescind'(Prev,
					     undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Event.Rescind'(undefined,
					     New) ->
    New;
'merge_msg_mesos.v1.scheduler.Event.Rescind'(#'mesos.v1.scheduler.Event.Rescind'{offer_id
										     =
										     PFoffer_id},
					     #'mesos.v1.scheduler.Event.Rescind'{offer_id
										     =
										     NFoffer_id}) ->
    #'mesos.v1.scheduler.Event.Rescind'{offer_id =
					    'merge_msg_mesos.v1.OfferID'(PFoffer_id,
									 NFoffer_id)}.

'merge_msg_mesos.v1.scheduler.Event.Offers'(Prev,
					    undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Event.Offers'(undefined,
					    New) ->
    New;
'merge_msg_mesos.v1.scheduler.Event.Offers'(#'mesos.v1.scheduler.Event.Offers'{offers
										   =
										   PFoffers},
					    #'mesos.v1.scheduler.Event.Offers'{offers
										   =
										   NFoffers}) ->
    #'mesos.v1.scheduler.Event.Offers'{offers =
					   PFoffers ++ NFoffers}.

'merge_msg_mesos.v1.scheduler.Event.Subscribed'(Prev,
						undefined) ->
    Prev;
'merge_msg_mesos.v1.scheduler.Event.Subscribed'(undefined,
						New) ->
    New;
'merge_msg_mesos.v1.scheduler.Event.Subscribed'(#'mesos.v1.scheduler.Event.Subscribed'{framework_id
											   =
											   PFframework_id,
										       heartbeat_interval_seconds
											   =
											   PFheartbeat_interval_seconds},
						#'mesos.v1.scheduler.Event.Subscribed'{framework_id
											   =
											   NFframework_id,
										       heartbeat_interval_seconds
											   =
											   NFheartbeat_interval_seconds}) ->
    #'mesos.v1.scheduler.Event.Subscribed'{framework_id =
					       'merge_msg_mesos.v1.FrameworkID'(PFframework_id,
										NFframework_id),
					   heartbeat_interval_seconds =
					       if NFheartbeat_interval_seconds
						    =:= undefined ->
						      PFheartbeat_interval_seconds;
						  true ->
						      NFheartbeat_interval_seconds
					       end}.

'merge_msg_mesos.v1.scheduler.Event'(#'mesos.v1.scheduler.Event'{type
								     = PFtype,
								 subscribed =
								     PFsubscribed,
								 offers =
								     PFoffers,
								 rescind =
								     PFrescind,
								 update =
								     PFupdate,
								 message =
								     PFmessage,
								 failure =
								     PFfailure,
								 error =
								     PFerror},
				     #'mesos.v1.scheduler.Event'{type = NFtype,
								 subscribed =
								     NFsubscribed,
								 offers =
								     NFoffers,
								 rescind =
								     NFrescind,
								 update =
								     NFupdate,
								 message =
								     NFmessage,
								 failure =
								     NFfailure,
								 error =
								     NFerror}) ->
    #'mesos.v1.scheduler.Event'{type =
				    if NFtype =:= undefined -> PFtype;
				       true -> NFtype
				    end,
				subscribed =
				    'merge_msg_mesos.v1.scheduler.Event.Subscribed'(PFsubscribed,
										    NFsubscribed),
				offers =
				    'merge_msg_mesos.v1.scheduler.Event.Offers'(PFoffers,
										NFoffers),
				rescind =
				    'merge_msg_mesos.v1.scheduler.Event.Rescind'(PFrescind,
										 NFrescind),
				update =
				    'merge_msg_mesos.v1.scheduler.Event.Update'(PFupdate,
										NFupdate),
				message =
				    'merge_msg_mesos.v1.scheduler.Event.Message'(PFmessage,
										 NFmessage),
				failure =
				    'merge_msg_mesos.v1.scheduler.Event.Failure'(PFfailure,
										 NFfailure),
				error =
				    'merge_msg_mesos.v1.scheduler.Event.Error'(PFerror,
									       NFerror)}.

'merge_msg_mesos.v1.TrafficControlStatistics'(#'mesos.v1.TrafficControlStatistics'{id
										       =
										       PFid,
										   backlog
										       =
										       PFbacklog,
										   bytes
										       =
										       PFbytes,
										   drops
										       =
										       PFdrops,
										   overlimits
										       =
										       PFoverlimits,
										   packets
										       =
										       PFpackets,
										   qlen
										       =
										       PFqlen,
										   ratebps
										       =
										       PFratebps,
										   ratepps
										       =
										       PFratepps,
										   requeues
										       =
										       PFrequeues},
					      #'mesos.v1.TrafficControlStatistics'{id
										       =
										       NFid,
										   backlog
										       =
										       NFbacklog,
										   bytes
										       =
										       NFbytes,
										   drops
										       =
										       NFdrops,
										   overlimits
										       =
										       NFoverlimits,
										   packets
										       =
										       NFpackets,
										   qlen
										       =
										       NFqlen,
										   ratebps
										       =
										       NFratebps,
										   ratepps
										       =
										       NFratepps,
										   requeues
										       =
										       NFrequeues}) ->
    #'mesos.v1.TrafficControlStatistics'{id =
					     if NFid =:= undefined -> PFid;
						true -> NFid
					     end,
					 backlog =
					     if NFbacklog =:= undefined ->
						    PFbacklog;
						true -> NFbacklog
					     end,
					 bytes =
					     if NFbytes =:= undefined ->
						    PFbytes;
						true -> NFbytes
					     end,
					 drops =
					     if NFdrops =:= undefined ->
						    PFdrops;
						true -> NFdrops
					     end,
					 overlimits =
					     if NFoverlimits =:= undefined ->
						    PFoverlimits;
						true -> NFoverlimits
					     end,
					 packets =
					     if NFpackets =:= undefined ->
						    PFpackets;
						true -> NFpackets
					     end,
					 qlen =
					     if NFqlen =:= undefined -> PFqlen;
						true -> NFqlen
					     end,
					 ratebps =
					     if NFratebps =:= undefined ->
						    PFratebps;
						true -> NFratebps
					     end,
					 ratepps =
					     if NFratepps =:= undefined ->
						    PFratepps;
						true -> NFratepps
					     end,
					 requeues =
					     if NFrequeues =:= undefined ->
						    PFrequeues;
						true -> NFrequeues
					     end}.

'merge_msg_mesos.v1.PerfStatistics'(Prev, undefined) ->
    Prev;
'merge_msg_mesos.v1.PerfStatistics'(undefined, New) ->
    New;
'merge_msg_mesos.v1.PerfStatistics'(#'mesos.v1.PerfStatistics'{timestamp
								   =
								   PFtimestamp,
							       duration =
								   PFduration,
							       cycles =
								   PFcycles,
							       stalled_cycles_frontend
								   =
								   PFstalled_cycles_frontend,
							       stalled_cycles_backend
								   =
								   PFstalled_cycles_backend,
							       instructions =
								   PFinstructions,
							       cache_references
								   =
								   PFcache_references,
							       cache_misses =
								   PFcache_misses,
							       branches =
								   PFbranches,
							       branch_misses =
								   PFbranch_misses,
							       bus_cycles =
								   PFbus_cycles,
							       ref_cycles =
								   PFref_cycles,
							       cpu_clock =
								   PFcpu_clock,
							       task_clock =
								   PFtask_clock,
							       page_faults =
								   PFpage_faults,
							       minor_faults =
								   PFminor_faults,
							       major_faults =
								   PFmajor_faults,
							       context_switches
								   =
								   PFcontext_switches,
							       cpu_migrations =
								   PFcpu_migrations,
							       alignment_faults
								   =
								   PFalignment_faults,
							       emulation_faults
								   =
								   PFemulation_faults,
							       l1_dcache_loads =
								   PFl1_dcache_loads,
							       l1_dcache_load_misses
								   =
								   PFl1_dcache_load_misses,
							       l1_dcache_stores
								   =
								   PFl1_dcache_stores,
							       l1_dcache_store_misses
								   =
								   PFl1_dcache_store_misses,
							       l1_dcache_prefetches
								   =
								   PFl1_dcache_prefetches,
							       l1_dcache_prefetch_misses
								   =
								   PFl1_dcache_prefetch_misses,
							       l1_icache_loads =
								   PFl1_icache_loads,
							       l1_icache_load_misses
								   =
								   PFl1_icache_load_misses,
							       l1_icache_prefetches
								   =
								   PFl1_icache_prefetches,
							       l1_icache_prefetch_misses
								   =
								   PFl1_icache_prefetch_misses,
							       llc_loads =
								   PFllc_loads,
							       llc_load_misses =
								   PFllc_load_misses,
							       llc_stores =
								   PFllc_stores,
							       llc_store_misses
								   =
								   PFllc_store_misses,
							       llc_prefetches =
								   PFllc_prefetches,
							       llc_prefetch_misses
								   =
								   PFllc_prefetch_misses,
							       dtlb_loads =
								   PFdtlb_loads,
							       dtlb_load_misses
								   =
								   PFdtlb_load_misses,
							       dtlb_stores =
								   PFdtlb_stores,
							       dtlb_store_misses
								   =
								   PFdtlb_store_misses,
							       dtlb_prefetches =
								   PFdtlb_prefetches,
							       dtlb_prefetch_misses
								   =
								   PFdtlb_prefetch_misses,
							       itlb_loads =
								   PFitlb_loads,
							       itlb_load_misses
								   =
								   PFitlb_load_misses,
							       branch_loads =
								   PFbranch_loads,
							       branch_load_misses
								   =
								   PFbranch_load_misses,
							       node_loads =
								   PFnode_loads,
							       node_load_misses
								   =
								   PFnode_load_misses,
							       node_stores =
								   PFnode_stores,
							       node_store_misses
								   =
								   PFnode_store_misses,
							       node_prefetches =
								   PFnode_prefetches,
							       node_prefetch_misses
								   =
								   PFnode_prefetch_misses},
				    #'mesos.v1.PerfStatistics'{timestamp =
								   NFtimestamp,
							       duration =
								   NFduration,
							       cycles =
								   NFcycles,
							       stalled_cycles_frontend
								   =
								   NFstalled_cycles_frontend,
							       stalled_cycles_backend
								   =
								   NFstalled_cycles_backend,
							       instructions =
								   NFinstructions,
							       cache_references
								   =
								   NFcache_references,
							       cache_misses =
								   NFcache_misses,
							       branches =
								   NFbranches,
							       branch_misses =
								   NFbranch_misses,
							       bus_cycles =
								   NFbus_cycles,
							       ref_cycles =
								   NFref_cycles,
							       cpu_clock =
								   NFcpu_clock,
							       task_clock =
								   NFtask_clock,
							       page_faults =
								   NFpage_faults,
							       minor_faults =
								   NFminor_faults,
							       major_faults =
								   NFmajor_faults,
							       context_switches
								   =
								   NFcontext_switches,
							       cpu_migrations =
								   NFcpu_migrations,
							       alignment_faults
								   =
								   NFalignment_faults,
							       emulation_faults
								   =
								   NFemulation_faults,
							       l1_dcache_loads =
								   NFl1_dcache_loads,
							       l1_dcache_load_misses
								   =
								   NFl1_dcache_load_misses,
							       l1_dcache_stores
								   =
								   NFl1_dcache_stores,
							       l1_dcache_store_misses
								   =
								   NFl1_dcache_store_misses,
							       l1_dcache_prefetches
								   =
								   NFl1_dcache_prefetches,
							       l1_dcache_prefetch_misses
								   =
								   NFl1_dcache_prefetch_misses,
							       l1_icache_loads =
								   NFl1_icache_loads,
							       l1_icache_load_misses
								   =
								   NFl1_icache_load_misses,
							       l1_icache_prefetches
								   =
								   NFl1_icache_prefetches,
							       l1_icache_prefetch_misses
								   =
								   NFl1_icache_prefetch_misses,
							       llc_loads =
								   NFllc_loads,
							       llc_load_misses =
								   NFllc_load_misses,
							       llc_stores =
								   NFllc_stores,
							       llc_store_misses
								   =
								   NFllc_store_misses,
							       llc_prefetches =
								   NFllc_prefetches,
							       llc_prefetch_misses
								   =
								   NFllc_prefetch_misses,
							       dtlb_loads =
								   NFdtlb_loads,
							       dtlb_load_misses
								   =
								   NFdtlb_load_misses,
							       dtlb_stores =
								   NFdtlb_stores,
							       dtlb_store_misses
								   =
								   NFdtlb_store_misses,
							       dtlb_prefetches =
								   NFdtlb_prefetches,
							       dtlb_prefetch_misses
								   =
								   NFdtlb_prefetch_misses,
							       itlb_loads =
								   NFitlb_loads,
							       itlb_load_misses
								   =
								   NFitlb_load_misses,
							       branch_loads =
								   NFbranch_loads,
							       branch_load_misses
								   =
								   NFbranch_load_misses,
							       node_loads =
								   NFnode_loads,
							       node_load_misses
								   =
								   NFnode_load_misses,
							       node_stores =
								   NFnode_stores,
							       node_store_misses
								   =
								   NFnode_store_misses,
							       node_prefetches =
								   NFnode_prefetches,
							       node_prefetch_misses
								   =
								   NFnode_prefetch_misses}) ->
    #'mesos.v1.PerfStatistics'{timestamp =
				   if NFtimestamp =:= undefined -> PFtimestamp;
				      true -> NFtimestamp
				   end,
			       duration =
				   if NFduration =:= undefined -> PFduration;
				      true -> NFduration
				   end,
			       cycles =
				   if NFcycles =:= undefined -> PFcycles;
				      true -> NFcycles
				   end,
			       stalled_cycles_frontend =
				   if NFstalled_cycles_frontend =:= undefined ->
					  PFstalled_cycles_frontend;
				      true -> NFstalled_cycles_frontend
				   end,
			       stalled_cycles_backend =
				   if NFstalled_cycles_backend =:= undefined ->
					  PFstalled_cycles_backend;
				      true -> NFstalled_cycles_backend
				   end,
			       instructions =
				   if NFinstructions =:= undefined ->
					  PFinstructions;
				      true -> NFinstructions
				   end,
			       cache_references =
				   if NFcache_references =:= undefined ->
					  PFcache_references;
				      true -> NFcache_references
				   end,
			       cache_misses =
				   if NFcache_misses =:= undefined ->
					  PFcache_misses;
				      true -> NFcache_misses
				   end,
			       branches =
				   if NFbranches =:= undefined -> PFbranches;
				      true -> NFbranches
				   end,
			       branch_misses =
				   if NFbranch_misses =:= undefined ->
					  PFbranch_misses;
				      true -> NFbranch_misses
				   end,
			       bus_cycles =
				   if NFbus_cycles =:= undefined ->
					  PFbus_cycles;
				      true -> NFbus_cycles
				   end,
			       ref_cycles =
				   if NFref_cycles =:= undefined ->
					  PFref_cycles;
				      true -> NFref_cycles
				   end,
			       cpu_clock =
				   if NFcpu_clock =:= undefined -> PFcpu_clock;
				      true -> NFcpu_clock
				   end,
			       task_clock =
				   if NFtask_clock =:= undefined ->
					  PFtask_clock;
				      true -> NFtask_clock
				   end,
			       page_faults =
				   if NFpage_faults =:= undefined ->
					  PFpage_faults;
				      true -> NFpage_faults
				   end,
			       minor_faults =
				   if NFminor_faults =:= undefined ->
					  PFminor_faults;
				      true -> NFminor_faults
				   end,
			       major_faults =
				   if NFmajor_faults =:= undefined ->
					  PFmajor_faults;
				      true -> NFmajor_faults
				   end,
			       context_switches =
				   if NFcontext_switches =:= undefined ->
					  PFcontext_switches;
				      true -> NFcontext_switches
				   end,
			       cpu_migrations =
				   if NFcpu_migrations =:= undefined ->
					  PFcpu_migrations;
				      true -> NFcpu_migrations
				   end,
			       alignment_faults =
				   if NFalignment_faults =:= undefined ->
					  PFalignment_faults;
				      true -> NFalignment_faults
				   end,
			       emulation_faults =
				   if NFemulation_faults =:= undefined ->
					  PFemulation_faults;
				      true -> NFemulation_faults
				   end,
			       l1_dcache_loads =
				   if NFl1_dcache_loads =:= undefined ->
					  PFl1_dcache_loads;
				      true -> NFl1_dcache_loads
				   end,
			       l1_dcache_load_misses =
				   if NFl1_dcache_load_misses =:= undefined ->
					  PFl1_dcache_load_misses;
				      true -> NFl1_dcache_load_misses
				   end,
			       l1_dcache_stores =
				   if NFl1_dcache_stores =:= undefined ->
					  PFl1_dcache_stores;
				      true -> NFl1_dcache_stores
				   end,
			       l1_dcache_store_misses =
				   if NFl1_dcache_store_misses =:= undefined ->
					  PFl1_dcache_store_misses;
				      true -> NFl1_dcache_store_misses
				   end,
			       l1_dcache_prefetches =
				   if NFl1_dcache_prefetches =:= undefined ->
					  PFl1_dcache_prefetches;
				      true -> NFl1_dcache_prefetches
				   end,
			       l1_dcache_prefetch_misses =
				   if NFl1_dcache_prefetch_misses =:=
					undefined ->
					  PFl1_dcache_prefetch_misses;
				      true -> NFl1_dcache_prefetch_misses
				   end,
			       l1_icache_loads =
				   if NFl1_icache_loads =:= undefined ->
					  PFl1_icache_loads;
				      true -> NFl1_icache_loads
				   end,
			       l1_icache_load_misses =
				   if NFl1_icache_load_misses =:= undefined ->
					  PFl1_icache_load_misses;
				      true -> NFl1_icache_load_misses
				   end,
			       l1_icache_prefetches =
				   if NFl1_icache_prefetches =:= undefined ->
					  PFl1_icache_prefetches;
				      true -> NFl1_icache_prefetches
				   end,
			       l1_icache_prefetch_misses =
				   if NFl1_icache_prefetch_misses =:=
					undefined ->
					  PFl1_icache_prefetch_misses;
				      true -> NFl1_icache_prefetch_misses
				   end,
			       llc_loads =
				   if NFllc_loads =:= undefined -> PFllc_loads;
				      true -> NFllc_loads
				   end,
			       llc_load_misses =
				   if NFllc_load_misses =:= undefined ->
					  PFllc_load_misses;
				      true -> NFllc_load_misses
				   end,
			       llc_stores =
				   if NFllc_stores =:= undefined ->
					  PFllc_stores;
				      true -> NFllc_stores
				   end,
			       llc_store_misses =
				   if NFllc_store_misses =:= undefined ->
					  PFllc_store_misses;
				      true -> NFllc_store_misses
				   end,
			       llc_prefetches =
				   if NFllc_prefetches =:= undefined ->
					  PFllc_prefetches;
				      true -> NFllc_prefetches
				   end,
			       llc_prefetch_misses =
				   if NFllc_prefetch_misses =:= undefined ->
					  PFllc_prefetch_misses;
				      true -> NFllc_prefetch_misses
				   end,
			       dtlb_loads =
				   if NFdtlb_loads =:= undefined ->
					  PFdtlb_loads;
				      true -> NFdtlb_loads
				   end,
			       dtlb_load_misses =
				   if NFdtlb_load_misses =:= undefined ->
					  PFdtlb_load_misses;
				      true -> NFdtlb_load_misses
				   end,
			       dtlb_stores =
				   if NFdtlb_stores =:= undefined ->
					  PFdtlb_stores;
				      true -> NFdtlb_stores
				   end,
			       dtlb_store_misses =
				   if NFdtlb_store_misses =:= undefined ->
					  PFdtlb_store_misses;
				      true -> NFdtlb_store_misses
				   end,
			       dtlb_prefetches =
				   if NFdtlb_prefetches =:= undefined ->
					  PFdtlb_prefetches;
				      true -> NFdtlb_prefetches
				   end,
			       dtlb_prefetch_misses =
				   if NFdtlb_prefetch_misses =:= undefined ->
					  PFdtlb_prefetch_misses;
				      true -> NFdtlb_prefetch_misses
				   end,
			       itlb_loads =
				   if NFitlb_loads =:= undefined ->
					  PFitlb_loads;
				      true -> NFitlb_loads
				   end,
			       itlb_load_misses =
				   if NFitlb_load_misses =:= undefined ->
					  PFitlb_load_misses;
				      true -> NFitlb_load_misses
				   end,
			       branch_loads =
				   if NFbranch_loads =:= undefined ->
					  PFbranch_loads;
				      true -> NFbranch_loads
				   end,
			       branch_load_misses =
				   if NFbranch_load_misses =:= undefined ->
					  PFbranch_load_misses;
				      true -> NFbranch_load_misses
				   end,
			       node_loads =
				   if NFnode_loads =:= undefined ->
					  PFnode_loads;
				      true -> NFnode_loads
				   end,
			       node_load_misses =
				   if NFnode_load_misses =:= undefined ->
					  PFnode_load_misses;
				      true -> NFnode_load_misses
				   end,
			       node_stores =
				   if NFnode_stores =:= undefined ->
					  PFnode_stores;
				      true -> NFnode_stores
				   end,
			       node_store_misses =
				   if NFnode_store_misses =:= undefined ->
					  PFnode_store_misses;
				      true -> NFnode_store_misses
				   end,
			       node_prefetches =
				   if NFnode_prefetches =:= undefined ->
					  PFnode_prefetches;
				      true -> NFnode_prefetches
				   end,
			       node_prefetch_misses =
				   if NFnode_prefetch_misses =:= undefined ->
					  PFnode_prefetch_misses;
				      true -> NFnode_prefetch_misses
				   end}.

'merge_msg_mesos.v1.ResourceStatistics'(Prev,
					undefined) ->
    Prev;
'merge_msg_mesos.v1.ResourceStatistics'(undefined,
					New) ->
    New;
'merge_msg_mesos.v1.ResourceStatistics'(#'mesos.v1.ResourceStatistics'{timestamp
									   =
									   PFtimestamp,
								       processes
									   =
									   PFprocesses,
								       threads =
									   PFthreads,
								       cpus_user_time_secs
									   =
									   PFcpus_user_time_secs,
								       cpus_system_time_secs
									   =
									   PFcpus_system_time_secs,
								       cpus_limit
									   =
									   PFcpus_limit,
								       cpus_nr_periods
									   =
									   PFcpus_nr_periods,
								       cpus_nr_throttled
									   =
									   PFcpus_nr_throttled,
								       cpus_throttled_time_secs
									   =
									   PFcpus_throttled_time_secs,
								       mem_total_bytes
									   =
									   PFmem_total_bytes,
								       mem_total_memsw_bytes
									   =
									   PFmem_total_memsw_bytes,
								       mem_limit_bytes
									   =
									   PFmem_limit_bytes,
								       mem_soft_limit_bytes
									   =
									   PFmem_soft_limit_bytes,
								       mem_file_bytes
									   =
									   PFmem_file_bytes,
								       mem_anon_bytes
									   =
									   PFmem_anon_bytes,
								       mem_cache_bytes
									   =
									   PFmem_cache_bytes,
								       mem_rss_bytes
									   =
									   PFmem_rss_bytes,
								       mem_mapped_file_bytes
									   =
									   PFmem_mapped_file_bytes,
								       mem_swap_bytes
									   =
									   PFmem_swap_bytes,
								       mem_low_pressure_counter
									   =
									   PFmem_low_pressure_counter,
								       mem_medium_pressure_counter
									   =
									   PFmem_medium_pressure_counter,
								       mem_critical_pressure_counter
									   =
									   PFmem_critical_pressure_counter,
								       disk_limit_bytes
									   =
									   PFdisk_limit_bytes,
								       disk_used_bytes
									   =
									   PFdisk_used_bytes,
								       perf =
									   PFperf,
								       net_rx_packets
									   =
									   PFnet_rx_packets,
								       net_rx_bytes
									   =
									   PFnet_rx_bytes,
								       net_rx_errors
									   =
									   PFnet_rx_errors,
								       net_rx_dropped
									   =
									   PFnet_rx_dropped,
								       net_tx_packets
									   =
									   PFnet_tx_packets,
								       net_tx_bytes
									   =
									   PFnet_tx_bytes,
								       net_tx_errors
									   =
									   PFnet_tx_errors,
								       net_tx_dropped
									   =
									   PFnet_tx_dropped,
								       net_tcp_rtt_microsecs_p50
									   =
									   PFnet_tcp_rtt_microsecs_p50,
								       net_tcp_rtt_microsecs_p90
									   =
									   PFnet_tcp_rtt_microsecs_p90,
								       net_tcp_rtt_microsecs_p95
									   =
									   PFnet_tcp_rtt_microsecs_p95,
								       net_tcp_rtt_microsecs_p99
									   =
									   PFnet_tcp_rtt_microsecs_p99,
								       net_tcp_active_connections
									   =
									   PFnet_tcp_active_connections,
								       net_tcp_time_wait_connections
									   =
									   PFnet_tcp_time_wait_connections,
								       net_traffic_control_statistics
									   =
									   PFnet_traffic_control_statistics},
					#'mesos.v1.ResourceStatistics'{timestamp
									   =
									   NFtimestamp,
								       processes
									   =
									   NFprocesses,
								       threads =
									   NFthreads,
								       cpus_user_time_secs
									   =
									   NFcpus_user_time_secs,
								       cpus_system_time_secs
									   =
									   NFcpus_system_time_secs,
								       cpus_limit
									   =
									   NFcpus_limit,
								       cpus_nr_periods
									   =
									   NFcpus_nr_periods,
								       cpus_nr_throttled
									   =
									   NFcpus_nr_throttled,
								       cpus_throttled_time_secs
									   =
									   NFcpus_throttled_time_secs,
								       mem_total_bytes
									   =
									   NFmem_total_bytes,
								       mem_total_memsw_bytes
									   =
									   NFmem_total_memsw_bytes,
								       mem_limit_bytes
									   =
									   NFmem_limit_bytes,
								       mem_soft_limit_bytes
									   =
									   NFmem_soft_limit_bytes,
								       mem_file_bytes
									   =
									   NFmem_file_bytes,
								       mem_anon_bytes
									   =
									   NFmem_anon_bytes,
								       mem_cache_bytes
									   =
									   NFmem_cache_bytes,
								       mem_rss_bytes
									   =
									   NFmem_rss_bytes,
								       mem_mapped_file_bytes
									   =
									   NFmem_mapped_file_bytes,
								       mem_swap_bytes
									   =
									   NFmem_swap_bytes,
								       mem_low_pressure_counter
									   =
									   NFmem_low_pressure_counter,
								       mem_medium_pressure_counter
									   =
									   NFmem_medium_pressure_counter,
								       mem_critical_pressure_counter
									   =
									   NFmem_critical_pressure_counter,
								       disk_limit_bytes
									   =
									   NFdisk_limit_bytes,
								       disk_used_bytes
									   =
									   NFdisk_used_bytes,
								       perf =
									   NFperf,
								       net_rx_packets
									   =
									   NFnet_rx_packets,
								       net_rx_bytes
									   =
									   NFnet_rx_bytes,
								       net_rx_errors
									   =
									   NFnet_rx_errors,
								       net_rx_dropped
									   =
									   NFnet_rx_dropped,
								       net_tx_packets
									   =
									   NFnet_tx_packets,
								       net_tx_bytes
									   =
									   NFnet_tx_bytes,
								       net_tx_errors
									   =
									   NFnet_tx_errors,
								       net_tx_dropped
									   =
									   NFnet_tx_dropped,
								       net_tcp_rtt_microsecs_p50
									   =
									   NFnet_tcp_rtt_microsecs_p50,
								       net_tcp_rtt_microsecs_p90
									   =
									   NFnet_tcp_rtt_microsecs_p90,
								       net_tcp_rtt_microsecs_p95
									   =
									   NFnet_tcp_rtt_microsecs_p95,
								       net_tcp_rtt_microsecs_p99
									   =
									   NFnet_tcp_rtt_microsecs_p99,
								       net_tcp_active_connections
									   =
									   NFnet_tcp_active_connections,
								       net_tcp_time_wait_connections
									   =
									   NFnet_tcp_time_wait_connections,
								       net_traffic_control_statistics
									   =
									   NFnet_traffic_control_statistics}) ->
    #'mesos.v1.ResourceStatistics'{timestamp =
				       if NFtimestamp =:= undefined ->
					      PFtimestamp;
					  true -> NFtimestamp
				       end,
				   processes =
				       if NFprocesses =:= undefined ->
					      PFprocesses;
					  true -> NFprocesses
				       end,
				   threads =
				       if NFthreads =:= undefined -> PFthreads;
					  true -> NFthreads
				       end,
				   cpus_user_time_secs =
				       if NFcpus_user_time_secs =:= undefined ->
					      PFcpus_user_time_secs;
					  true -> NFcpus_user_time_secs
				       end,
				   cpus_system_time_secs =
				       if NFcpus_system_time_secs =:=
					    undefined ->
					      PFcpus_system_time_secs;
					  true -> NFcpus_system_time_secs
				       end,
				   cpus_limit =
				       if NFcpus_limit =:= undefined ->
					      PFcpus_limit;
					  true -> NFcpus_limit
				       end,
				   cpus_nr_periods =
				       if NFcpus_nr_periods =:= undefined ->
					      PFcpus_nr_periods;
					  true -> NFcpus_nr_periods
				       end,
				   cpus_nr_throttled =
				       if NFcpus_nr_throttled =:= undefined ->
					      PFcpus_nr_throttled;
					  true -> NFcpus_nr_throttled
				       end,
				   cpus_throttled_time_secs =
				       if NFcpus_throttled_time_secs =:=
					    undefined ->
					      PFcpus_throttled_time_secs;
					  true -> NFcpus_throttled_time_secs
				       end,
				   mem_total_bytes =
				       if NFmem_total_bytes =:= undefined ->
					      PFmem_total_bytes;
					  true -> NFmem_total_bytes
				       end,
				   mem_total_memsw_bytes =
				       if NFmem_total_memsw_bytes =:=
					    undefined ->
					      PFmem_total_memsw_bytes;
					  true -> NFmem_total_memsw_bytes
				       end,
				   mem_limit_bytes =
				       if NFmem_limit_bytes =:= undefined ->
					      PFmem_limit_bytes;
					  true -> NFmem_limit_bytes
				       end,
				   mem_soft_limit_bytes =
				       if NFmem_soft_limit_bytes =:=
					    undefined ->
					      PFmem_soft_limit_bytes;
					  true -> NFmem_soft_limit_bytes
				       end,
				   mem_file_bytes =
				       if NFmem_file_bytes =:= undefined ->
					      PFmem_file_bytes;
					  true -> NFmem_file_bytes
				       end,
				   mem_anon_bytes =
				       if NFmem_anon_bytes =:= undefined ->
					      PFmem_anon_bytes;
					  true -> NFmem_anon_bytes
				       end,
				   mem_cache_bytes =
				       if NFmem_cache_bytes =:= undefined ->
					      PFmem_cache_bytes;
					  true -> NFmem_cache_bytes
				       end,
				   mem_rss_bytes =
				       if NFmem_rss_bytes =:= undefined ->
					      PFmem_rss_bytes;
					  true -> NFmem_rss_bytes
				       end,
				   mem_mapped_file_bytes =
				       if NFmem_mapped_file_bytes =:=
					    undefined ->
					      PFmem_mapped_file_bytes;
					  true -> NFmem_mapped_file_bytes
				       end,
				   mem_swap_bytes =
				       if NFmem_swap_bytes =:= undefined ->
					      PFmem_swap_bytes;
					  true -> NFmem_swap_bytes
				       end,
				   mem_low_pressure_counter =
				       if NFmem_low_pressure_counter =:=
					    undefined ->
					      PFmem_low_pressure_counter;
					  true -> NFmem_low_pressure_counter
				       end,
				   mem_medium_pressure_counter =
				       if NFmem_medium_pressure_counter =:=
					    undefined ->
					      PFmem_medium_pressure_counter;
					  true -> NFmem_medium_pressure_counter
				       end,
				   mem_critical_pressure_counter =
				       if NFmem_critical_pressure_counter =:=
					    undefined ->
					      PFmem_critical_pressure_counter;
					  true ->
					      NFmem_critical_pressure_counter
				       end,
				   disk_limit_bytes =
				       if NFdisk_limit_bytes =:= undefined ->
					      PFdisk_limit_bytes;
					  true -> NFdisk_limit_bytes
				       end,
				   disk_used_bytes =
				       if NFdisk_used_bytes =:= undefined ->
					      PFdisk_used_bytes;
					  true -> NFdisk_used_bytes
				       end,
				   perf =
				       'merge_msg_mesos.v1.PerfStatistics'(PFperf,
									   NFperf),
				   net_rx_packets =
				       if NFnet_rx_packets =:= undefined ->
					      PFnet_rx_packets;
					  true -> NFnet_rx_packets
				       end,
				   net_rx_bytes =
				       if NFnet_rx_bytes =:= undefined ->
					      PFnet_rx_bytes;
					  true -> NFnet_rx_bytes
				       end,
				   net_rx_errors =
				       if NFnet_rx_errors =:= undefined ->
					      PFnet_rx_errors;
					  true -> NFnet_rx_errors
				       end,
				   net_rx_dropped =
				       if NFnet_rx_dropped =:= undefined ->
					      PFnet_rx_dropped;
					  true -> NFnet_rx_dropped
				       end,
				   net_tx_packets =
				       if NFnet_tx_packets =:= undefined ->
					      PFnet_tx_packets;
					  true -> NFnet_tx_packets
				       end,
				   net_tx_bytes =
				       if NFnet_tx_bytes =:= undefined ->
					      PFnet_tx_bytes;
					  true -> NFnet_tx_bytes
				       end,
				   net_tx_errors =
				       if NFnet_tx_errors =:= undefined ->
					      PFnet_tx_errors;
					  true -> NFnet_tx_errors
				       end,
				   net_tx_dropped =
				       if NFnet_tx_dropped =:= undefined ->
					      PFnet_tx_dropped;
					  true -> NFnet_tx_dropped
				       end,
				   net_tcp_rtt_microsecs_p50 =
				       if NFnet_tcp_rtt_microsecs_p50 =:=
					    undefined ->
					      PFnet_tcp_rtt_microsecs_p50;
					  true -> NFnet_tcp_rtt_microsecs_p50
				       end,
				   net_tcp_rtt_microsecs_p90 =
				       if NFnet_tcp_rtt_microsecs_p90 =:=
					    undefined ->
					      PFnet_tcp_rtt_microsecs_p90;
					  true -> NFnet_tcp_rtt_microsecs_p90
				       end,
				   net_tcp_rtt_microsecs_p95 =
				       if NFnet_tcp_rtt_microsecs_p95 =:=
					    undefined ->
					      PFnet_tcp_rtt_microsecs_p95;
					  true -> NFnet_tcp_rtt_microsecs_p95
				       end,
				   net_tcp_rtt_microsecs_p99 =
				       if NFnet_tcp_rtt_microsecs_p99 =:=
					    undefined ->
					      PFnet_tcp_rtt_microsecs_p99;
					  true -> NFnet_tcp_rtt_microsecs_p99
				       end,
				   net_tcp_active_connections =
				       if NFnet_tcp_active_connections =:=
					    undefined ->
					      PFnet_tcp_active_connections;
					  true -> NFnet_tcp_active_connections
				       end,
				   net_tcp_time_wait_connections =
				       if NFnet_tcp_time_wait_connections =:=
					    undefined ->
					      PFnet_tcp_time_wait_connections;
					  true ->
					      NFnet_tcp_time_wait_connections
				       end,
				   net_traffic_control_statistics =
				       PFnet_traffic_control_statistics ++
					 NFnet_traffic_control_statistics}.

'merge_msg_mesos.v1.Credentials'(#'mesos.v1.Credentials'{credentials
							     = PFcredentials},
				 #'mesos.v1.Credentials'{credentials =
							     NFcredentials}) ->
    #'mesos.v1.Credentials'{credentials =
				PFcredentials ++ NFcredentials}.

'merge_msg_mesos.v1.ResourceUsage.Executor'(#'mesos.v1.ResourceUsage.Executor'{executor_info
										   =
										   PFexecutor_info,
									       allocated
										   =
										   PFallocated,
									       statistics
										   =
										   PFstatistics},
					    #'mesos.v1.ResourceUsage.Executor'{executor_info
										   =
										   NFexecutor_info,
									       allocated
										   =
										   NFallocated,
									       statistics
										   =
										   NFstatistics}) ->
    #'mesos.v1.ResourceUsage.Executor'{executor_info =
					   'merge_msg_mesos.v1.ExecutorInfo'(PFexecutor_info,
									     NFexecutor_info),
				       allocated = PFallocated ++ NFallocated,
				       statistics =
					   'merge_msg_mesos.v1.ResourceStatistics'(PFstatistics,
										   NFstatistics)}.

'merge_msg_mesos.v1.ACL'(_Prev, New) -> New.

'merge_msg_mesos.v1.ACL.RunTask'(#'mesos.v1.ACL.RunTask'{principals
							     = PFprincipals,
							 users = PFusers},
				 #'mesos.v1.ACL.RunTask'{principals =
							     NFprincipals,
							 users = NFusers}) ->
    #'mesos.v1.ACL.RunTask'{principals =
				'merge_msg_mesos.v1.ACL.Entity'(PFprincipals,
								NFprincipals),
			    users =
				'merge_msg_mesos.v1.ACL.Entity'(PFusers,
								NFusers)}.

'merge_msg_mesos.v1.ACL.RegisterFramework'(#'mesos.v1.ACL.RegisterFramework'{principals
										 =
										 PFprincipals,
									     roles
										 =
										 PFroles},
					   #'mesos.v1.ACL.RegisterFramework'{principals
										 =
										 NFprincipals,
									     roles
										 =
										 NFroles}) ->
    #'mesos.v1.ACL.RegisterFramework'{principals =
					  'merge_msg_mesos.v1.ACL.Entity'(PFprincipals,
									  NFprincipals),
				      roles =
					  'merge_msg_mesos.v1.ACL.Entity'(PFroles,
									  NFroles)}.

'merge_msg_mesos.v1.ACL.ShutdownFramework'(#'mesos.v1.ACL.ShutdownFramework'{principals
										 =
										 PFprincipals,
									     framework_principals
										 =
										 PFframework_principals},
					   #'mesos.v1.ACL.ShutdownFramework'{principals
										 =
										 NFprincipals,
									     framework_principals
										 =
										 NFframework_principals}) ->
    #'mesos.v1.ACL.ShutdownFramework'{principals =
					  'merge_msg_mesos.v1.ACL.Entity'(PFprincipals,
									  NFprincipals),
				      framework_principals =
					  'merge_msg_mesos.v1.ACL.Entity'(PFframework_principals,
									  NFframework_principals)}.

'merge_msg_mesos.v1.ACLs'(#'mesos.v1.ACLs'{permissive =
					       PFpermissive,
					   register_frameworks =
					       PFregister_frameworks,
					   run_tasks = PFrun_tasks,
					   shutdown_frameworks =
					       PFshutdown_frameworks},
			  #'mesos.v1.ACLs'{permissive = NFpermissive,
					   register_frameworks =
					       NFregister_frameworks,
					   run_tasks = NFrun_tasks,
					   shutdown_frameworks =
					       NFshutdown_frameworks}) ->
    #'mesos.v1.ACLs'{permissive =
			 if NFpermissive =:= undefined -> PFpermissive;
			    true -> NFpermissive
			 end,
		     register_frameworks =
			 PFregister_frameworks ++ NFregister_frameworks,
		     run_tasks = PFrun_tasks ++ NFrun_tasks,
		     shutdown_frameworks =
			 PFshutdown_frameworks ++ NFshutdown_frameworks}.

'merge_msg_mesos.v1.MasterInfo'(#'mesos.v1.MasterInfo'{id
							   = PFid,
						       ip = PFip, port = PFport,
						       pid = PFpid,
						       hostname = PFhostname,
						       version = PFversion,
						       address = PFaddress},
				#'mesos.v1.MasterInfo'{id = NFid, ip = NFip,
						       port = NFport,
						       pid = NFpid,
						       hostname = NFhostname,
						       version = NFversion,
						       address = NFaddress}) ->
    #'mesos.v1.MasterInfo'{id =
			       if NFid =:= undefined -> PFid;
				  true -> NFid
			       end,
			   ip =
			       if NFip =:= undefined -> PFip;
				  true -> NFip
			       end,
			   port =
			       if NFport =:= undefined -> PFport;
				  true -> NFport
			       end,
			   pid =
			       if NFpid =:= undefined -> PFpid;
				  true -> NFpid
			       end,
			   hostname =
			       if NFhostname =:= undefined -> PFhostname;
				  true -> NFhostname
			       end,
			   version =
			       if NFversion =:= undefined -> PFversion;
				  true -> NFversion
			       end,
			   address =
			       'merge_msg_mesos.v1.Address'(PFaddress,
							    NFaddress)}.

'merge_msg_mesos.v1.ResourceUsage'(#'mesos.v1.ResourceUsage'{executors
								 = PFexecutors,
							     total = PFtotal},
				   #'mesos.v1.ResourceUsage'{executors =
								 NFexecutors,
							     total =
								 NFtotal}) ->
    #'mesos.v1.ResourceUsage'{executors =
				  PFexecutors ++ NFexecutors,
			      total = PFtotal ++ NFtotal}.

'merge_msg_mesos.v1.Value'(#'mesos.v1.Value'{type =
						 PFtype,
					     scalar = PFscalar,
					     ranges = PFranges, set = PFset,
					     text = PFtext},
			   #'mesos.v1.Value'{type = NFtype, scalar = NFscalar,
					     ranges = NFranges, set = NFset,
					     text = NFtext}) ->
    #'mesos.v1.Value'{type =
			  if NFtype =:= undefined -> PFtype;
			     true -> NFtype
			  end,
		      scalar =
			  'merge_msg_mesos.v1.Value.Scalar'(PFscalar, NFscalar),
		      ranges =
			  'merge_msg_mesos.v1.Value.Ranges'(PFranges, NFranges),
		      set = 'merge_msg_mesos.v1.Value.Set'(PFset, NFset),
		      text = 'merge_msg_mesos.v1.Value.Text'(PFtext, NFtext)}.

'merge_msg_mesos.v1.ContainerID'(#'mesos.v1.ContainerID'{value
							     = PFvalue},
				 #'mesos.v1.ContainerID'{value = NFvalue}) ->
    #'mesos.v1.ContainerID'{value =
				if NFvalue =:= undefined -> PFvalue;
				   true -> NFvalue
				end}.



verify_msg(Msg) ->
    case Msg of
      #'mesos.v1.Label'{} ->
	  'v_msg_mesos.v1.Label'(Msg, ['mesos.v1.Label']);
      #'mesos.v1.Labels'{} ->
	  'v_msg_mesos.v1.Labels'(Msg, ['mesos.v1.Labels']);
      #'mesos.v1.Image.AppC'{} ->
	  'v_msg_mesos.v1.Image.AppC'(Msg,
				      ['mesos.v1.Image.AppC']);
      #'mesos.v1.Image'{} ->
	  'v_msg_mesos.v1.Image'(Msg, ['mesos.v1.Image']);
      #'mesos.v1.ContainerInfo.MesosInfo'{} ->
	  'v_msg_mesos.v1.ContainerInfo.MesosInfo'(Msg,
						   ['mesos.v1.ContainerInfo.MesosInfo']);
      #'mesos.v1.Parameter'{} ->
	  'v_msg_mesos.v1.Parameter'(Msg, ['mesos.v1.Parameter']);
      #'mesos.v1.ContainerInfo.DockerInfo.PortMapping'{} ->
	  'v_msg_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Msg,
								['mesos.v1.ContainerInfo.DockerInfo.PortMapping']);
      #'mesos.v1.ContainerInfo.DockerInfo'{} ->
	  'v_msg_mesos.v1.ContainerInfo.DockerInfo'(Msg,
						    ['mesos.v1.ContainerInfo.DockerInfo']);
      #'mesos.v1.Volume'{} ->
	  'v_msg_mesos.v1.Volume'(Msg, ['mesos.v1.Volume']);
      #'mesos.v1.ContainerInfo'{} ->
	  'v_msg_mesos.v1.ContainerInfo'(Msg,
					 ['mesos.v1.ContainerInfo']);
      #'mesos.v1.AgentID'{} ->
	  'v_msg_mesos.v1.AgentID'(Msg, ['mesos.v1.AgentID']);
      #'mesos.v1.Value.Text'{} ->
	  'v_msg_mesos.v1.Value.Text'(Msg,
				      ['mesos.v1.Value.Text']);
      #'mesos.v1.Value.Set'{} ->
	  'v_msg_mesos.v1.Value.Set'(Msg, ['mesos.v1.Value.Set']);
      #'mesos.v1.Value.Range'{} ->
	  'v_msg_mesos.v1.Value.Range'(Msg,
				       ['mesos.v1.Value.Range']);
      #'mesos.v1.Value.Ranges'{} ->
	  'v_msg_mesos.v1.Value.Ranges'(Msg,
					['mesos.v1.Value.Ranges']);
      #'mesos.v1.Value.Scalar'{} ->
	  'v_msg_mesos.v1.Value.Scalar'(Msg,
					['mesos.v1.Value.Scalar']);
      #'mesos.v1.Attribute'{} ->
	  'v_msg_mesos.v1.Attribute'(Msg, ['mesos.v1.Attribute']);
      #'mesos.v1.Resource.RevocableInfo'{} ->
	  'v_msg_mesos.v1.Resource.RevocableInfo'(Msg,
						  ['mesos.v1.Resource.RevocableInfo']);
      #'mesos.v1.Resource.DiskInfo.Persistence'{} ->
	  'v_msg_mesos.v1.Resource.DiskInfo.Persistence'(Msg,
							 ['mesos.v1.Resource.DiskInfo.Persistence']);
      #'mesos.v1.Resource.DiskInfo'{} ->
	  'v_msg_mesos.v1.Resource.DiskInfo'(Msg,
					     ['mesos.v1.Resource.DiskInfo']);
      #'mesos.v1.Resource.ReservationInfo'{} ->
	  'v_msg_mesos.v1.Resource.ReservationInfo'(Msg,
						    ['mesos.v1.Resource.ReservationInfo']);
      #'mesos.v1.Resource'{} ->
	  'v_msg_mesos.v1.Resource'(Msg, ['mesos.v1.Resource']);
      #'mesos.v1.AgentInfo'{} ->
	  'v_msg_mesos.v1.AgentInfo'(Msg, ['mesos.v1.AgentInfo']);
      #'mesos.v1.Request'{} ->
	  'v_msg_mesos.v1.Request'(Msg, ['mesos.v1.Request']);
      #'mesos.v1.scheduler.Call.Request'{} ->
	  'v_msg_mesos.v1.scheduler.Call.Request'(Msg,
						  ['mesos.v1.scheduler.Call.Request']);
      #'mesos.v1.ExecutorID'{} ->
	  'v_msg_mesos.v1.ExecutorID'(Msg,
				      ['mesos.v1.ExecutorID']);
      #'mesos.v1.scheduler.Call.Message'{} ->
	  'v_msg_mesos.v1.scheduler.Call.Message'(Msg,
						  ['mesos.v1.scheduler.Call.Message']);
      #'mesos.v1.TaskID'{} ->
	  'v_msg_mesos.v1.TaskID'(Msg, ['mesos.v1.TaskID']);
      #'mesos.v1.scheduler.Call.Reconcile.Task'{} ->
	  'v_msg_mesos.v1.scheduler.Call.Reconcile.Task'(Msg,
							 ['mesos.v1.scheduler.Call.Reconcile.Task']);
      #'mesos.v1.scheduler.Call.Reconcile'{} ->
	  'v_msg_mesos.v1.scheduler.Call.Reconcile'(Msg,
						    ['mesos.v1.scheduler.Call.Reconcile']);
      #'mesos.v1.scheduler.Call.Acknowledge'{} ->
	  'v_msg_mesos.v1.scheduler.Call.Acknowledge'(Msg,
						      ['mesos.v1.scheduler.Call.Acknowledge']);
      #'mesos.v1.scheduler.Call.Shutdown'{} ->
	  'v_msg_mesos.v1.scheduler.Call.Shutdown'(Msg,
						   ['mesos.v1.scheduler.Call.Shutdown']);
      #'mesos.v1.scheduler.Call.Kill'{} ->
	  'v_msg_mesos.v1.scheduler.Call.Kill'(Msg,
					       ['mesos.v1.scheduler.Call.Kill']);
      #'mesos.v1.Filters'{} ->
	  'v_msg_mesos.v1.Filters'(Msg, ['mesos.v1.Filters']);
      #'mesos.v1.OfferID'{} ->
	  'v_msg_mesos.v1.OfferID'(Msg, ['mesos.v1.OfferID']);
      #'mesos.v1.scheduler.Call.Decline'{} ->
	  'v_msg_mesos.v1.scheduler.Call.Decline'(Msg,
						  ['mesos.v1.scheduler.Call.Decline']);
      #'mesos.v1.Offer.Operation.Destroy'{} ->
	  'v_msg_mesos.v1.Offer.Operation.Destroy'(Msg,
						   ['mesos.v1.Offer.Operation.Destroy']);
      #'mesos.v1.Offer.Operation.Create'{} ->
	  'v_msg_mesos.v1.Offer.Operation.Create'(Msg,
						  ['mesos.v1.Offer.Operation.Create']);
      #'mesos.v1.Offer.Operation.Unreserve'{} ->
	  'v_msg_mesos.v1.Offer.Operation.Unreserve'(Msg,
						     ['mesos.v1.Offer.Operation.Unreserve']);
      #'mesos.v1.Offer.Operation.Reserve'{} ->
	  'v_msg_mesos.v1.Offer.Operation.Reserve'(Msg,
						   ['mesos.v1.Offer.Operation.Reserve']);
      #'mesos.v1.Port'{} ->
	  'v_msg_mesos.v1.Port'(Msg, ['mesos.v1.Port']);
      #'mesos.v1.Ports'{} ->
	  'v_msg_mesos.v1.Ports'(Msg, ['mesos.v1.Ports']);
      #'mesos.v1.DiscoveryInfo'{} ->
	  'v_msg_mesos.v1.DiscoveryInfo'(Msg,
					 ['mesos.v1.DiscoveryInfo']);
      #'mesos.v1.Environment.Variable'{} ->
	  'v_msg_mesos.v1.Environment.Variable'(Msg,
						['mesos.v1.Environment.Variable']);
      #'mesos.v1.Environment'{} ->
	  'v_msg_mesos.v1.Environment'(Msg,
				       ['mesos.v1.Environment']);
      #'mesos.v1.CommandInfo.URI'{} ->
	  'v_msg_mesos.v1.CommandInfo.URI'(Msg,
					   ['mesos.v1.CommandInfo.URI']);
      #'mesos.v1.CommandInfo.ContainerInfo'{} ->
	  'v_msg_mesos.v1.CommandInfo.ContainerInfo'(Msg,
						     ['mesos.v1.CommandInfo.ContainerInfo']);
      #'mesos.v1.CommandInfo'{} ->
	  'v_msg_mesos.v1.CommandInfo'(Msg,
				       ['mesos.v1.CommandInfo']);
      #'mesos.v1.HealthCheck.HTTP'{} ->
	  'v_msg_mesos.v1.HealthCheck.HTTP'(Msg,
					    ['mesos.v1.HealthCheck.HTTP']);
      #'mesos.v1.HealthCheck'{} ->
	  'v_msg_mesos.v1.HealthCheck'(Msg,
				       ['mesos.v1.HealthCheck']);
      #'mesos.v1.FrameworkID'{} ->
	  'v_msg_mesos.v1.FrameworkID'(Msg,
				       ['mesos.v1.FrameworkID']);
      #'mesos.v1.ExecutorInfo'{} ->
	  'v_msg_mesos.v1.ExecutorInfo'(Msg,
					['mesos.v1.ExecutorInfo']);
      #'mesos.v1.TaskInfo'{} ->
	  'v_msg_mesos.v1.TaskInfo'(Msg, ['mesos.v1.TaskInfo']);
      #'mesos.v1.Offer.Operation.Launch'{} ->
	  'v_msg_mesos.v1.Offer.Operation.Launch'(Msg,
						  ['mesos.v1.Offer.Operation.Launch']);
      #'mesos.v1.Offer.Operation'{} ->
	  'v_msg_mesos.v1.Offer.Operation'(Msg,
					   ['mesos.v1.Offer.Operation']);
      #'mesos.v1.scheduler.Call.Accept'{} ->
	  'v_msg_mesos.v1.scheduler.Call.Accept'(Msg,
						 ['mesos.v1.scheduler.Call.Accept']);
      #'mesos.v1.FrameworkInfo.Capability'{} ->
	  'v_msg_mesos.v1.FrameworkInfo.Capability'(Msg,
						    ['mesos.v1.FrameworkInfo.Capability']);
      #'mesos.v1.FrameworkInfo'{} ->
	  'v_msg_mesos.v1.FrameworkInfo'(Msg,
					 ['mesos.v1.FrameworkInfo']);
      #'mesos.v1.scheduler.Call.Subscribe'{} ->
	  'v_msg_mesos.v1.scheduler.Call.Subscribe'(Msg,
						    ['mesos.v1.scheduler.Call.Subscribe']);
      #'mesos.v1.scheduler.Call'{} ->
	  'v_msg_mesos.v1.scheduler.Call'(Msg,
					  ['mesos.v1.scheduler.Call']);
      #'mesos.v1.RateLimit'{} ->
	  'v_msg_mesos.v1.RateLimit'(Msg, ['mesos.v1.RateLimit']);
      #'mesos.v1.RateLimits'{} ->
	  'v_msg_mesos.v1.RateLimits'(Msg,
				      ['mesos.v1.RateLimits']);
      #'mesos.v1.Parameters'{} ->
	  'v_msg_mesos.v1.Parameters'(Msg,
				      ['mesos.v1.Parameters']);
      #'mesos.v1.Address'{} ->
	  'v_msg_mesos.v1.Address'(Msg, ['mesos.v1.Address']);
      #'mesos.v1.URL'{} ->
	  'v_msg_mesos.v1.URL'(Msg, ['mesos.v1.URL']);
      #'mesos.v1.Offer'{} ->
	  'v_msg_mesos.v1.Offer'(Msg, ['mesos.v1.Offer']);
      #'mesos.v1.Credential'{} ->
	  'v_msg_mesos.v1.Credential'(Msg,
				      ['mesos.v1.Credential']);
      #'mesos.v1.ACL.Entity'{} ->
	  'v_msg_mesos.v1.ACL.Entity'(Msg,
				      ['mesos.v1.ACL.Entity']);
      #'mesos.v1.TaskStatus'{} ->
	  'v_msg_mesos.v1.TaskStatus'(Msg,
				      ['mesos.v1.TaskStatus']);
      #'mesos.v1.scheduler.Event.Update'{} ->
	  'v_msg_mesos.v1.scheduler.Event.Update'(Msg,
						  ['mesos.v1.scheduler.Event.Update']);
      #'mesos.v1.scheduler.Event.Error'{} ->
	  'v_msg_mesos.v1.scheduler.Event.Error'(Msg,
						 ['mesos.v1.scheduler.Event.Error']);
      #'mesos.v1.scheduler.Event.Failure'{} ->
	  'v_msg_mesos.v1.scheduler.Event.Failure'(Msg,
						   ['mesos.v1.scheduler.Event.Failure']);
      #'mesos.v1.scheduler.Event.Message'{} ->
	  'v_msg_mesos.v1.scheduler.Event.Message'(Msg,
						   ['mesos.v1.scheduler.Event.Message']);
      #'mesos.v1.scheduler.Event.Rescind'{} ->
	  'v_msg_mesos.v1.scheduler.Event.Rescind'(Msg,
						   ['mesos.v1.scheduler.Event.Rescind']);
      #'mesos.v1.scheduler.Event.Offers'{} ->
	  'v_msg_mesos.v1.scheduler.Event.Offers'(Msg,
						  ['mesos.v1.scheduler.Event.Offers']);
      #'mesos.v1.scheduler.Event.Subscribed'{} ->
	  'v_msg_mesos.v1.scheduler.Event.Subscribed'(Msg,
						      ['mesos.v1.scheduler.Event.Subscribed']);
      #'mesos.v1.scheduler.Event'{} ->
	  'v_msg_mesos.v1.scheduler.Event'(Msg,
					   ['mesos.v1.scheduler.Event']);
      #'mesos.v1.TrafficControlStatistics'{} ->
	  'v_msg_mesos.v1.TrafficControlStatistics'(Msg,
						    ['mesos.v1.TrafficControlStatistics']);
      #'mesos.v1.PerfStatistics'{} ->
	  'v_msg_mesos.v1.PerfStatistics'(Msg,
					  ['mesos.v1.PerfStatistics']);
      #'mesos.v1.ResourceStatistics'{} ->
	  'v_msg_mesos.v1.ResourceStatistics'(Msg,
					      ['mesos.v1.ResourceStatistics']);
      #'mesos.v1.Credentials'{} ->
	  'v_msg_mesos.v1.Credentials'(Msg,
				       ['mesos.v1.Credentials']);
      #'mesos.v1.ResourceUsage.Executor'{} ->
	  'v_msg_mesos.v1.ResourceUsage.Executor'(Msg,
						  ['mesos.v1.ResourceUsage.Executor']);
      #'mesos.v1.ACL'{} ->
	  'v_msg_mesos.v1.ACL'(Msg, ['mesos.v1.ACL']);
      #'mesos.v1.ACL.RunTask'{} ->
	  'v_msg_mesos.v1.ACL.RunTask'(Msg,
				       ['mesos.v1.ACL.RunTask']);
      #'mesos.v1.ACL.RegisterFramework'{} ->
	  'v_msg_mesos.v1.ACL.RegisterFramework'(Msg,
						 ['mesos.v1.ACL.RegisterFramework']);
      #'mesos.v1.ACL.ShutdownFramework'{} ->
	  'v_msg_mesos.v1.ACL.ShutdownFramework'(Msg,
						 ['mesos.v1.ACL.ShutdownFramework']);
      #'mesos.v1.ACLs'{} ->
	  'v_msg_mesos.v1.ACLs'(Msg, ['mesos.v1.ACLs']);
      #'mesos.v1.MasterInfo'{} ->
	  'v_msg_mesos.v1.MasterInfo'(Msg,
				      ['mesos.v1.MasterInfo']);
      #'mesos.v1.ResourceUsage'{} ->
	  'v_msg_mesos.v1.ResourceUsage'(Msg,
					 ['mesos.v1.ResourceUsage']);
      #'mesos.v1.Value'{} ->
	  'v_msg_mesos.v1.Value'(Msg, ['mesos.v1.Value']);
      #'mesos.v1.ContainerID'{} ->
	  'v_msg_mesos.v1.ContainerID'(Msg,
				       ['mesos.v1.ContainerID']);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


'v_msg_mesos.v1.Label'(#'mesos.v1.Label'{key = F1,
					 value = F2},
		       Path) ->
    v_type_string(F1, [key | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [value | Path])
    end,
    ok;
'v_msg_mesos.v1.Label'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Label'}, X,
		  Path).

'v_msg_mesos.v1.Labels'(#'mesos.v1.Labels'{labels = F1},
			Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.Label'(Elem, [labels | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Label'}},
			 F1, Path)
    end,
    ok;
'v_msg_mesos.v1.Labels'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Labels'}, X,
		  Path).

'v_msg_mesos.v1.Image.AppC'(#'mesos.v1.Image.AppC'{name
						       = F1,
						   id = F2, labels = F3},
			    Path) ->
    v_type_string(F1, [name | Path]),
    v_type_string(F2, [id | Path]),
    if F3 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Labels'(F3, [labels | Path])
    end,
    ok;
'v_msg_mesos.v1.Image.AppC'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Image.AppC'}, X,
		  Path).

'v_msg_mesos.v1.Image'(#'mesos.v1.Image'{type = F1,
					 appc = F2},
		       Path) ->
    'v_enum_mesos.v1.Image.Type'(F1, [type | Path]),
    if F2 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Image.AppC'(F2, [appc | Path])
    end,
    ok;
'v_msg_mesos.v1.Image'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Image'}, X,
		  Path).

'v_msg_mesos.v1.ContainerInfo.MesosInfo'(#'mesos.v1.ContainerInfo.MesosInfo'{image
										 =
										 F1},
					 Path) ->
    if F1 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Image'(F1, [image | Path])
    end,
    ok;
'v_msg_mesos.v1.ContainerInfo.MesosInfo'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.ContainerInfo.MesosInfo'},
		  X, Path).

'v_msg_mesos.v1.Parameter'(#'mesos.v1.Parameter'{key =
						     F1,
						 value = F2},
			   Path) ->
    v_type_string(F1, [key | Path]),
    v_type_string(F2, [value | Path]),
    ok;
'v_msg_mesos.v1.Parameter'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Parameter'}, X,
		  Path).

'v_msg_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(#'mesos.v1.ContainerInfo.DockerInfo.PortMapping'{host_port
													   =
													   F1,
												       container_port
													   =
													   F2,
												       protocol
													   =
													   F3},
						      Path) ->
    v_type_uint32(F1, [host_port | Path]),
    v_type_uint32(F2, [container_port | Path]),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [protocol | Path])
    end,
    ok;
'v_msg_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(X,
						      Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.ContainerInfo.DockerInfo.PortMapping'},
		  X, Path).

'v_msg_mesos.v1.ContainerInfo.DockerInfo'(#'mesos.v1.ContainerInfo.DockerInfo'{image
										   =
										   F1,
									       network
										   =
										   F2,
									       port_mappings
										   =
										   F3,
									       privileged
										   =
										   F4,
									       parameters
										   =
										   F5,
									       force_pull_image
										   =
										   F6},
					  Path) ->
    v_type_string(F1, [image | Path]),
    if F2 == undefined -> ok;
       true ->
	   'v_enum_mesos.v1.ContainerInfo.DockerInfo.Network'(F2,
							      [network | Path])
    end,
    if is_list(F3) ->
	   ['v_msg_mesos.v1.ContainerInfo.DockerInfo.PortMapping'(Elem,
								  [port_mappings
								   | Path])
	    || Elem <- F3];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg,
			   'mesos.v1.ContainerInfo.DockerInfo.PortMapping'}},
			 F3, Path)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [privileged | Path])
    end,
    if is_list(F5) ->
	   ['v_msg_mesos.v1.Parameter'(Elem, [parameters | Path])
	    || Elem <- F5];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Parameter'}},
			 F5, Path)
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [force_pull_image | Path])
    end,
    ok;
'v_msg_mesos.v1.ContainerInfo.DockerInfo'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.ContainerInfo.DockerInfo'},
		  X, Path).

'v_msg_mesos.v1.Volume'(#'mesos.v1.Volume'{mode = F1,
					   container_path = F2, host_path = F3,
					   image = F4},
			Path) ->
    'v_enum_mesos.v1.Volume.Mode'(F1, [mode | Path]),
    v_type_string(F2, [container_path | Path]),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [host_path | Path])
    end,
    if F4 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Image'(F4, [image | Path])
    end,
    ok;
'v_msg_mesos.v1.Volume'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Volume'}, X,
		  Path).

'v_msg_mesos.v1.ContainerInfo'(#'mesos.v1.ContainerInfo'{type
							     = F1,
							 volumes = F2,
							 hostname = F3,
							 docker = F4,
							 mesos = F5},
			       Path) ->
    'v_enum_mesos.v1.ContainerInfo.Type'(F1, [type | Path]),
    if is_list(F2) ->
	   ['v_msg_mesos.v1.Volume'(Elem, [volumes | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Volume'}},
			 F2, Path)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [hostname | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.ContainerInfo.DockerInfo'(F4,
						     [docker | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.ContainerInfo.MesosInfo'(F5,
						    [mesos | Path])
    end,
    ok;
'v_msg_mesos.v1.ContainerInfo'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.ContainerInfo'},
		  X, Path).

'v_msg_mesos.v1.AgentID'(#'mesos.v1.AgentID'{value =
						 F1},
			 Path) ->
    v_type_string(F1, [value | Path]), ok;
'v_msg_mesos.v1.AgentID'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.AgentID'}, X,
		  Path).

'v_msg_mesos.v1.Value.Text'(#'mesos.v1.Value.Text'{value
						       = F1},
			    Path) ->
    v_type_string(F1, [value | Path]), ok;
'v_msg_mesos.v1.Value.Text'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Value.Text'}, X,
		  Path).

'v_msg_mesos.v1.Value.Set'(#'mesos.v1.Value.Set'{item =
						     F1},
			   Path) ->
    if is_list(F1) ->
	   [v_type_string(Elem, [item | Path]) || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of, string}, F1, Path)
    end,
    ok;
'v_msg_mesos.v1.Value.Set'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Value.Set'}, X,
		  Path).

'v_msg_mesos.v1.Value.Range'(#'mesos.v1.Value.Range'{'begin'
							 = F1,
						     'end' = F2},
			     Path) ->
    v_type_uint64(F1, ['begin' | Path]),
    v_type_uint64(F2, ['end' | Path]),
    ok;
'v_msg_mesos.v1.Value.Range'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Value.Range'}, X,
		  Path).

'v_msg_mesos.v1.Value.Ranges'(#'mesos.v1.Value.Ranges'{range
							   = F1},
			      Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.Value.Range'(Elem, [range | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Value.Range'}},
			 F1, Path)
    end,
    ok;
'v_msg_mesos.v1.Value.Ranges'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Value.Ranges'},
		  X, Path).

'v_msg_mesos.v1.Value.Scalar'(#'mesos.v1.Value.Scalar'{value
							   = F1},
			      Path) ->
    v_type_double(F1, [value | Path]), ok;
'v_msg_mesos.v1.Value.Scalar'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Value.Scalar'},
		  X, Path).

'v_msg_mesos.v1.Attribute'(#'mesos.v1.Attribute'{name =
						     F1,
						 type = F2, scalar = F3,
						 ranges = F4, set = F5,
						 text = F6},
			   Path) ->
    v_type_string(F1, [name | Path]),
    'v_enum_mesos.v1.Value.Type'(F2, [type | Path]),
    if F3 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Value.Scalar'(F3, [scalar | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Value.Ranges'(F4, [ranges | Path])
    end,
    if F5 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Value.Set'(F5, [set | Path])
    end,
    if F6 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Value.Text'(F6, [text | Path])
    end,
    ok;
'v_msg_mesos.v1.Attribute'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Attribute'}, X,
		  Path).

'v_msg_mesos.v1.Resource.RevocableInfo'(#'mesos.v1.Resource.RevocableInfo'{},
					_Path) ->
    ok;
'v_msg_mesos.v1.Resource.RevocableInfo'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.Resource.RevocableInfo'},
		  X, Path).

'v_msg_mesos.v1.Resource.DiskInfo.Persistence'(#'mesos.v1.Resource.DiskInfo.Persistence'{id
											     =
											     F1},
					       Path) ->
    v_type_string(F1, [id | Path]), ok;
'v_msg_mesos.v1.Resource.DiskInfo.Persistence'(X,
					       Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.Resource.DiskInfo.Persistence'},
		  X, Path).

'v_msg_mesos.v1.Resource.DiskInfo'(#'mesos.v1.Resource.DiskInfo'{persistence
								     = F1,
								 volume = F2},
				   Path) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Resource.DiskInfo.Persistence'(F1,
							  [persistence | Path])
    end,
    if F2 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Volume'(F2, [volume | Path])
    end,
    ok;
'v_msg_mesos.v1.Resource.DiskInfo'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.Resource.DiskInfo'},
		  X, Path).

'v_msg_mesos.v1.Resource.ReservationInfo'(#'mesos.v1.Resource.ReservationInfo'{principal
										   =
										   F1},
					  Path) ->
    v_type_string(F1, [principal | Path]), ok;
'v_msg_mesos.v1.Resource.ReservationInfo'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.Resource.ReservationInfo'},
		  X, Path).

'v_msg_mesos.v1.Resource'(#'mesos.v1.Resource'{name =
						   F1,
					       type = F2, scalar = F3,
					       ranges = F4, set = F5, role = F6,
					       reservation = F7, disk = F8,
					       revocable = F9},
			  Path) ->
    v_type_string(F1, [name | Path]),
    'v_enum_mesos.v1.Value.Type'(F2, [type | Path]),
    if F3 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Value.Scalar'(F3, [scalar | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Value.Ranges'(F4, [ranges | Path])
    end,
    if F5 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Value.Set'(F5, [set | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [role | Path])
    end,
    if F7 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Resource.ReservationInfo'(F7,
						     [reservation | Path])
    end,
    if F8 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Resource.DiskInfo'(F8, [disk | Path])
    end,
    if F9 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Resource.RevocableInfo'(F9,
						   [revocable | Path])
    end,
    ok;
'v_msg_mesos.v1.Resource'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Resource'}, X,
		  Path).

'v_msg_mesos.v1.AgentInfo'(#'mesos.v1.AgentInfo'{hostname
						     = F1,
						 port = F2, resources = F3,
						 attributes = F4, id = F5},
			   Path) ->
    v_type_string(F1, [hostname | Path]),
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [port | Path])
    end,
    if is_list(F3) ->
	   ['v_msg_mesos.v1.Resource'(Elem, [resources | Path])
	    || Elem <- F3];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Resource'}},
			 F3, Path)
    end,
    if is_list(F4) ->
	   ['v_msg_mesos.v1.Attribute'(Elem, [attributes | Path])
	    || Elem <- F4];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Attribute'}},
			 F4, Path)
    end,
    if F5 == undefined -> ok;
       true -> 'v_msg_mesos.v1.AgentID'(F5, [id | Path])
    end,
    ok.

'v_msg_mesos.v1.Request'(#'mesos.v1.Request'{agent_id =
						 F1,
					     resources = F2},
			 Path) ->
    if F1 == undefined -> ok;
       true -> 'v_msg_mesos.v1.AgentID'(F1, [agent_id | Path])
    end,
    if is_list(F2) ->
	   ['v_msg_mesos.v1.Resource'(Elem, [resources | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Resource'}},
			 F2, Path)
    end,
    ok;
'v_msg_mesos.v1.Request'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Request'}, X,
		  Path).

'v_msg_mesos.v1.scheduler.Call.Request'(#'mesos.v1.scheduler.Call.Request'{requests
									       =
									       F1},
					Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.Request'(Elem, [requests | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Request'}},
			 F1, Path)
    end,
    ok;
'v_msg_mesos.v1.scheduler.Call.Request'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Call.Request'},
		  X, Path).

'v_msg_mesos.v1.ExecutorID'(#'mesos.v1.ExecutorID'{value
						       = F1},
			    Path) ->
    v_type_string(F1, [value | Path]), ok;
'v_msg_mesos.v1.ExecutorID'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.ExecutorID'}, X,
		  Path).

'v_msg_mesos.v1.scheduler.Call.Message'(#'mesos.v1.scheduler.Call.Message'{agent_id
									       =
									       F1,
									   executor_id
									       =
									       F2,
									   data
									       =
									       F3},
					Path) ->
    'v_msg_mesos.v1.AgentID'(F1, [agent_id | Path]),
    'v_msg_mesos.v1.ExecutorID'(F2, [executor_id | Path]),
    v_type_bytes(F3, [data | Path]),
    ok;
'v_msg_mesos.v1.scheduler.Call.Message'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Call.Message'},
		  X, Path).

'v_msg_mesos.v1.TaskID'(#'mesos.v1.TaskID'{value = F1},
			Path) ->
    v_type_string(F1, [value | Path]), ok;
'v_msg_mesos.v1.TaskID'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.TaskID'}, X,
		  Path).

'v_msg_mesos.v1.scheduler.Call.Reconcile.Task'(#'mesos.v1.scheduler.Call.Reconcile.Task'{task_id
											     =
											     F1,
											 agent_id
											     =
											     F2},
					       Path) ->
    'v_msg_mesos.v1.TaskID'(F1, [task_id | Path]),
    if F2 == undefined -> ok;
       true -> 'v_msg_mesos.v1.AgentID'(F2, [agent_id | Path])
    end,
    ok;
'v_msg_mesos.v1.scheduler.Call.Reconcile.Task'(X,
					       Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Call.Reconcile.Task'},
		  X, Path).

'v_msg_mesos.v1.scheduler.Call.Reconcile'(#'mesos.v1.scheduler.Call.Reconcile'{tasks
										   =
										   F1},
					  Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.scheduler.Call.Reconcile.Task'(Elem,
							   [tasks | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.scheduler.Call.Reconcile.Task'}},
			 F1, Path)
    end,
    ok;
'v_msg_mesos.v1.scheduler.Call.Reconcile'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Call.Reconcile'},
		  X, Path).

'v_msg_mesos.v1.scheduler.Call.Acknowledge'(#'mesos.v1.scheduler.Call.Acknowledge'{agent_id
										       =
										       F1,
										   task_id
										       =
										       F2,
										   uuid
										       =
										       F3},
					    Path) ->
    'v_msg_mesos.v1.AgentID'(F1, [agent_id | Path]),
    'v_msg_mesos.v1.TaskID'(F2, [task_id | Path]),
    v_type_bytes(F3, [uuid | Path]),
    ok;
'v_msg_mesos.v1.scheduler.Call.Acknowledge'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Call.Acknowledge'},
		  X, Path).

'v_msg_mesos.v1.scheduler.Call.Shutdown'(#'mesos.v1.scheduler.Call.Shutdown'{executor_id
										 =
										 F1,
									     agent_id
										 =
										 F2},
					 Path) ->
    'v_msg_mesos.v1.ExecutorID'(F1, [executor_id | Path]),
    'v_msg_mesos.v1.AgentID'(F2, [agent_id | Path]),
    ok;
'v_msg_mesos.v1.scheduler.Call.Shutdown'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Call.Shutdown'},
		  X, Path).

'v_msg_mesos.v1.scheduler.Call.Kill'(#'mesos.v1.scheduler.Call.Kill'{task_id
									 = F1,
								     agent_id =
									 F2},
				     Path) ->
    'v_msg_mesos.v1.TaskID'(F1, [task_id | Path]),
    if F2 == undefined -> ok;
       true -> 'v_msg_mesos.v1.AgentID'(F2, [agent_id | Path])
    end,
    ok;
'v_msg_mesos.v1.scheduler.Call.Kill'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Call.Kill'},
		  X, Path).

'v_msg_mesos.v1.Filters'(#'mesos.v1.Filters'{refuse_seconds
						 = F1},
			 Path) ->
    if F1 == undefined -> ok;
       true -> v_type_double(F1, [refuse_seconds | Path])
    end,
    ok;
'v_msg_mesos.v1.Filters'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Filters'}, X,
		  Path).

'v_msg_mesos.v1.OfferID'(#'mesos.v1.OfferID'{value =
						 F1},
			 Path) ->
    v_type_string(F1, [value | Path]), ok;
'v_msg_mesos.v1.OfferID'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.OfferID'}, X,
		  Path).

'v_msg_mesos.v1.scheduler.Call.Decline'(#'mesos.v1.scheduler.Call.Decline'{offer_ids
									       =
									       F1,
									   filters
									       =
									       F2},
					Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.OfferID'(Elem, [offer_ids | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.OfferID'}},
			 F1, Path)
    end,
    if F2 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Filters'(F2, [filters | Path])
    end,
    ok;
'v_msg_mesos.v1.scheduler.Call.Decline'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Call.Decline'},
		  X, Path).

'v_msg_mesos.v1.Offer.Operation.Destroy'(#'mesos.v1.Offer.Operation.Destroy'{volumes
										 =
										 F1},
					 Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.Resource'(Elem, [volumes | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Resource'}},
			 F1, Path)
    end,
    ok;
'v_msg_mesos.v1.Offer.Operation.Destroy'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.Offer.Operation.Destroy'},
		  X, Path).

'v_msg_mesos.v1.Offer.Operation.Create'(#'mesos.v1.Offer.Operation.Create'{volumes
									       =
									       F1},
					Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.Resource'(Elem, [volumes | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Resource'}},
			 F1, Path)
    end,
    ok;
'v_msg_mesos.v1.Offer.Operation.Create'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.Offer.Operation.Create'},
		  X, Path).

'v_msg_mesos.v1.Offer.Operation.Unreserve'(#'mesos.v1.Offer.Operation.Unreserve'{resources
										     =
										     F1},
					   Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.Resource'(Elem, [resources | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Resource'}},
			 F1, Path)
    end,
    ok;
'v_msg_mesos.v1.Offer.Operation.Unreserve'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.Offer.Operation.Unreserve'},
		  X, Path).

'v_msg_mesos.v1.Offer.Operation.Reserve'(#'mesos.v1.Offer.Operation.Reserve'{resources
										 =
										 F1},
					 Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.Resource'(Elem, [resources | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Resource'}},
			 F1, Path)
    end,
    ok;
'v_msg_mesos.v1.Offer.Operation.Reserve'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.Offer.Operation.Reserve'},
		  X, Path).

'v_msg_mesos.v1.Port'(#'mesos.v1.Port'{number = F1,
				       name = F2, protocol = F3},
		      Path) ->
    v_type_uint32(F1, [number | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [protocol | Path])
    end,
    ok;
'v_msg_mesos.v1.Port'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Port'}, X, Path).

'v_msg_mesos.v1.Ports'(#'mesos.v1.Ports'{ports = F1},
		       Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.Port'(Elem, [ports | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'mesos.v1.Port'}},
			 F1, Path)
    end,
    ok;
'v_msg_mesos.v1.Ports'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Ports'}, X,
		  Path).

'v_msg_mesos.v1.DiscoveryInfo'(#'mesos.v1.DiscoveryInfo'{visibility
							     = F1,
							 name = F2,
							 environment = F3,
							 location = F4,
							 version = F5,
							 ports = F6,
							 labels = F7},
			       Path) ->
    'v_enum_mesos.v1.DiscoveryInfo.Visibility'(F1,
					       [visibility | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [environment | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [location | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [version | Path])
    end,
    if F6 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Ports'(F6, [ports | Path])
    end,
    if F7 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Labels'(F7, [labels | Path])
    end,
    ok;
'v_msg_mesos.v1.DiscoveryInfo'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.DiscoveryInfo'},
		  X, Path).

'v_msg_mesos.v1.Environment.Variable'(#'mesos.v1.Environment.Variable'{name
									   = F1,
								       value =
									   F2},
				      Path) ->
    v_type_string(F1, [name | Path]),
    v_type_string(F2, [value | Path]),
    ok;
'v_msg_mesos.v1.Environment.Variable'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.Environment.Variable'},
		  X, Path).

'v_msg_mesos.v1.Environment'(#'mesos.v1.Environment'{variables
							 = F1},
			     Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.Environment.Variable'(Elem,
						  [variables | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Environment.Variable'}},
			 F1, Path)
    end,
    ok;
'v_msg_mesos.v1.Environment'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Environment'}, X,
		  Path).

'v_msg_mesos.v1.CommandInfo.URI'(#'mesos.v1.CommandInfo.URI'{value
								 = F1,
							     executable = F2,
							     extract = F3,
							     cache = F4},
				 Path) ->
    v_type_string(F1, [value | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [executable | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [extract | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [cache | Path])
    end,
    ok;
'v_msg_mesos.v1.CommandInfo.URI'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.CommandInfo.URI'},
		  X, Path).

'v_msg_mesos.v1.CommandInfo.ContainerInfo'(#'mesos.v1.CommandInfo.ContainerInfo'{image
										     =
										     F1,
										 options
										     =
										     F2},
					   Path) ->
    v_type_string(F1, [image | Path]),
    if is_list(F2) ->
	   [v_type_string(Elem, [options | Path]) || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of, string}, F2, Path)
    end,
    ok;
'v_msg_mesos.v1.CommandInfo.ContainerInfo'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.CommandInfo.ContainerInfo'},
		  X, Path).

'v_msg_mesos.v1.CommandInfo'(#'mesos.v1.CommandInfo'{container
							 = F1,
						     uris = F2,
						     environment = F3,
						     shell = F4, value = F5,
						     arguments = F6, user = F7},
			     Path) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.CommandInfo.ContainerInfo'(F1,
						      [container | Path])
    end,
    if is_list(F2) ->
	   ['v_msg_mesos.v1.CommandInfo.URI'(Elem, [uris | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.CommandInfo.URI'}},
			 F2, Path)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Environment'(F3, [environment | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [shell | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [value | Path])
    end,
    if is_list(F6) ->
	   [v_type_string(Elem, [arguments | Path]) || Elem <- F6];
       true ->
	   mk_type_error({invalid_list_of, string}, F6, Path)
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [user | Path])
    end,
    ok;
'v_msg_mesos.v1.CommandInfo'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.CommandInfo'}, X,
		  Path).

'v_msg_mesos.v1.HealthCheck.HTTP'(#'mesos.v1.HealthCheck.HTTP'{port
								   = F1,
							       path = F2,
							       statuses = F3},
				  Path) ->
    v_type_uint32(F1, [port | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [path | Path])
    end,
    if is_list(F3) ->
	   [v_type_uint32(Elem, [statuses | Path]) || Elem <- F3];
       true ->
	   mk_type_error({invalid_list_of, uint32}, F3, Path)
    end,
    ok;
'v_msg_mesos.v1.HealthCheck.HTTP'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.HealthCheck.HTTP'},
		  X, Path).

'v_msg_mesos.v1.HealthCheck'(#'mesos.v1.HealthCheck'{http
							 = F1,
						     delay_seconds = F2,
						     interval_seconds = F3,
						     timeout_seconds = F4,
						     consecutive_failures = F5,
						     grace_period_seconds = F6,
						     command = F7},
			     Path) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.HealthCheck.HTTP'(F1, [http | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_double(F2, [delay_seconds | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_double(F3, [interval_seconds | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_double(F4, [timeout_seconds | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [consecutive_failures | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_double(F6, [grace_period_seconds | Path])
    end,
    if F7 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.CommandInfo'(F7, [command | Path])
    end,
    ok;
'v_msg_mesos.v1.HealthCheck'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.HealthCheck'}, X,
		  Path).

'v_msg_mesos.v1.FrameworkID'(#'mesos.v1.FrameworkID'{value
							 = F1},
			     Path) ->
    v_type_string(F1, [value | Path]), ok;
'v_msg_mesos.v1.FrameworkID'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.FrameworkID'}, X,
		  Path).

'v_msg_mesos.v1.ExecutorInfo'(#'mesos.v1.ExecutorInfo'{executor_id
							   = F1,
						       framework_id = F2,
						       command = F3,
						       container = F4,
						       resources = F5,
						       name = F6, source = F7,
						       data = F8,
						       discovery = F9},
			      Path) ->
    'v_msg_mesos.v1.ExecutorID'(F1, [executor_id | Path]),
    if F2 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.FrameworkID'(F2, [framework_id | Path])
    end,
    'v_msg_mesos.v1.CommandInfo'(F3, [command | Path]),
    if F4 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.ContainerInfo'(F4, [container | Path])
    end,
    if is_list(F5) ->
	   ['v_msg_mesos.v1.Resource'(Elem, [resources | Path])
	    || Elem <- F5];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Resource'}},
			 F5, Path)
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [name | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [source | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bytes(F8, [data | Path])
    end,
    if F9 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.DiscoveryInfo'(F9, [discovery | Path])
    end,
    ok;
'v_msg_mesos.v1.ExecutorInfo'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.ExecutorInfo'},
		  X, Path).

'v_msg_mesos.v1.TaskInfo'(#'mesos.v1.TaskInfo'{name =
						   F1,
					       task_id = F2, agent_id = F3,
					       resources = F4, executor = F5,
					       command = F6, container = F7,
					       data = F8, health_check = F9,
					       labels = F10, discovery = F11},
			  Path) ->
    v_type_string(F1, [name | Path]),
    'v_msg_mesos.v1.TaskID'(F2, [task_id | Path]),
    'v_msg_mesos.v1.AgentID'(F3, [agent_id | Path]),
    if is_list(F4) ->
	   ['v_msg_mesos.v1.Resource'(Elem, [resources | Path])
	    || Elem <- F4];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Resource'}},
			 F4, Path)
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.ExecutorInfo'(F5, [executor | Path])
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.CommandInfo'(F6, [command | Path])
    end,
    if F7 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.ContainerInfo'(F7, [container | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bytes(F8, [data | Path])
    end,
    if F9 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.HealthCheck'(F9, [health_check | Path])
    end,
    if F10 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Labels'(F10, [labels | Path])
    end,
    if F11 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.DiscoveryInfo'(F11, [discovery | Path])
    end,
    ok;
'v_msg_mesos.v1.TaskInfo'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.TaskInfo'}, X,
		  Path).

'v_msg_mesos.v1.Offer.Operation.Launch'(#'mesos.v1.Offer.Operation.Launch'{task_infos
									       =
									       F1},
					Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.TaskInfo'(Elem, [task_infos | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.TaskInfo'}},
			 F1, Path)
    end,
    ok;
'v_msg_mesos.v1.Offer.Operation.Launch'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.Offer.Operation.Launch'},
		  X, Path).

'v_msg_mesos.v1.Offer.Operation'(#'mesos.v1.Offer.Operation'{type
								 = F1,
							     launch = F2,
							     reserve = F3,
							     unreserve = F4,
							     create = F5,
							     destroy = F6},
				 Path) ->
    'v_enum_mesos.v1.Offer.Operation.Type'(F1,
					   [type | Path]),
    if F2 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Offer.Operation.Launch'(F2,
						   [launch | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Offer.Operation.Reserve'(F3,
						    [reserve | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Offer.Operation.Unreserve'(F4,
						      [unreserve | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Offer.Operation.Create'(F5,
						   [create | Path])
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Offer.Operation.Destroy'(F6,
						    [destroy | Path])
    end,
    ok;
'v_msg_mesos.v1.Offer.Operation'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.Offer.Operation'},
		  X, Path).

'v_msg_mesos.v1.scheduler.Call.Accept'(#'mesos.v1.scheduler.Call.Accept'{offer_ids
									     =
									     F1,
									 operations
									     =
									     F2,
									 filters
									     =
									     F3},
				       Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.OfferID'(Elem, [offer_ids | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.OfferID'}},
			 F1, Path)
    end,
    if is_list(F2) ->
	   ['v_msg_mesos.v1.Offer.Operation'(Elem,
					     [operations | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Offer.Operation'}},
			 F2, Path)
    end,
    if F3 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Filters'(F3, [filters | Path])
    end,
    ok;
'v_msg_mesos.v1.scheduler.Call.Accept'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Call.Accept'},
		  X, Path).

'v_msg_mesos.v1.FrameworkInfo.Capability'(#'mesos.v1.FrameworkInfo.Capability'{type
										   =
										   F1},
					  Path) ->
    'v_enum_mesos.v1.FrameworkInfo.Capability.Type'(F1,
						    [type | Path]),
    ok;
'v_msg_mesos.v1.FrameworkInfo.Capability'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.FrameworkInfo.Capability'},
		  X, Path).

'v_msg_mesos.v1.FrameworkInfo'(#'mesos.v1.FrameworkInfo'{user
							     = F1,
							 name = F2, id = F3,
							 failover_timeout = F4,
							 checkpoint = F5,
							 role = F6,
							 hostname = F7,
							 principal = F8,
							 webui_url = F9,
							 capabilities = F10},
			       Path) ->
    v_type_string(F1, [user | Path]),
    v_type_string(F2, [name | Path]),
    if F3 == undefined -> ok;
       true -> 'v_msg_mesos.v1.FrameworkID'(F3, [id | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_double(F4, [failover_timeout | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [checkpoint | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [role | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [hostname | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_string(F8, [principal | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_string(F9, [webui_url | Path])
    end,
    if is_list(F10) ->
	   ['v_msg_mesos.v1.FrameworkInfo.Capability'(Elem,
						      [capabilities | Path])
	    || Elem <- F10];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.FrameworkInfo.Capability'}},
			 F10, Path)
    end,
    ok;
'v_msg_mesos.v1.FrameworkInfo'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.FrameworkInfo'},
		  X, Path).

'v_msg_mesos.v1.scheduler.Call.Subscribe'(#'mesos.v1.scheduler.Call.Subscribe'{framework_info
										   =
										   F1,
									       force
										   =
										   F2},
					  Path) ->
    'v_msg_mesos.v1.FrameworkInfo'(F1,
				   [framework_info | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [force | Path])
    end,
    ok;
'v_msg_mesos.v1.scheduler.Call.Subscribe'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Call.Subscribe'},
		  X, Path).

'v_msg_mesos.v1.scheduler.Call'(#'mesos.v1.scheduler.Call'{framework_id
							       = F1,
							   type = F2,
							   subscribe = F3,
							   accept = F4,
							   decline = F5,
							   kill = F6,
							   shutdown = F7,
							   acknowledge = F8,
							   reconcile = F9,
							   message = F10,
							   request = F11},
				Path) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.FrameworkID'(F1, [framework_id | Path])
    end,
    'v_enum_mesos.v1.scheduler.Call.Type'(F2,
					  [type | Path]),
    if F3 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Call.Subscribe'(F3,
						     [subscribe | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Call.Accept'(F4,
						  [accept | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Call.Decline'(F5,
						   [decline | Path])
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Call.Kill'(F6, [kill | Path])
    end,
    if F7 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Call.Shutdown'(F7,
						    [shutdown | Path])
    end,
    if F8 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Call.Acknowledge'(F8,
						       [acknowledge | Path])
    end,
    if F9 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Call.Reconcile'(F9,
						     [reconcile | Path])
    end,
    if F10 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Call.Message'(F10,
						   [message | Path])
    end,
    if F11 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Call.Request'(F11,
						   [request | Path])
    end,
    ok.

'v_msg_mesos.v1.RateLimit'(#'mesos.v1.RateLimit'{qps =
						     F1,
						 principal = F2, capacity = F3},
			   Path) ->
    if F1 == undefined -> ok;
       true -> v_type_double(F1, [qps | Path])
    end,
    v_type_string(F2, [principal | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [capacity | Path])
    end,
    ok;
'v_msg_mesos.v1.RateLimit'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.RateLimit'}, X,
		  Path).

'v_msg_mesos.v1.RateLimits'(#'mesos.v1.RateLimits'{limits
						       = F1,
						   aggregate_default_qps = F2,
						   aggregate_default_capacity =
						       F3},
			    Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.RateLimit'(Elem, [limits | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.RateLimit'}},
			 F1, Path)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_double(F2, [aggregate_default_qps | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_uint64(F3, [aggregate_default_capacity | Path])
    end,
    ok.

'v_msg_mesos.v1.Parameters'(#'mesos.v1.Parameters'{parameter
						       = F1},
			    Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.Parameter'(Elem, [parameter | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Parameter'}},
			 F1, Path)
    end,
    ok.

'v_msg_mesos.v1.Address'(#'mesos.v1.Address'{hostname =
						 F1,
					     ip = F2, port = F3},
			 Path) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [hostname | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [ip | Path])
    end,
    v_type_int32(F3, [port | Path]),
    ok;
'v_msg_mesos.v1.Address'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Address'}, X,
		  Path).

'v_msg_mesos.v1.URL'(#'mesos.v1.URL'{scheme = F1,
				     address = F2, path = F3, query = F4,
				     fragment = F5},
		     Path) ->
    v_type_string(F1, [scheme | Path]),
    'v_msg_mesos.v1.Address'(F2, [address | Path]),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [path | Path])
    end,
    if is_list(F4) ->
	   ['v_msg_mesos.v1.Parameter'(Elem, [query | Path])
	    || Elem <- F4];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Parameter'}},
			 F4, Path)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [fragment | Path])
    end,
    ok;
'v_msg_mesos.v1.URL'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.URL'}, X, Path).

'v_msg_mesos.v1.Offer'(#'mesos.v1.Offer'{id = F1,
					 framework_id = F2, agent_id = F3,
					 hostname = F4, url = F5,
					 resources = F6, attributes = F7,
					 executor_ids = F8},
		       Path) ->
    'v_msg_mesos.v1.OfferID'(F1, [id | Path]),
    'v_msg_mesos.v1.FrameworkID'(F2, [framework_id | Path]),
    'v_msg_mesos.v1.AgentID'(F3, [agent_id | Path]),
    v_type_string(F4, [hostname | Path]),
    if F5 == undefined -> ok;
       true -> 'v_msg_mesos.v1.URL'(F5, [url | Path])
    end,
    if is_list(F6) ->
	   ['v_msg_mesos.v1.Resource'(Elem, [resources | Path])
	    || Elem <- F6];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Resource'}},
			 F6, Path)
    end,
    if is_list(F7) ->
	   ['v_msg_mesos.v1.Attribute'(Elem, [attributes | Path])
	    || Elem <- F7];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Attribute'}},
			 F7, Path)
    end,
    if is_list(F8) ->
	   ['v_msg_mesos.v1.ExecutorID'(Elem,
					[executor_ids | Path])
	    || Elem <- F8];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.ExecutorID'}},
			 F8, Path)
    end,
    ok;
'v_msg_mesos.v1.Offer'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Offer'}, X,
		  Path).

'v_msg_mesos.v1.Credential'(#'mesos.v1.Credential'{principal
						       = F1,
						   secret = F2},
			    Path) ->
    v_type_string(F1, [principal | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [secret | Path])
    end,
    ok;
'v_msg_mesos.v1.Credential'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.Credential'}, X,
		  Path).

'v_msg_mesos.v1.ACL.Entity'(#'mesos.v1.ACL.Entity'{type
						       = F1,
						   values = F2},
			    Path) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_mesos.v1.ACL.Entity.Type'(F1, [type | Path])
    end,
    if is_list(F2) ->
	   [v_type_string(Elem, [values | Path]) || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of, string}, F2, Path)
    end,
    ok;
'v_msg_mesos.v1.ACL.Entity'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.ACL.Entity'}, X,
		  Path).

'v_msg_mesos.v1.TaskStatus'(#'mesos.v1.TaskStatus'{task_id
						       = F1,
						   state = F2, message = F3,
						   source = F4, reason = F5,
						   data = F6, agent_id = F7,
						   executor_id = F8,
						   timestamp = F9, uuid = F10,
						   healthy = F11, labels = F12},
			    Path) ->
    'v_msg_mesos.v1.TaskID'(F1, [task_id | Path]),
    'v_enum_mesos.v1.TaskState'(F2, [state | Path]),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [message | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_enum_mesos.v1.TaskStatus.Source'(F4, [source | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_enum_mesos.v1.TaskStatus.Reason'(F5, [reason | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [data | Path])
    end,
    if F7 == undefined -> ok;
       true -> 'v_msg_mesos.v1.AgentID'(F7, [agent_id | Path])
    end,
    if F8 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.ExecutorID'(F8, [executor_id | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_double(F9, [timestamp | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_bytes(F10, [uuid | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_bool(F11, [healthy | Path])
    end,
    if F12 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Labels'(F12, [labels | Path])
    end,
    ok;
'v_msg_mesos.v1.TaskStatus'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.TaskStatus'}, X,
		  Path).

'v_msg_mesos.v1.scheduler.Event.Update'(#'mesos.v1.scheduler.Event.Update'{status
									       =
									       F1},
					Path) ->
    'v_msg_mesos.v1.TaskStatus'(F1, [status | Path]), ok;
'v_msg_mesos.v1.scheduler.Event.Update'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Event.Update'},
		  X, Path).

'v_msg_mesos.v1.scheduler.Event.Error'(#'mesos.v1.scheduler.Event.Error'{message
									     =
									     F1},
				       Path) ->
    v_type_string(F1, [message | Path]), ok;
'v_msg_mesos.v1.scheduler.Event.Error'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Event.Error'},
		  X, Path).

'v_msg_mesos.v1.scheduler.Event.Failure'(#'mesos.v1.scheduler.Event.Failure'{agent_id
										 =
										 F1,
									     executor_id
										 =
										 F2,
									     status
										 =
										 F3},
					 Path) ->
    if F1 == undefined -> ok;
       true -> 'v_msg_mesos.v1.AgentID'(F1, [agent_id | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.ExecutorID'(F2, [executor_id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [status | Path])
    end,
    ok;
'v_msg_mesos.v1.scheduler.Event.Failure'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Event.Failure'},
		  X, Path).

'v_msg_mesos.v1.scheduler.Event.Message'(#'mesos.v1.scheduler.Event.Message'{agent_id
										 =
										 F1,
									     executor_id
										 =
										 F2,
									     data
										 =
										 F3},
					 Path) ->
    'v_msg_mesos.v1.AgentID'(F1, [agent_id | Path]),
    'v_msg_mesos.v1.ExecutorID'(F2, [executor_id | Path]),
    v_type_bytes(F3, [data | Path]),
    ok;
'v_msg_mesos.v1.scheduler.Event.Message'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Event.Message'},
		  X, Path).

'v_msg_mesos.v1.scheduler.Event.Rescind'(#'mesos.v1.scheduler.Event.Rescind'{offer_id
										 =
										 F1},
					 Path) ->
    'v_msg_mesos.v1.OfferID'(F1, [offer_id | Path]), ok;
'v_msg_mesos.v1.scheduler.Event.Rescind'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Event.Rescind'},
		  X, Path).

'v_msg_mesos.v1.scheduler.Event.Offers'(#'mesos.v1.scheduler.Event.Offers'{offers
									       =
									       F1},
					Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.Offer'(Elem, [offers | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Offer'}},
			 F1, Path)
    end,
    ok;
'v_msg_mesos.v1.scheduler.Event.Offers'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Event.Offers'},
		  X, Path).

'v_msg_mesos.v1.scheduler.Event.Subscribed'(#'mesos.v1.scheduler.Event.Subscribed'{framework_id
										       =
										       F1,
										   heartbeat_interval_seconds
										       =
										       F2},
					    Path) ->
    'v_msg_mesos.v1.FrameworkID'(F1, [framework_id | Path]),
    if F2 == undefined -> ok;
       true ->
	   v_type_double(F2, [heartbeat_interval_seconds | Path])
    end,
    ok;
'v_msg_mesos.v1.scheduler.Event.Subscribed'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.scheduler.Event.Subscribed'},
		  X, Path).

'v_msg_mesos.v1.scheduler.Event'(#'mesos.v1.scheduler.Event'{type
								 = F1,
							     subscribed = F2,
							     offers = F3,
							     rescind = F4,
							     update = F5,
							     message = F6,
							     failure = F7,
							     error = F8},
				 Path) ->
    'v_enum_mesos.v1.scheduler.Event.Type'(F1,
					   [type | Path]),
    if F2 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Event.Subscribed'(F2,
						       [subscribed | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Event.Offers'(F3,
						   [offers | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Event.Rescind'(F4,
						    [rescind | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Event.Update'(F5,
						   [update | Path])
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Event.Message'(F6,
						    [message | Path])
    end,
    if F7 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Event.Failure'(F7,
						    [failure | Path])
    end,
    if F8 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.scheduler.Event.Error'(F8,
						  [error | Path])
    end,
    ok.

'v_msg_mesos.v1.TrafficControlStatistics'(#'mesos.v1.TrafficControlStatistics'{id
										   =
										   F1,
									       backlog
										   =
										   F2,
									       bytes
										   =
										   F3,
									       drops
										   =
										   F4,
									       overlimits
										   =
										   F5,
									       packets
										   =
										   F6,
									       qlen
										   =
										   F7,
									       ratebps
										   =
										   F8,
									       ratepps
										   =
										   F9,
									       requeues
										   =
										   F10},
					  Path) ->
    v_type_string(F1, [id | Path]),
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [backlog | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [bytes | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [drops | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, [overlimits | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [packets | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint64(F7, [qlen | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint64(F8, [ratebps | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint64(F9, [ratepps | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint64(F10, [requeues | Path])
    end,
    ok;
'v_msg_mesos.v1.TrafficControlStatistics'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.TrafficControlStatistics'},
		  X, Path).

'v_msg_mesos.v1.PerfStatistics'(#'mesos.v1.PerfStatistics'{timestamp
							       = F1,
							   duration = F2,
							   cycles = F3,
							   stalled_cycles_frontend
							       = F4,
							   stalled_cycles_backend
							       = F5,
							   instructions = F6,
							   cache_references =
							       F7,
							   cache_misses = F8,
							   branches = F9,
							   branch_misses = F10,
							   bus_cycles = F11,
							   ref_cycles = F12,
							   cpu_clock = F13,
							   task_clock = F14,
							   page_faults = F15,
							   minor_faults = F16,
							   major_faults = F17,
							   context_switches =
							       F18,
							   cpu_migrations = F19,
							   alignment_faults =
							       F20,
							   emulation_faults =
							       F21,
							   l1_dcache_loads =
							       F22,
							   l1_dcache_load_misses
							       = F23,
							   l1_dcache_stores =
							       F24,
							   l1_dcache_store_misses
							       = F25,
							   l1_dcache_prefetches
							       = F26,
							   l1_dcache_prefetch_misses
							       = F27,
							   l1_icache_loads =
							       F28,
							   l1_icache_load_misses
							       = F29,
							   l1_icache_prefetches
							       = F30,
							   l1_icache_prefetch_misses
							       = F31,
							   llc_loads = F32,
							   llc_load_misses =
							       F33,
							   llc_stores = F34,
							   llc_store_misses =
							       F35,
							   llc_prefetches = F36,
							   llc_prefetch_misses =
							       F37,
							   dtlb_loads = F38,
							   dtlb_load_misses =
							       F39,
							   dtlb_stores = F40,
							   dtlb_store_misses =
							       F41,
							   dtlb_prefetches =
							       F42,
							   dtlb_prefetch_misses
							       = F43,
							   itlb_loads = F44,
							   itlb_load_misses =
							       F45,
							   branch_loads = F46,
							   branch_load_misses =
							       F47,
							   node_loads = F48,
							   node_load_misses =
							       F49,
							   node_stores = F50,
							   node_store_misses =
							       F51,
							   node_prefetches =
							       F52,
							   node_prefetch_misses
							       = F53},
				Path) ->
    v_type_double(F1, [timestamp | Path]),
    v_type_double(F2, [duration | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [cycles | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_uint64(F4, [stalled_cycles_frontend | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_uint64(F5, [stalled_cycles_backend | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [instructions | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint64(F7, [cache_references | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint64(F8, [cache_misses | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint64(F9, [branches | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint64(F10, [branch_misses | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint64(F11, [bus_cycles | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint64(F12, [ref_cycles | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_double(F13, [cpu_clock | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_double(F14, [task_clock | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_uint64(F15, [page_faults | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_uint64(F16, [minor_faults | Path])
    end,
    if F17 == undefined -> ok;
       true -> v_type_uint64(F17, [major_faults | Path])
    end,
    if F18 == undefined -> ok;
       true -> v_type_uint64(F18, [context_switches | Path])
    end,
    if F19 == undefined -> ok;
       true -> v_type_uint64(F19, [cpu_migrations | Path])
    end,
    if F20 == undefined -> ok;
       true -> v_type_uint64(F20, [alignment_faults | Path])
    end,
    if F21 == undefined -> ok;
       true -> v_type_uint64(F21, [emulation_faults | Path])
    end,
    if F22 == undefined -> ok;
       true -> v_type_uint64(F22, [l1_dcache_loads | Path])
    end,
    if F23 == undefined -> ok;
       true ->
	   v_type_uint64(F23, [l1_dcache_load_misses | Path])
    end,
    if F24 == undefined -> ok;
       true -> v_type_uint64(F24, [l1_dcache_stores | Path])
    end,
    if F25 == undefined -> ok;
       true ->
	   v_type_uint64(F25, [l1_dcache_store_misses | Path])
    end,
    if F26 == undefined -> ok;
       true ->
	   v_type_uint64(F26, [l1_dcache_prefetches | Path])
    end,
    if F27 == undefined -> ok;
       true ->
	   v_type_uint64(F27, [l1_dcache_prefetch_misses | Path])
    end,
    if F28 == undefined -> ok;
       true -> v_type_uint64(F28, [l1_icache_loads | Path])
    end,
    if F29 == undefined -> ok;
       true ->
	   v_type_uint64(F29, [l1_icache_load_misses | Path])
    end,
    if F30 == undefined -> ok;
       true ->
	   v_type_uint64(F30, [l1_icache_prefetches | Path])
    end,
    if F31 == undefined -> ok;
       true ->
	   v_type_uint64(F31, [l1_icache_prefetch_misses | Path])
    end,
    if F32 == undefined -> ok;
       true -> v_type_uint64(F32, [llc_loads | Path])
    end,
    if F33 == undefined -> ok;
       true -> v_type_uint64(F33, [llc_load_misses | Path])
    end,
    if F34 == undefined -> ok;
       true -> v_type_uint64(F34, [llc_stores | Path])
    end,
    if F35 == undefined -> ok;
       true -> v_type_uint64(F35, [llc_store_misses | Path])
    end,
    if F36 == undefined -> ok;
       true -> v_type_uint64(F36, [llc_prefetches | Path])
    end,
    if F37 == undefined -> ok;
       true -> v_type_uint64(F37, [llc_prefetch_misses | Path])
    end,
    if F38 == undefined -> ok;
       true -> v_type_uint64(F38, [dtlb_loads | Path])
    end,
    if F39 == undefined -> ok;
       true -> v_type_uint64(F39, [dtlb_load_misses | Path])
    end,
    if F40 == undefined -> ok;
       true -> v_type_uint64(F40, [dtlb_stores | Path])
    end,
    if F41 == undefined -> ok;
       true -> v_type_uint64(F41, [dtlb_store_misses | Path])
    end,
    if F42 == undefined -> ok;
       true -> v_type_uint64(F42, [dtlb_prefetches | Path])
    end,
    if F43 == undefined -> ok;
       true ->
	   v_type_uint64(F43, [dtlb_prefetch_misses | Path])
    end,
    if F44 == undefined -> ok;
       true -> v_type_uint64(F44, [itlb_loads | Path])
    end,
    if F45 == undefined -> ok;
       true -> v_type_uint64(F45, [itlb_load_misses | Path])
    end,
    if F46 == undefined -> ok;
       true -> v_type_uint64(F46, [branch_loads | Path])
    end,
    if F47 == undefined -> ok;
       true -> v_type_uint64(F47, [branch_load_misses | Path])
    end,
    if F48 == undefined -> ok;
       true -> v_type_uint64(F48, [node_loads | Path])
    end,
    if F49 == undefined -> ok;
       true -> v_type_uint64(F49, [node_load_misses | Path])
    end,
    if F50 == undefined -> ok;
       true -> v_type_uint64(F50, [node_stores | Path])
    end,
    if F51 == undefined -> ok;
       true -> v_type_uint64(F51, [node_store_misses | Path])
    end,
    if F52 == undefined -> ok;
       true -> v_type_uint64(F52, [node_prefetches | Path])
    end,
    if F53 == undefined -> ok;
       true ->
	   v_type_uint64(F53, [node_prefetch_misses | Path])
    end,
    ok;
'v_msg_mesos.v1.PerfStatistics'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.PerfStatistics'},
		  X, Path).

'v_msg_mesos.v1.ResourceStatistics'(#'mesos.v1.ResourceStatistics'{timestamp
								       = F1,
								   processes =
								       F2,
								   threads = F3,
								   cpus_user_time_secs
								       = F4,
								   cpus_system_time_secs
								       = F5,
								   cpus_limit =
								       F6,
								   cpus_nr_periods
								       = F7,
								   cpus_nr_throttled
								       = F8,
								   cpus_throttled_time_secs
								       = F9,
								   mem_total_bytes
								       = F10,
								   mem_total_memsw_bytes
								       = F11,
								   mem_limit_bytes
								       = F12,
								   mem_soft_limit_bytes
								       = F13,
								   mem_file_bytes
								       = F14,
								   mem_anon_bytes
								       = F15,
								   mem_cache_bytes
								       = F16,
								   mem_rss_bytes
								       = F17,
								   mem_mapped_file_bytes
								       = F18,
								   mem_swap_bytes
								       = F19,
								   mem_low_pressure_counter
								       = F20,
								   mem_medium_pressure_counter
								       = F21,
								   mem_critical_pressure_counter
								       = F22,
								   disk_limit_bytes
								       = F23,
								   disk_used_bytes
								       = F24,
								   perf = F25,
								   net_rx_packets
								       = F26,
								   net_rx_bytes
								       = F27,
								   net_rx_errors
								       = F28,
								   net_rx_dropped
								       = F29,
								   net_tx_packets
								       = F30,
								   net_tx_bytes
								       = F31,
								   net_tx_errors
								       = F32,
								   net_tx_dropped
								       = F33,
								   net_tcp_rtt_microsecs_p50
								       = F34,
								   net_tcp_rtt_microsecs_p90
								       = F35,
								   net_tcp_rtt_microsecs_p95
								       = F36,
								   net_tcp_rtt_microsecs_p99
								       = F37,
								   net_tcp_active_connections
								       = F38,
								   net_tcp_time_wait_connections
								       = F39,
								   net_traffic_control_statistics
								       = F40},
				    Path) ->
    v_type_double(F1, [timestamp | Path]),
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [processes | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [threads | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_double(F4, [cpus_user_time_secs | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_double(F5, [cpus_system_time_secs | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_double(F6, [cpus_limit | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [cpus_nr_periods | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [cpus_nr_throttled | Path])
    end,
    if F9 == undefined -> ok;
       true ->
	   v_type_double(F9, [cpus_throttled_time_secs | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint64(F10, [mem_total_bytes | Path])
    end,
    if F11 == undefined -> ok;
       true ->
	   v_type_uint64(F11, [mem_total_memsw_bytes | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint64(F12, [mem_limit_bytes | Path])
    end,
    if F13 == undefined -> ok;
       true ->
	   v_type_uint64(F13, [mem_soft_limit_bytes | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_uint64(F14, [mem_file_bytes | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_uint64(F15, [mem_anon_bytes | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_uint64(F16, [mem_cache_bytes | Path])
    end,
    if F17 == undefined -> ok;
       true -> v_type_uint64(F17, [mem_rss_bytes | Path])
    end,
    if F18 == undefined -> ok;
       true ->
	   v_type_uint64(F18, [mem_mapped_file_bytes | Path])
    end,
    if F19 == undefined -> ok;
       true -> v_type_uint64(F19, [mem_swap_bytes | Path])
    end,
    if F20 == undefined -> ok;
       true ->
	   v_type_uint64(F20, [mem_low_pressure_counter | Path])
    end,
    if F21 == undefined -> ok;
       true ->
	   v_type_uint64(F21, [mem_medium_pressure_counter | Path])
    end,
    if F22 == undefined -> ok;
       true ->
	   v_type_uint64(F22,
			 [mem_critical_pressure_counter | Path])
    end,
    if F23 == undefined -> ok;
       true -> v_type_uint64(F23, [disk_limit_bytes | Path])
    end,
    if F24 == undefined -> ok;
       true -> v_type_uint64(F24, [disk_used_bytes | Path])
    end,
    if F25 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.PerfStatistics'(F25, [perf | Path])
    end,
    if F26 == undefined -> ok;
       true -> v_type_uint64(F26, [net_rx_packets | Path])
    end,
    if F27 == undefined -> ok;
       true -> v_type_uint64(F27, [net_rx_bytes | Path])
    end,
    if F28 == undefined -> ok;
       true -> v_type_uint64(F28, [net_rx_errors | Path])
    end,
    if F29 == undefined -> ok;
       true -> v_type_uint64(F29, [net_rx_dropped | Path])
    end,
    if F30 == undefined -> ok;
       true -> v_type_uint64(F30, [net_tx_packets | Path])
    end,
    if F31 == undefined -> ok;
       true -> v_type_uint64(F31, [net_tx_bytes | Path])
    end,
    if F32 == undefined -> ok;
       true -> v_type_uint64(F32, [net_tx_errors | Path])
    end,
    if F33 == undefined -> ok;
       true -> v_type_uint64(F33, [net_tx_dropped | Path])
    end,
    if F34 == undefined -> ok;
       true ->
	   v_type_double(F34, [net_tcp_rtt_microsecs_p50 | Path])
    end,
    if F35 == undefined -> ok;
       true ->
	   v_type_double(F35, [net_tcp_rtt_microsecs_p90 | Path])
    end,
    if F36 == undefined -> ok;
       true ->
	   v_type_double(F36, [net_tcp_rtt_microsecs_p95 | Path])
    end,
    if F37 == undefined -> ok;
       true ->
	   v_type_double(F37, [net_tcp_rtt_microsecs_p99 | Path])
    end,
    if F38 == undefined -> ok;
       true ->
	   v_type_double(F38, [net_tcp_active_connections | Path])
    end,
    if F39 == undefined -> ok;
       true ->
	   v_type_double(F39,
			 [net_tcp_time_wait_connections | Path])
    end,
    if is_list(F40) ->
	   ['v_msg_mesos.v1.TrafficControlStatistics'(Elem,
						      [net_traffic_control_statistics
						       | Path])
	    || Elem <- F40];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.TrafficControlStatistics'}},
			 F40, Path)
    end,
    ok;
'v_msg_mesos.v1.ResourceStatistics'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.ResourceStatistics'},
		  X, Path).

'v_msg_mesos.v1.Credentials'(#'mesos.v1.Credentials'{credentials
							 = F1},
			     Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.Credential'(Elem, [credentials | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Credential'}},
			 F1, Path)
    end,
    ok.

'v_msg_mesos.v1.ResourceUsage.Executor'(#'mesos.v1.ResourceUsage.Executor'{executor_info
									       =
									       F1,
									   allocated
									       =
									       F2,
									   statistics
									       =
									       F3},
					Path) ->
    'v_msg_mesos.v1.ExecutorInfo'(F1,
				  [executor_info | Path]),
    if is_list(F2) ->
	   ['v_msg_mesos.v1.Resource'(Elem, [allocated | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Resource'}},
			 F2, Path)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.ResourceStatistics'(F3,
					       [statistics | Path])
    end,
    ok;
'v_msg_mesos.v1.ResourceUsage.Executor'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.ResourceUsage.Executor'},
		  X, Path).

'v_msg_mesos.v1.ACL'(#'mesos.v1.ACL'{}, _Path) -> ok.

'v_msg_mesos.v1.ACL.RunTask'(#'mesos.v1.ACL.RunTask'{principals
							 = F1,
						     users = F2},
			     Path) ->
    'v_msg_mesos.v1.ACL.Entity'(F1, [principals | Path]),
    'v_msg_mesos.v1.ACL.Entity'(F2, [users | Path]),
    ok;
'v_msg_mesos.v1.ACL.RunTask'(X, Path) ->
    mk_type_error({expected_msg, 'mesos.v1.ACL.RunTask'}, X,
		  Path).

'v_msg_mesos.v1.ACL.RegisterFramework'(#'mesos.v1.ACL.RegisterFramework'{principals
									     =
									     F1,
									 roles =
									     F2},
				       Path) ->
    'v_msg_mesos.v1.ACL.Entity'(F1, [principals | Path]),
    'v_msg_mesos.v1.ACL.Entity'(F2, [roles | Path]),
    ok;
'v_msg_mesos.v1.ACL.RegisterFramework'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.ACL.RegisterFramework'},
		  X, Path).

'v_msg_mesos.v1.ACL.ShutdownFramework'(#'mesos.v1.ACL.ShutdownFramework'{principals
									     =
									     F1,
									 framework_principals
									     =
									     F2},
				       Path) ->
    'v_msg_mesos.v1.ACL.Entity'(F1, [principals | Path]),
    'v_msg_mesos.v1.ACL.Entity'(F2,
				[framework_principals | Path]),
    ok;
'v_msg_mesos.v1.ACL.ShutdownFramework'(X, Path) ->
    mk_type_error({expected_msg,
		   'mesos.v1.ACL.ShutdownFramework'},
		  X, Path).

'v_msg_mesos.v1.ACLs'(#'mesos.v1.ACLs'{permissive = F1,
				       register_frameworks = F2, run_tasks = F3,
				       shutdown_frameworks = F4},
		      Path) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [permissive | Path])
    end,
    if is_list(F2) ->
	   ['v_msg_mesos.v1.ACL.RegisterFramework'(Elem,
						   [register_frameworks | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.ACL.RegisterFramework'}},
			 F2, Path)
    end,
    if is_list(F3) ->
	   ['v_msg_mesos.v1.ACL.RunTask'(Elem, [run_tasks | Path])
	    || Elem <- F3];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.ACL.RunTask'}},
			 F3, Path)
    end,
    if is_list(F4) ->
	   ['v_msg_mesos.v1.ACL.ShutdownFramework'(Elem,
						   [shutdown_frameworks | Path])
	    || Elem <- F4];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.ACL.ShutdownFramework'}},
			 F4, Path)
    end,
    ok.

'v_msg_mesos.v1.MasterInfo'(#'mesos.v1.MasterInfo'{id =
						       F1,
						   ip = F2, port = F3, pid = F4,
						   hostname = F5, version = F6,
						   address = F7},
			    Path) ->
    v_type_string(F1, [id | Path]),
    v_type_uint32(F2, [ip | Path]),
    v_type_uint32(F3, [port | Path]),
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [pid | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [hostname | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [version | Path])
    end,
    if F7 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Address'(F7, [address | Path])
    end,
    ok.

'v_msg_mesos.v1.ResourceUsage'(#'mesos.v1.ResourceUsage'{executors
							     = F1,
							 total = F2},
			       Path) ->
    if is_list(F1) ->
	   ['v_msg_mesos.v1.ResourceUsage.Executor'(Elem,
						    [executors | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.ResourceUsage.Executor'}},
			 F1, Path)
    end,
    if is_list(F2) ->
	   ['v_msg_mesos.v1.Resource'(Elem, [total | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'mesos.v1.Resource'}},
			 F2, Path)
    end,
    ok.

'v_msg_mesos.v1.Value'(#'mesos.v1.Value'{type = F1,
					 scalar = F2, ranges = F3, set = F4,
					 text = F5},
		       Path) ->
    'v_enum_mesos.v1.Value.Type'(F1, [type | Path]),
    if F2 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Value.Scalar'(F2, [scalar | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_mesos.v1.Value.Ranges'(F3, [ranges | Path])
    end,
    if F4 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Value.Set'(F4, [set | Path])
    end,
    if F5 == undefined -> ok;
       true -> 'v_msg_mesos.v1.Value.Text'(F5, [text | Path])
    end,
    ok.

'v_msg_mesos.v1.ContainerID'(#'mesos.v1.ContainerID'{value
							 = F1},
			     Path) ->
    v_type_string(F1, [value | Path]), ok.

'v_enum_mesos.v1.scheduler.Event.Type'('SUBSCRIBED',
				       _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Event.Type'('OFFERS',
				       _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Event.Type'('RESCIND',
				       _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Event.Type'('UPDATE',
				       _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Event.Type'('MESSAGE',
				       _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Event.Type'('FAILURE',
				       _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Event.Type'('ERROR',
				       _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Event.Type'('HEARTBEAT',
				       _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Event.Type'(X, Path) ->
    mk_type_error({invalid_enum,
		   'mesos.v1.scheduler.Event.Type'},
		  X, Path).

'v_enum_mesos.v1.scheduler.Call.Type'('SUBSCRIBE',
				      _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Call.Type'('TEARDOWN',
				      _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Call.Type'('ACCEPT',
				      _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Call.Type'('DECLINE',
				      _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Call.Type'('REVIVE',
				      _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Call.Type'('KILL', _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Call.Type'('SHUTDOWN',
				      _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Call.Type'('ACKNOWLEDGE',
				      _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Call.Type'('RECONCILE',
				      _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Call.Type'('MESSAGE',
				      _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Call.Type'('REQUEST',
				      _Path) ->
    ok;
'v_enum_mesos.v1.scheduler.Call.Type'(X, Path) ->
    mk_type_error({invalid_enum,
		   'mesos.v1.scheduler.Call.Type'},
		  X, Path).

'v_enum_mesos.v1.FrameworkInfo.Capability.Type'('REVOCABLE_RESOURCES',
						_Path) ->
    ok;
'v_enum_mesos.v1.FrameworkInfo.Capability.Type'(X,
						Path) ->
    mk_type_error({invalid_enum,
		   'mesos.v1.FrameworkInfo.Capability.Type'},
		  X, Path).

'v_enum_mesos.v1.Value.Type'('SCALAR', _Path) -> ok;
'v_enum_mesos.v1.Value.Type'('RANGES', _Path) -> ok;
'v_enum_mesos.v1.Value.Type'('SET', _Path) -> ok;
'v_enum_mesos.v1.Value.Type'('TEXT', _Path) -> ok;
'v_enum_mesos.v1.Value.Type'(X, Path) ->
    mk_type_error({invalid_enum, 'mesos.v1.Value.Type'}, X,
		  Path).

'v_enum_mesos.v1.Offer.Operation.Type'('LAUNCH',
				       _Path) ->
    ok;
'v_enum_mesos.v1.Offer.Operation.Type'('RESERVE',
				       _Path) ->
    ok;
'v_enum_mesos.v1.Offer.Operation.Type'('UNRESERVE',
				       _Path) ->
    ok;
'v_enum_mesos.v1.Offer.Operation.Type'('CREATE',
				       _Path) ->
    ok;
'v_enum_mesos.v1.Offer.Operation.Type'('DESTROY',
				       _Path) ->
    ok;
'v_enum_mesos.v1.Offer.Operation.Type'(X, Path) ->
    mk_type_error({invalid_enum,
		   'mesos.v1.Offer.Operation.Type'},
		  X, Path).

'v_enum_mesos.v1.TaskState'('TASK_STAGING', _Path) ->
    ok;
'v_enum_mesos.v1.TaskState'('TASK_STARTING', _Path) ->
    ok;
'v_enum_mesos.v1.TaskState'('TASK_RUNNING', _Path) ->
    ok;
'v_enum_mesos.v1.TaskState'('TASK_FINISHED', _Path) ->
    ok;
'v_enum_mesos.v1.TaskState'('TASK_FAILED', _Path) -> ok;
'v_enum_mesos.v1.TaskState'('TASK_KILLED', _Path) -> ok;
'v_enum_mesos.v1.TaskState'('TASK_LOST', _Path) -> ok;
'v_enum_mesos.v1.TaskState'('TASK_ERROR', _Path) -> ok;
'v_enum_mesos.v1.TaskState'(X, Path) ->
    mk_type_error({invalid_enum, 'mesos.v1.TaskState'}, X,
		  Path).

'v_enum_mesos.v1.TaskStatus.Source'('SOURCE_MASTER',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Source'('SOURCE_AGENT',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Source'('SOURCE_EXECUTOR',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Source'(X, Path) ->
    mk_type_error({invalid_enum,
		   'mesos.v1.TaskStatus.Source'},
		  X, Path).

'v_enum_mesos.v1.TaskStatus.Reason'('REASON_COMMAND_EXECUTOR_FAILED',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_EXECUTOR_PREEMPTED',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_EXECUTOR_TERMINATED',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_EXECUTOR_UNREGISTERED',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_FRAMEWORK_REMOVED',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_GC_ERROR',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_INVALID_FRAMEWORKID',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_INVALID_OFFERS',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_MASTER_DISCONNECTED',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_MEMORY_LIMIT',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_RECONCILIATION',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_RESOURCES_UNKNOWN',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_AGENT_DISCONNECTED',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_AGENT_REMOVED',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_AGENT_RESTARTED',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_AGENT_UNKNOWN',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_TASK_INVALID',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_TASK_UNAUTHORIZED',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'('REASON_TASK_UNKNOWN',
				    _Path) ->
    ok;
'v_enum_mesos.v1.TaskStatus.Reason'(X, Path) ->
    mk_type_error({invalid_enum,
		   'mesos.v1.TaskStatus.Reason'},
		  X, Path).

'v_enum_mesos.v1.ACL.Entity.Type'('SOME', _Path) -> ok;
'v_enum_mesos.v1.ACL.Entity.Type'('ANY', _Path) -> ok;
'v_enum_mesos.v1.ACL.Entity.Type'('NONE', _Path) -> ok;
'v_enum_mesos.v1.ACL.Entity.Type'(X, Path) ->
    mk_type_error({invalid_enum,
		   'mesos.v1.ACL.Entity.Type'},
		  X, Path).

'v_enum_mesos.v1.Image.Type'('APPC', _Path) -> ok;
'v_enum_mesos.v1.Image.Type'(X, Path) ->
    mk_type_error({invalid_enum, 'mesos.v1.Image.Type'}, X,
		  Path).

'v_enum_mesos.v1.Volume.Mode'('RW', _Path) -> ok;
'v_enum_mesos.v1.Volume.Mode'('RO', _Path) -> ok;
'v_enum_mesos.v1.Volume.Mode'(X, Path) ->
    mk_type_error({invalid_enum, 'mesos.v1.Volume.Mode'}, X,
		  Path).

'v_enum_mesos.v1.ContainerInfo.Type'('DOCKER', _Path) ->
    ok;
'v_enum_mesos.v1.ContainerInfo.Type'('MESOS', _Path) ->
    ok;
'v_enum_mesos.v1.ContainerInfo.Type'(X, Path) ->
    mk_type_error({invalid_enum,
		   'mesos.v1.ContainerInfo.Type'},
		  X, Path).

'v_enum_mesos.v1.ContainerInfo.DockerInfo.Network'('HOST',
						   _Path) ->
    ok;
'v_enum_mesos.v1.ContainerInfo.DockerInfo.Network'('BRIDGE',
						   _Path) ->
    ok;
'v_enum_mesos.v1.ContainerInfo.DockerInfo.Network'('NONE',
						   _Path) ->
    ok;
'v_enum_mesos.v1.ContainerInfo.DockerInfo.Network'(X,
						   Path) ->
    mk_type_error({invalid_enum,
		   'mesos.v1.ContainerInfo.DockerInfo.Network'},
		  X, Path).

'v_enum_mesos.v1.DiscoveryInfo.Visibility'('FRAMEWORK',
					   _Path) ->
    ok;
'v_enum_mesos.v1.DiscoveryInfo.Visibility'('CLUSTER',
					   _Path) ->
    ok;
'v_enum_mesos.v1.DiscoveryInfo.Visibility'('EXTERNAL',
					   _Path) ->
    ok;
'v_enum_mesos.v1.DiscoveryInfo.Visibility'(X, Path) ->
    mk_type_error({invalid_enum,
		   'mesos.v1.DiscoveryInfo.Visibility'},
		  X, Path).

v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

v_type_uint64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

v_type_double(N, _Path) when is_float(N) -> ok;
v_type_double(N, _Path) when is_integer(N) -> ok;
v_type_double(X, Path) ->
    mk_type_error(bad_double_value, X, Path).

v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



get_msg_defs() ->
    [{{enum, 'mesos.v1.scheduler.Event.Type'},
      [{'SUBSCRIBED', 1}, {'OFFERS', 2}, {'RESCIND', 3},
       {'UPDATE', 4}, {'MESSAGE', 5}, {'FAILURE', 6},
       {'ERROR', 7}, {'HEARTBEAT', 8}]},
     {{enum, 'mesos.v1.scheduler.Call.Type'},
      [{'SUBSCRIBE', 1}, {'TEARDOWN', 2}, {'ACCEPT', 3},
       {'DECLINE', 4}, {'REVIVE', 5}, {'KILL', 6},
       {'SHUTDOWN', 7}, {'ACKNOWLEDGE', 8}, {'RECONCILE', 9},
       {'MESSAGE', 10}, {'REQUEST', 11}]},
     {{enum, 'mesos.v1.Status'},
      [{'DRIVER_NOT_STARTED', 1}, {'DRIVER_RUNNING', 2},
       {'DRIVER_ABORTED', 3}, {'DRIVER_STOPPED', 4}]},
     {{enum, 'mesos.v1.FrameworkInfo.Capability.Type'},
      [{'REVOCABLE_RESOURCES', 1}]},
     {{enum, 'mesos.v1.Value.Type'},
      [{'SCALAR', 0}, {'RANGES', 1}, {'SET', 2},
       {'TEXT', 3}]},
     {{enum, 'mesos.v1.Offer.Operation.Type'},
      [{'LAUNCH', 1}, {'RESERVE', 2}, {'UNRESERVE', 3},
       {'CREATE', 4}, {'DESTROY', 5}]},
     {{enum, 'mesos.v1.TaskState'},
      [{'TASK_STAGING', 6}, {'TASK_STARTING', 0},
       {'TASK_RUNNING', 1}, {'TASK_FINISHED', 2},
       {'TASK_FAILED', 3}, {'TASK_KILLED', 4},
       {'TASK_LOST', 5}, {'TASK_ERROR', 7}]},
     {{enum, 'mesos.v1.TaskStatus.Source'},
      [{'SOURCE_MASTER', 0}, {'SOURCE_AGENT', 1},
       {'SOURCE_EXECUTOR', 2}]},
     {{enum, 'mesos.v1.TaskStatus.Reason'},
      [{'REASON_COMMAND_EXECUTOR_FAILED', 0},
       {'REASON_EXECUTOR_PREEMPTED', 17},
       {'REASON_EXECUTOR_TERMINATED', 1},
       {'REASON_EXECUTOR_UNREGISTERED', 2},
       {'REASON_FRAMEWORK_REMOVED', 3}, {'REASON_GC_ERROR', 4},
       {'REASON_INVALID_FRAMEWORKID', 5},
       {'REASON_INVALID_OFFERS', 6},
       {'REASON_MASTER_DISCONNECTED', 7},
       {'REASON_MEMORY_LIMIT', 8},
       {'REASON_RECONCILIATION', 9},
       {'REASON_RESOURCES_UNKNOWN', 18},
       {'REASON_AGENT_DISCONNECTED', 10},
       {'REASON_AGENT_REMOVED', 11},
       {'REASON_AGENT_RESTARTED', 12},
       {'REASON_AGENT_UNKNOWN', 13},
       {'REASON_TASK_INVALID', 14},
       {'REASON_TASK_UNAUTHORIZED', 15},
       {'REASON_TASK_UNKNOWN', 16}]},
     {{enum, 'mesos.v1.ACL.Entity.Type'},
      [{'SOME', 0}, {'ANY', 1}, {'NONE', 2}]},
     {{enum, 'mesos.v1.Image.Type'}, [{'APPC', 1}]},
     {{enum, 'mesos.v1.Volume.Mode'},
      [{'RW', 1}, {'RO', 2}]},
     {{enum, 'mesos.v1.ContainerInfo.Type'},
      [{'DOCKER', 1}, {'MESOS', 2}]},
     {{enum, 'mesos.v1.ContainerInfo.DockerInfo.Network'},
      [{'HOST', 1}, {'BRIDGE', 2}, {'NONE', 3}]},
     {{enum, 'mesos.v1.DiscoveryInfo.Visibility'},
      [{'FRAMEWORK', 0}, {'CLUSTER', 1}, {'EXTERNAL', 2}]},
     {{msg, 'mesos.v1.Label'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.Labels'},
      [#field{name = labels, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.Label'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'mesos.v1.Image.AppC'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = labels, fnum = 3, rnum = 4,
	      type = {msg, 'mesos.v1.Labels'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.Image'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'mesos.v1.Image.Type'},
	      occurrence = required, opts = []},
       #field{name = appc, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.Image.AppC'},
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.ContainerInfo.MesosInfo'},
      [#field{name = image, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.Image'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.Parameter'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.ContainerInfo.DockerInfo.PortMapping'},
      [#field{name = host_port, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = container_port, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []},
       #field{name = protocol, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.ContainerInfo.DockerInfo'},
      [#field{name = image, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = network, fnum = 2, rnum = 3,
	      type =
		  {enum, 'mesos.v1.ContainerInfo.DockerInfo.Network'},
	      occurrence = optional, opts = [{default, 'HOST'}]},
       #field{name = port_mappings, fnum = 3, rnum = 4,
	      type =
		  {msg, 'mesos.v1.ContainerInfo.DockerInfo.PortMapping'},
	      occurrence = repeated, opts = []},
       #field{name = privileged, fnum = 4, rnum = 5,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = parameters, fnum = 5, rnum = 6,
	      type = {msg, 'mesos.v1.Parameter'},
	      occurrence = repeated, opts = []},
       #field{name = force_pull_image, fnum = 6, rnum = 7,
	      type = bool, occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.Volume'},
      [#field{name = mode, fnum = 3, rnum = 2,
	      type = {enum, 'mesos.v1.Volume.Mode'},
	      occurrence = required, opts = []},
       #field{name = container_path, fnum = 1, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = host_path, fnum = 2, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = image, fnum = 4, rnum = 5,
	      type = {msg, 'mesos.v1.Image'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.ContainerInfo'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'mesos.v1.ContainerInfo.Type'},
	      occurrence = required, opts = []},
       #field{name = volumes, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.Volume'}, occurrence = repeated,
	      opts = []},
       #field{name = hostname, fnum = 4, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = docker, fnum = 3, rnum = 5,
	      type = {msg, 'mesos.v1.ContainerInfo.DockerInfo'},
	      occurrence = optional, opts = []},
       #field{name = mesos, fnum = 5, rnum = 6,
	      type = {msg, 'mesos.v1.ContainerInfo.MesosInfo'},
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.AgentID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.Value.Text'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.Value.Set'},
      [#field{name = item, fnum = 1, rnum = 2, type = string,
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.Value.Range'},
      [#field{name = 'begin', fnum = 1, rnum = 2,
	      type = uint64, occurrence = required, opts = []},
       #field{name = 'end', fnum = 2, rnum = 3, type = uint64,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.Value.Ranges'},
      [#field{name = range, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.Value.Range'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.Value.Scalar'},
      [#field{name = value, fnum = 1, rnum = 2, type = double,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.Attribute'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 2, rnum = 3,
	      type = {enum, 'mesos.v1.Value.Type'},
	      occurrence = required, opts = []},
       #field{name = scalar, fnum = 3, rnum = 4,
	      type = {msg, 'mesos.v1.Value.Scalar'},
	      occurrence = optional, opts = []},
       #field{name = ranges, fnum = 4, rnum = 5,
	      type = {msg, 'mesos.v1.Value.Ranges'},
	      occurrence = optional, opts = []},
       #field{name = set, fnum = 6, rnum = 6,
	      type = {msg, 'mesos.v1.Value.Set'},
	      occurrence = optional, opts = []},
       #field{name = text, fnum = 5, rnum = 7,
	      type = {msg, 'mesos.v1.Value.Text'},
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.Resource.RevocableInfo'}, []},
     {{msg, 'mesos.v1.Resource.DiskInfo.Persistence'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.Resource.DiskInfo'},
      [#field{name = persistence, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.Resource.DiskInfo.Persistence'},
	      occurrence = optional, opts = []},
       #field{name = volume, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.Volume'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.Resource.ReservationInfo'},
      [#field{name = principal, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.Resource'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 2, rnum = 3,
	      type = {enum, 'mesos.v1.Value.Type'},
	      occurrence = required, opts = []},
       #field{name = scalar, fnum = 3, rnum = 4,
	      type = {msg, 'mesos.v1.Value.Scalar'},
	      occurrence = optional, opts = []},
       #field{name = ranges, fnum = 4, rnum = 5,
	      type = {msg, 'mesos.v1.Value.Ranges'},
	      occurrence = optional, opts = []},
       #field{name = set, fnum = 5, rnum = 6,
	      type = {msg, 'mesos.v1.Value.Set'},
	      occurrence = optional, opts = []},
       #field{name = role, fnum = 6, rnum = 7, type = string,
	      occurrence = optional, opts = [{default, "*"}]},
       #field{name = reservation, fnum = 8, rnum = 8,
	      type = {msg, 'mesos.v1.Resource.ReservationInfo'},
	      occurrence = optional, opts = []},
       #field{name = disk, fnum = 7, rnum = 9,
	      type = {msg, 'mesos.v1.Resource.DiskInfo'},
	      occurrence = optional, opts = []},
       #field{name = revocable, fnum = 9, rnum = 10,
	      type = {msg, 'mesos.v1.Resource.RevocableInfo'},
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.AgentInfo'},
      [#field{name = hostname, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = port, fnum = 8, rnum = 3, type = int32,
	      occurrence = optional, opts = [{default, 5051}]},
       #field{name = resources, fnum = 3, rnum = 4,
	      type = {msg, 'mesos.v1.Resource'},
	      occurrence = repeated, opts = []},
       #field{name = attributes, fnum = 5, rnum = 5,
	      type = {msg, 'mesos.v1.Attribute'},
	      occurrence = repeated, opts = []},
       #field{name = id, fnum = 6, rnum = 6,
	      type = {msg, 'mesos.v1.AgentID'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.Request'},
      [#field{name = agent_id, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.AgentID'}, occurrence = optional,
	      opts = []},
       #field{name = resources, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.Resource'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.scheduler.Call.Request'},
      [#field{name = requests, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.Request'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'mesos.v1.ExecutorID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.scheduler.Call.Message'},
      [#field{name = agent_id, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.AgentID'}, occurrence = required,
	      opts = []},
       #field{name = executor_id, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.ExecutorID'},
	      occurrence = required, opts = []},
       #field{name = data, fnum = 3, rnum = 4, type = bytes,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.TaskID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.scheduler.Call.Reconcile.Task'},
      [#field{name = task_id, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.TaskID'}, occurrence = required,
	      opts = []},
       #field{name = agent_id, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.AgentID'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.scheduler.Call.Reconcile'},
      [#field{name = tasks, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.scheduler.Call.Reconcile.Task'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.scheduler.Call.Acknowledge'},
      [#field{name = agent_id, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.AgentID'}, occurrence = required,
	      opts = []},
       #field{name = task_id, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.TaskID'}, occurrence = required,
	      opts = []},
       #field{name = uuid, fnum = 3, rnum = 4, type = bytes,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.scheduler.Call.Shutdown'},
      [#field{name = executor_id, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.ExecutorID'},
	      occurrence = required, opts = []},
       #field{name = agent_id, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.AgentID'}, occurrence = required,
	      opts = []}]},
     {{msg, 'mesos.v1.scheduler.Call.Kill'},
      [#field{name = task_id, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.TaskID'}, occurrence = required,
	      opts = []},
       #field{name = agent_id, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.AgentID'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.Filters'},
      [#field{name = refuse_seconds, fnum = 1, rnum = 2,
	      type = double, occurrence = optional,
	      opts = [{default, 5.0}]}]},
     {{msg, 'mesos.v1.OfferID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.scheduler.Call.Decline'},
      [#field{name = offer_ids, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.OfferID'}, occurrence = repeated,
	      opts = []},
       #field{name = filters, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.Filters'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.Offer.Operation.Destroy'},
      [#field{name = volumes, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.Resource'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.Offer.Operation.Create'},
      [#field{name = volumes, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.Resource'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.Offer.Operation.Unreserve'},
      [#field{name = resources, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.Resource'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.Offer.Operation.Reserve'},
      [#field{name = resources, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.Resource'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.Port'},
      [#field{name = number, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = protocol, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.Ports'},
      [#field{name = ports, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.Port'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'mesos.v1.DiscoveryInfo'},
      [#field{name = visibility, fnum = 1, rnum = 2,
	      type = {enum, 'mesos.v1.DiscoveryInfo.Visibility'},
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = environment, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = location, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = version, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = ports, fnum = 6, rnum = 7,
	      type = {msg, 'mesos.v1.Ports'}, occurrence = optional,
	      opts = []},
       #field{name = labels, fnum = 7, rnum = 8,
	      type = {msg, 'mesos.v1.Labels'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.Environment.Variable'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.Environment'},
      [#field{name = variables, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.Environment.Variable'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.CommandInfo.URI'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = executable, fnum = 2, rnum = 3,
	      type = bool, occurrence = optional, opts = []},
       #field{name = extract, fnum = 3, rnum = 4, type = bool,
	      occurrence = optional, opts = [{default, true}]},
       #field{name = cache, fnum = 4, rnum = 5, type = bool,
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.CommandInfo.ContainerInfo'},
      [#field{name = image, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = options, fnum = 2, rnum = 3,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.CommandInfo'},
      [#field{name = container, fnum = 4, rnum = 2,
	      type = {msg, 'mesos.v1.CommandInfo.ContainerInfo'},
	      occurrence = optional, opts = []},
       #field{name = uris, fnum = 1, rnum = 3,
	      type = {msg, 'mesos.v1.CommandInfo.URI'},
	      occurrence = repeated, opts = []},
       #field{name = environment, fnum = 2, rnum = 4,
	      type = {msg, 'mesos.v1.Environment'},
	      occurrence = optional, opts = []},
       #field{name = shell, fnum = 6, rnum = 5, type = bool,
	      occurrence = optional, opts = [{default, true}]},
       #field{name = value, fnum = 3, rnum = 6, type = string,
	      occurrence = optional, opts = []},
       #field{name = arguments, fnum = 7, rnum = 7,
	      type = string, occurrence = repeated, opts = []},
       #field{name = user, fnum = 5, rnum = 8, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.HealthCheck.HTTP'},
      [#field{name = port, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = path, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = [{default, "/"}]},
       #field{name = statuses, fnum = 4, rnum = 4,
	      type = uint32, occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.HealthCheck'},
      [#field{name = http, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.HealthCheck.HTTP'},
	      occurrence = optional, opts = []},
       #field{name = delay_seconds, fnum = 2, rnum = 3,
	      type = double, occurrence = optional,
	      opts = [{default, 1.5e+1}]},
       #field{name = interval_seconds, fnum = 3, rnum = 4,
	      type = double, occurrence = optional,
	      opts = [{default, 1.0e+1}]},
       #field{name = timeout_seconds, fnum = 4, rnum = 5,
	      type = double, occurrence = optional,
	      opts = [{default, 2.0e+1}]},
       #field{name = consecutive_failures, fnum = 5, rnum = 6,
	      type = uint32, occurrence = optional,
	      opts = [{default, 3}]},
       #field{name = grace_period_seconds, fnum = 6, rnum = 7,
	      type = double, occurrence = optional,
	      opts = [{default, 1.0e+1}]},
       #field{name = command, fnum = 7, rnum = 8,
	      type = {msg, 'mesos.v1.CommandInfo'},
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.FrameworkID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.ExecutorInfo'},
      [#field{name = executor_id, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.ExecutorID'},
	      occurrence = required, opts = []},
       #field{name = framework_id, fnum = 8, rnum = 3,
	      type = {msg, 'mesos.v1.FrameworkID'},
	      occurrence = optional, opts = []},
       #field{name = command, fnum = 7, rnum = 4,
	      type = {msg, 'mesos.v1.CommandInfo'},
	      occurrence = required, opts = []},
       #field{name = container, fnum = 11, rnum = 5,
	      type = {msg, 'mesos.v1.ContainerInfo'},
	      occurrence = optional, opts = []},
       #field{name = resources, fnum = 5, rnum = 6,
	      type = {msg, 'mesos.v1.Resource'},
	      occurrence = repeated, opts = []},
       #field{name = name, fnum = 9, rnum = 7, type = string,
	      occurrence = optional, opts = []},
       #field{name = source, fnum = 10, rnum = 8,
	      type = string, occurrence = optional, opts = []},
       #field{name = data, fnum = 4, rnum = 9, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = discovery, fnum = 12, rnum = 10,
	      type = {msg, 'mesos.v1.DiscoveryInfo'},
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.TaskInfo'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = task_id, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.TaskID'}, occurrence = required,
	      opts = []},
       #field{name = agent_id, fnum = 3, rnum = 4,
	      type = {msg, 'mesos.v1.AgentID'}, occurrence = required,
	      opts = []},
       #field{name = resources, fnum = 4, rnum = 5,
	      type = {msg, 'mesos.v1.Resource'},
	      occurrence = repeated, opts = []},
       #field{name = executor, fnum = 5, rnum = 6,
	      type = {msg, 'mesos.v1.ExecutorInfo'},
	      occurrence = optional, opts = []},
       #field{name = command, fnum = 7, rnum = 7,
	      type = {msg, 'mesos.v1.CommandInfo'},
	      occurrence = optional, opts = []},
       #field{name = container, fnum = 9, rnum = 8,
	      type = {msg, 'mesos.v1.ContainerInfo'},
	      occurrence = optional, opts = []},
       #field{name = data, fnum = 6, rnum = 9, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = health_check, fnum = 8, rnum = 10,
	      type = {msg, 'mesos.v1.HealthCheck'},
	      occurrence = optional, opts = []},
       #field{name = labels, fnum = 10, rnum = 11,
	      type = {msg, 'mesos.v1.Labels'}, occurrence = optional,
	      opts = []},
       #field{name = discovery, fnum = 11, rnum = 12,
	      type = {msg, 'mesos.v1.DiscoveryInfo'},
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.Offer.Operation.Launch'},
      [#field{name = task_infos, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.TaskInfo'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.Offer.Operation'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'mesos.v1.Offer.Operation.Type'},
	      occurrence = required, opts = []},
       #field{name = launch, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.Offer.Operation.Launch'},
	      occurrence = optional, opts = []},
       #field{name = reserve, fnum = 3, rnum = 4,
	      type = {msg, 'mesos.v1.Offer.Operation.Reserve'},
	      occurrence = optional, opts = []},
       #field{name = unreserve, fnum = 4, rnum = 5,
	      type = {msg, 'mesos.v1.Offer.Operation.Unreserve'},
	      occurrence = optional, opts = []},
       #field{name = create, fnum = 5, rnum = 6,
	      type = {msg, 'mesos.v1.Offer.Operation.Create'},
	      occurrence = optional, opts = []},
       #field{name = destroy, fnum = 6, rnum = 7,
	      type = {msg, 'mesos.v1.Offer.Operation.Destroy'},
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.scheduler.Call.Accept'},
      [#field{name = offer_ids, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.OfferID'}, occurrence = repeated,
	      opts = []},
       #field{name = operations, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.Offer.Operation'},
	      occurrence = repeated, opts = []},
       #field{name = filters, fnum = 3, rnum = 4,
	      type = {msg, 'mesos.v1.Filters'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.FrameworkInfo.Capability'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'mesos.v1.FrameworkInfo.Capability.Type'},
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.FrameworkInfo'},
      [#field{name = user, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 3, rnum = 4,
	      type = {msg, 'mesos.v1.FrameworkID'},
	      occurrence = optional, opts = []},
       #field{name = failover_timeout, fnum = 4, rnum = 5,
	      type = double, occurrence = optional,
	      opts = [{default, 0.0}]},
       #field{name = checkpoint, fnum = 5, rnum = 6,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = role, fnum = 6, rnum = 7, type = string,
	      occurrence = optional, opts = [{default, "*"}]},
       #field{name = hostname, fnum = 7, rnum = 8,
	      type = string, occurrence = optional, opts = []},
       #field{name = principal, fnum = 8, rnum = 9,
	      type = string, occurrence = optional, opts = []},
       #field{name = webui_url, fnum = 9, rnum = 10,
	      type = string, occurrence = optional, opts = []},
       #field{name = capabilities, fnum = 10, rnum = 11,
	      type = {msg, 'mesos.v1.FrameworkInfo.Capability'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.scheduler.Call.Subscribe'},
      [#field{name = framework_info, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.FrameworkInfo'},
	      occurrence = required, opts = []},
       #field{name = force, fnum = 2, rnum = 3, type = bool,
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.scheduler.Call'},
      [#field{name = framework_id, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.FrameworkID'},
	      occurrence = optional, opts = []},
       #field{name = type, fnum = 2, rnum = 3,
	      type = {enum, 'mesos.v1.scheduler.Call.Type'},
	      occurrence = required, opts = []},
       #field{name = subscribe, fnum = 3, rnum = 4,
	      type = {msg, 'mesos.v1.scheduler.Call.Subscribe'},
	      occurrence = optional, opts = []},
       #field{name = accept, fnum = 4, rnum = 5,
	      type = {msg, 'mesos.v1.scheduler.Call.Accept'},
	      occurrence = optional, opts = []},
       #field{name = decline, fnum = 5, rnum = 6,
	      type = {msg, 'mesos.v1.scheduler.Call.Decline'},
	      occurrence = optional, opts = []},
       #field{name = kill, fnum = 6, rnum = 7,
	      type = {msg, 'mesos.v1.scheduler.Call.Kill'},
	      occurrence = optional, opts = []},
       #field{name = shutdown, fnum = 7, rnum = 8,
	      type = {msg, 'mesos.v1.scheduler.Call.Shutdown'},
	      occurrence = optional, opts = []},
       #field{name = acknowledge, fnum = 8, rnum = 9,
	      type = {msg, 'mesos.v1.scheduler.Call.Acknowledge'},
	      occurrence = optional, opts = []},
       #field{name = reconcile, fnum = 9, rnum = 10,
	      type = {msg, 'mesos.v1.scheduler.Call.Reconcile'},
	      occurrence = optional, opts = []},
       #field{name = message, fnum = 10, rnum = 11,
	      type = {msg, 'mesos.v1.scheduler.Call.Message'},
	      occurrence = optional, opts = []},
       #field{name = request, fnum = 11, rnum = 12,
	      type = {msg, 'mesos.v1.scheduler.Call.Request'},
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.RateLimit'},
      [#field{name = qps, fnum = 1, rnum = 2, type = double,
	      occurrence = optional, opts = []},
       #field{name = principal, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = capacity, fnum = 3, rnum = 4,
	      type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.RateLimits'},
      [#field{name = limits, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.RateLimit'},
	      occurrence = repeated, opts = []},
       #field{name = aggregate_default_qps, fnum = 2, rnum = 3,
	      type = double, occurrence = optional, opts = []},
       #field{name = aggregate_default_capacity, fnum = 3,
	      rnum = 4, type = uint64, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.Parameters'},
      [#field{name = parameter, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.Parameter'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.Address'},
      [#field{name = hostname, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = ip, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = port, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.URL'},
      [#field{name = scheme, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = address, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.Address'}, occurrence = required,
	      opts = []},
       #field{name = path, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = query, fnum = 4, rnum = 5,
	      type = {msg, 'mesos.v1.Parameter'},
	      occurrence = repeated, opts = []},
       #field{name = fragment, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.Offer'},
      [#field{name = id, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.OfferID'}, occurrence = required,
	      opts = []},
       #field{name = framework_id, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.FrameworkID'},
	      occurrence = required, opts = []},
       #field{name = agent_id, fnum = 3, rnum = 4,
	      type = {msg, 'mesos.v1.AgentID'}, occurrence = required,
	      opts = []},
       #field{name = hostname, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []},
       #field{name = url, fnum = 8, rnum = 6,
	      type = {msg, 'mesos.v1.URL'}, occurrence = optional,
	      opts = []},
       #field{name = resources, fnum = 5, rnum = 7,
	      type = {msg, 'mesos.v1.Resource'},
	      occurrence = repeated, opts = []},
       #field{name = attributes, fnum = 7, rnum = 8,
	      type = {msg, 'mesos.v1.Attribute'},
	      occurrence = repeated, opts = []},
       #field{name = executor_ids, fnum = 6, rnum = 9,
	      type = {msg, 'mesos.v1.ExecutorID'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.Credential'},
      [#field{name = principal, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = secret, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.ACL.Entity'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'mesos.v1.ACL.Entity.Type'},
	      occurrence = optional, opts = [{default, 'SOME'}]},
       #field{name = values, fnum = 2, rnum = 3, type = string,
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.TaskStatus'},
      [#field{name = task_id, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.TaskID'}, occurrence = required,
	      opts = []},
       #field{name = state, fnum = 2, rnum = 3,
	      type = {enum, 'mesos.v1.TaskState'},
	      occurrence = required, opts = []},
       #field{name = message, fnum = 4, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = source, fnum = 9, rnum = 5,
	      type = {enum, 'mesos.v1.TaskStatus.Source'},
	      occurrence = optional, opts = []},
       #field{name = reason, fnum = 10, rnum = 6,
	      type = {enum, 'mesos.v1.TaskStatus.Reason'},
	      occurrence = optional, opts = []},
       #field{name = data, fnum = 3, rnum = 7, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = agent_id, fnum = 5, rnum = 8,
	      type = {msg, 'mesos.v1.AgentID'}, occurrence = optional,
	      opts = []},
       #field{name = executor_id, fnum = 7, rnum = 9,
	      type = {msg, 'mesos.v1.ExecutorID'},
	      occurrence = optional, opts = []},
       #field{name = timestamp, fnum = 6, rnum = 10,
	      type = double, occurrence = optional, opts = []},
       #field{name = uuid, fnum = 11, rnum = 11, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = healthy, fnum = 8, rnum = 12, type = bool,
	      occurrence = optional, opts = []},
       #field{name = labels, fnum = 12, rnum = 13,
	      type = {msg, 'mesos.v1.Labels'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.scheduler.Event.Update'},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.TaskStatus'},
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.scheduler.Event.Error'},
      [#field{name = message, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.scheduler.Event.Failure'},
      [#field{name = agent_id, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.AgentID'}, occurrence = optional,
	      opts = []},
       #field{name = executor_id, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.ExecutorID'},
	      occurrence = optional, opts = []},
       #field{name = status, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.scheduler.Event.Message'},
      [#field{name = agent_id, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.AgentID'}, occurrence = required,
	      opts = []},
       #field{name = executor_id, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.ExecutorID'},
	      occurrence = required, opts = []},
       #field{name = data, fnum = 3, rnum = 4, type = bytes,
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.scheduler.Event.Rescind'},
      [#field{name = offer_id, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.OfferID'}, occurrence = required,
	      opts = []}]},
     {{msg, 'mesos.v1.scheduler.Event.Offers'},
      [#field{name = offers, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.Offer'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'mesos.v1.scheduler.Event.Subscribed'},
      [#field{name = framework_id, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.FrameworkID'},
	      occurrence = required, opts = []},
       #field{name = heartbeat_interval_seconds, fnum = 2,
	      rnum = 3, type = double, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.scheduler.Event'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'mesos.v1.scheduler.Event.Type'},
	      occurrence = required, opts = []},
       #field{name = subscribed, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.scheduler.Event.Subscribed'},
	      occurrence = optional, opts = []},
       #field{name = offers, fnum = 3, rnum = 4,
	      type = {msg, 'mesos.v1.scheduler.Event.Offers'},
	      occurrence = optional, opts = []},
       #field{name = rescind, fnum = 4, rnum = 5,
	      type = {msg, 'mesos.v1.scheduler.Event.Rescind'},
	      occurrence = optional, opts = []},
       #field{name = update, fnum = 5, rnum = 6,
	      type = {msg, 'mesos.v1.scheduler.Event.Update'},
	      occurrence = optional, opts = []},
       #field{name = message, fnum = 6, rnum = 7,
	      type = {msg, 'mesos.v1.scheduler.Event.Message'},
	      occurrence = optional, opts = []},
       #field{name = failure, fnum = 7, rnum = 8,
	      type = {msg, 'mesos.v1.scheduler.Event.Failure'},
	      occurrence = optional, opts = []},
       #field{name = error, fnum = 8, rnum = 9,
	      type = {msg, 'mesos.v1.scheduler.Event.Error'},
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.TrafficControlStatistics'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = backlog, fnum = 2, rnum = 3,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = bytes, fnum = 3, rnum = 4, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = drops, fnum = 4, rnum = 5, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = overlimits, fnum = 5, rnum = 6,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = packets, fnum = 6, rnum = 7,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = qlen, fnum = 7, rnum = 8, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = ratebps, fnum = 8, rnum = 9,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = ratepps, fnum = 9, rnum = 10,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = requeues, fnum = 10, rnum = 11,
	      type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.PerfStatistics'},
      [#field{name = timestamp, fnum = 1, rnum = 2,
	      type = double, occurrence = required, opts = []},
       #field{name = duration, fnum = 2, rnum = 3,
	      type = double, occurrence = required, opts = []},
       #field{name = cycles, fnum = 3, rnum = 4, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = stalled_cycles_frontend, fnum = 4,
	      rnum = 5, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = stalled_cycles_backend, fnum = 5,
	      rnum = 6, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = instructions, fnum = 6, rnum = 7,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = cache_references, fnum = 7, rnum = 8,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = cache_misses, fnum = 8, rnum = 9,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = branches, fnum = 9, rnum = 10,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = branch_misses, fnum = 10, rnum = 11,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = bus_cycles, fnum = 11, rnum = 12,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = ref_cycles, fnum = 12, rnum = 13,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = cpu_clock, fnum = 13, rnum = 14,
	      type = double, occurrence = optional, opts = []},
       #field{name = task_clock, fnum = 14, rnum = 15,
	      type = double, occurrence = optional, opts = []},
       #field{name = page_faults, fnum = 15, rnum = 16,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = minor_faults, fnum = 16, rnum = 17,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = major_faults, fnum = 17, rnum = 18,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = context_switches, fnum = 18, rnum = 19,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = cpu_migrations, fnum = 19, rnum = 20,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = alignment_faults, fnum = 20, rnum = 21,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = emulation_faults, fnum = 21, rnum = 22,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = l1_dcache_loads, fnum = 22, rnum = 23,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = l1_dcache_load_misses, fnum = 23,
	      rnum = 24, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = l1_dcache_stores, fnum = 24, rnum = 25,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = l1_dcache_store_misses, fnum = 25,
	      rnum = 26, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = l1_dcache_prefetches, fnum = 26,
	      rnum = 27, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = l1_dcache_prefetch_misses, fnum = 27,
	      rnum = 28, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = l1_icache_loads, fnum = 28, rnum = 29,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = l1_icache_load_misses, fnum = 29,
	      rnum = 30, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = l1_icache_prefetches, fnum = 30,
	      rnum = 31, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = l1_icache_prefetch_misses, fnum = 31,
	      rnum = 32, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = llc_loads, fnum = 32, rnum = 33,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = llc_load_misses, fnum = 33, rnum = 34,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = llc_stores, fnum = 34, rnum = 35,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = llc_store_misses, fnum = 35, rnum = 36,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = llc_prefetches, fnum = 36, rnum = 37,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = llc_prefetch_misses, fnum = 37, rnum = 38,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = dtlb_loads, fnum = 38, rnum = 39,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = dtlb_load_misses, fnum = 39, rnum = 40,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = dtlb_stores, fnum = 40, rnum = 41,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = dtlb_store_misses, fnum = 41, rnum = 42,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = dtlb_prefetches, fnum = 42, rnum = 43,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = dtlb_prefetch_misses, fnum = 43,
	      rnum = 44, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = itlb_loads, fnum = 44, rnum = 45,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = itlb_load_misses, fnum = 45, rnum = 46,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = branch_loads, fnum = 46, rnum = 47,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = branch_load_misses, fnum = 47, rnum = 48,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = node_loads, fnum = 48, rnum = 49,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = node_load_misses, fnum = 49, rnum = 50,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = node_stores, fnum = 50, rnum = 51,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = node_store_misses, fnum = 51, rnum = 52,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = node_prefetches, fnum = 52, rnum = 53,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = node_prefetch_misses, fnum = 53,
	      rnum = 54, type = uint64, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.ResourceStatistics'},
      [#field{name = timestamp, fnum = 1, rnum = 2,
	      type = double, occurrence = required, opts = []},
       #field{name = processes, fnum = 30, rnum = 3,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = threads, fnum = 31, rnum = 4,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = cpus_user_time_secs, fnum = 2, rnum = 5,
	      type = double, occurrence = optional, opts = []},
       #field{name = cpus_system_time_secs, fnum = 3, rnum = 6,
	      type = double, occurrence = optional, opts = []},
       #field{name = cpus_limit, fnum = 4, rnum = 7,
	      type = double, occurrence = optional, opts = []},
       #field{name = cpus_nr_periods, fnum = 7, rnum = 8,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = cpus_nr_throttled, fnum = 8, rnum = 9,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = cpus_throttled_time_secs, fnum = 9,
	      rnum = 10, type = double, occurrence = optional,
	      opts = []},
       #field{name = mem_total_bytes, fnum = 36, rnum = 11,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_total_memsw_bytes, fnum = 37,
	      rnum = 12, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = mem_limit_bytes, fnum = 6, rnum = 13,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_soft_limit_bytes, fnum = 38,
	      rnum = 14, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = mem_file_bytes, fnum = 10, rnum = 15,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_anon_bytes, fnum = 11, rnum = 16,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_cache_bytes, fnum = 39, rnum = 17,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_rss_bytes, fnum = 5, rnum = 18,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_mapped_file_bytes, fnum = 12,
	      rnum = 19, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = mem_swap_bytes, fnum = 40, rnum = 20,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_low_pressure_counter, fnum = 32,
	      rnum = 21, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = mem_medium_pressure_counter, fnum = 33,
	      rnum = 22, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = mem_critical_pressure_counter, fnum = 34,
	      rnum = 23, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = disk_limit_bytes, fnum = 26, rnum = 24,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = disk_used_bytes, fnum = 27, rnum = 25,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = perf, fnum = 13, rnum = 26,
	      type = {msg, 'mesos.v1.PerfStatistics'},
	      occurrence = optional, opts = []},
       #field{name = net_rx_packets, fnum = 14, rnum = 27,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_rx_bytes, fnum = 15, rnum = 28,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_rx_errors, fnum = 16, rnum = 29,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_rx_dropped, fnum = 17, rnum = 30,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_tx_packets, fnum = 18, rnum = 31,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_tx_bytes, fnum = 19, rnum = 32,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_tx_errors, fnum = 20, rnum = 33,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_tx_dropped, fnum = 21, rnum = 34,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_tcp_rtt_microsecs_p50, fnum = 22,
	      rnum = 35, type = double, occurrence = optional,
	      opts = []},
       #field{name = net_tcp_rtt_microsecs_p90, fnum = 23,
	      rnum = 36, type = double, occurrence = optional,
	      opts = []},
       #field{name = net_tcp_rtt_microsecs_p95, fnum = 24,
	      rnum = 37, type = double, occurrence = optional,
	      opts = []},
       #field{name = net_tcp_rtt_microsecs_p99, fnum = 25,
	      rnum = 38, type = double, occurrence = optional,
	      opts = []},
       #field{name = net_tcp_active_connections, fnum = 28,
	      rnum = 39, type = double, occurrence = optional,
	      opts = []},
       #field{name = net_tcp_time_wait_connections, fnum = 29,
	      rnum = 40, type = double, occurrence = optional,
	      opts = []},
       #field{name = net_traffic_control_statistics, fnum = 35,
	      rnum = 41,
	      type = {msg, 'mesos.v1.TrafficControlStatistics'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.Credentials'},
      [#field{name = credentials, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.Credential'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.ResourceUsage.Executor'},
      [#field{name = executor_info, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.ExecutorInfo'},
	      occurrence = required, opts = []},
       #field{name = allocated, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.Resource'},
	      occurrence = repeated, opts = []},
       #field{name = statistics, fnum = 3, rnum = 4,
	      type = {msg, 'mesos.v1.ResourceStatistics'},
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.ACL'}, []},
     {{msg, 'mesos.v1.ACL.RunTask'},
      [#field{name = principals, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.ACL.Entity'},
	      occurrence = required, opts = []},
       #field{name = users, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.ACL.Entity'},
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.ACL.RegisterFramework'},
      [#field{name = principals, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.ACL.Entity'},
	      occurrence = required, opts = []},
       #field{name = roles, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.ACL.Entity'},
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.ACL.ShutdownFramework'},
      [#field{name = principals, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.ACL.Entity'},
	      occurrence = required, opts = []},
       #field{name = framework_principals, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.ACL.Entity'},
	      occurrence = required, opts = []}]},
     {{msg, 'mesos.v1.ACLs'},
      [#field{name = permissive, fnum = 1, rnum = 2,
	      type = bool, occurrence = optional,
	      opts = [{default, true}]},
       #field{name = register_frameworks, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.ACL.RegisterFramework'},
	      occurrence = repeated, opts = []},
       #field{name = run_tasks, fnum = 3, rnum = 4,
	      type = {msg, 'mesos.v1.ACL.RunTask'},
	      occurrence = repeated, opts = []},
       #field{name = shutdown_frameworks, fnum = 4, rnum = 5,
	      type = {msg, 'mesos.v1.ACL.ShutdownFramework'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.MasterInfo'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = ip, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = port, fnum = 3, rnum = 4, type = uint32,
	      occurrence = required, opts = [{default, 5050}]},
       #field{name = pid, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = hostname, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = version, fnum = 6, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = address, fnum = 7, rnum = 8,
	      type = {msg, 'mesos.v1.Address'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'mesos.v1.ResourceUsage'},
      [#field{name = executors, fnum = 1, rnum = 2,
	      type = {msg, 'mesos.v1.ResourceUsage.Executor'},
	      occurrence = repeated, opts = []},
       #field{name = total, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.Resource'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'mesos.v1.Value'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'mesos.v1.Value.Type'},
	      occurrence = required, opts = []},
       #field{name = scalar, fnum = 2, rnum = 3,
	      type = {msg, 'mesos.v1.Value.Scalar'},
	      occurrence = optional, opts = []},
       #field{name = ranges, fnum = 3, rnum = 4,
	      type = {msg, 'mesos.v1.Value.Ranges'},
	      occurrence = optional, opts = []},
       #field{name = set, fnum = 4, rnum = 5,
	      type = {msg, 'mesos.v1.Value.Set'},
	      occurrence = optional, opts = []},
       #field{name = text, fnum = 5, rnum = 6,
	      type = {msg, 'mesos.v1.Value.Text'},
	      occurrence = optional, opts = []}]},
     {{msg, 'mesos.v1.ContainerID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    ['mesos.v1.Label', 'mesos.v1.Labels',
     'mesos.v1.Image.AppC', 'mesos.v1.Image',
     'mesos.v1.ContainerInfo.MesosInfo',
     'mesos.v1.Parameter',
     'mesos.v1.ContainerInfo.DockerInfo.PortMapping',
     'mesos.v1.ContainerInfo.DockerInfo', 'mesos.v1.Volume',
     'mesos.v1.ContainerInfo', 'mesos.v1.AgentID',
     'mesos.v1.Value.Text', 'mesos.v1.Value.Set',
     'mesos.v1.Value.Range', 'mesos.v1.Value.Ranges',
     'mesos.v1.Value.Scalar', 'mesos.v1.Attribute',
     'mesos.v1.Resource.RevocableInfo',
     'mesos.v1.Resource.DiskInfo.Persistence',
     'mesos.v1.Resource.DiskInfo',
     'mesos.v1.Resource.ReservationInfo',
     'mesos.v1.Resource', 'mesos.v1.AgentInfo',
     'mesos.v1.Request', 'mesos.v1.scheduler.Call.Request',
     'mesos.v1.ExecutorID',
     'mesos.v1.scheduler.Call.Message', 'mesos.v1.TaskID',
     'mesos.v1.scheduler.Call.Reconcile.Task',
     'mesos.v1.scheduler.Call.Reconcile',
     'mesos.v1.scheduler.Call.Acknowledge',
     'mesos.v1.scheduler.Call.Shutdown',
     'mesos.v1.scheduler.Call.Kill', 'mesos.v1.Filters',
     'mesos.v1.OfferID', 'mesos.v1.scheduler.Call.Decline',
     'mesos.v1.Offer.Operation.Destroy',
     'mesos.v1.Offer.Operation.Create',
     'mesos.v1.Offer.Operation.Unreserve',
     'mesos.v1.Offer.Operation.Reserve', 'mesos.v1.Port',
     'mesos.v1.Ports', 'mesos.v1.DiscoveryInfo',
     'mesos.v1.Environment.Variable', 'mesos.v1.Environment',
     'mesos.v1.CommandInfo.URI',
     'mesos.v1.CommandInfo.ContainerInfo',
     'mesos.v1.CommandInfo', 'mesos.v1.HealthCheck.HTTP',
     'mesos.v1.HealthCheck', 'mesos.v1.FrameworkID',
     'mesos.v1.ExecutorInfo', 'mesos.v1.TaskInfo',
     'mesos.v1.Offer.Operation.Launch',
     'mesos.v1.Offer.Operation',
     'mesos.v1.scheduler.Call.Accept',
     'mesos.v1.FrameworkInfo.Capability',
     'mesos.v1.FrameworkInfo',
     'mesos.v1.scheduler.Call.Subscribe',
     'mesos.v1.scheduler.Call', 'mesos.v1.RateLimit',
     'mesos.v1.RateLimits', 'mesos.v1.Parameters',
     'mesos.v1.Address', 'mesos.v1.URL', 'mesos.v1.Offer',
     'mesos.v1.Credential', 'mesos.v1.ACL.Entity',
     'mesos.v1.TaskStatus',
     'mesos.v1.scheduler.Event.Update',
     'mesos.v1.scheduler.Event.Error',
     'mesos.v1.scheduler.Event.Failure',
     'mesos.v1.scheduler.Event.Message',
     'mesos.v1.scheduler.Event.Rescind',
     'mesos.v1.scheduler.Event.Offers',
     'mesos.v1.scheduler.Event.Subscribed',
     'mesos.v1.scheduler.Event',
     'mesos.v1.TrafficControlStatistics',
     'mesos.v1.PerfStatistics',
     'mesos.v1.ResourceStatistics', 'mesos.v1.Credentials',
     'mesos.v1.ResourceUsage.Executor', 'mesos.v1.ACL',
     'mesos.v1.ACL.RunTask',
     'mesos.v1.ACL.RegisterFramework',
     'mesos.v1.ACL.ShutdownFramework', 'mesos.v1.ACLs',
     'mesos.v1.MasterInfo', 'mesos.v1.ResourceUsage',
     'mesos.v1.Value', 'mesos.v1.ContainerID'].


get_enum_names() ->
    ['mesos.v1.scheduler.Event.Type',
     'mesos.v1.scheduler.Call.Type', 'mesos.v1.Status',
     'mesos.v1.FrameworkInfo.Capability.Type',
     'mesos.v1.Value.Type', 'mesos.v1.Offer.Operation.Type',
     'mesos.v1.TaskState', 'mesos.v1.TaskStatus.Source',
     'mesos.v1.TaskStatus.Reason',
     'mesos.v1.ACL.Entity.Type', 'mesos.v1.Image.Type',
     'mesos.v1.Volume.Mode', 'mesos.v1.ContainerInfo.Type',
     'mesos.v1.ContainerInfo.DockerInfo.Network',
     'mesos.v1.DiscoveryInfo.Visibility'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('mesos.v1.Label') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.Labels') ->
    [#field{name = labels, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.Label'}, occurrence = repeated,
	    opts = []}];
find_msg_def('mesos.v1.Image.AppC') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = labels, fnum = 3, rnum = 4,
	    type = {msg, 'mesos.v1.Labels'}, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.Image') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'mesos.v1.Image.Type'},
	    occurrence = required, opts = []},
     #field{name = appc, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.Image.AppC'},
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.ContainerInfo.MesosInfo') ->
    [#field{name = image, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.Image'}, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.Parameter') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.ContainerInfo.DockerInfo.PortMapping') ->
    [#field{name = host_port, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = container_port, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []},
     #field{name = protocol, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('mesos.v1.ContainerInfo.DockerInfo') ->
    [#field{name = image, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = network, fnum = 2, rnum = 3,
	    type =
		{enum, 'mesos.v1.ContainerInfo.DockerInfo.Network'},
	    occurrence = optional, opts = [{default, 'HOST'}]},
     #field{name = port_mappings, fnum = 3, rnum = 4,
	    type =
		{msg, 'mesos.v1.ContainerInfo.DockerInfo.PortMapping'},
	    occurrence = repeated, opts = []},
     #field{name = privileged, fnum = 4, rnum = 5,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = parameters, fnum = 5, rnum = 6,
	    type = {msg, 'mesos.v1.Parameter'},
	    occurrence = repeated, opts = []},
     #field{name = force_pull_image, fnum = 6, rnum = 7,
	    type = bool, occurrence = optional, opts = []}];
find_msg_def('mesos.v1.Volume') ->
    [#field{name = mode, fnum = 3, rnum = 2,
	    type = {enum, 'mesos.v1.Volume.Mode'},
	    occurrence = required, opts = []},
     #field{name = container_path, fnum = 1, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = host_path, fnum = 2, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = image, fnum = 4, rnum = 5,
	    type = {msg, 'mesos.v1.Image'}, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.ContainerInfo') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'mesos.v1.ContainerInfo.Type'},
	    occurrence = required, opts = []},
     #field{name = volumes, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.Volume'}, occurrence = repeated,
	    opts = []},
     #field{name = hostname, fnum = 4, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = docker, fnum = 3, rnum = 5,
	    type = {msg, 'mesos.v1.ContainerInfo.DockerInfo'},
	    occurrence = optional, opts = []},
     #field{name = mesos, fnum = 5, rnum = 6,
	    type = {msg, 'mesos.v1.ContainerInfo.MesosInfo'},
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.AgentID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.Value.Text') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.Value.Set') ->
    [#field{name = item, fnum = 1, rnum = 2, type = string,
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.Value.Range') ->
    [#field{name = 'begin', fnum = 1, rnum = 2,
	    type = uint64, occurrence = required, opts = []},
     #field{name = 'end', fnum = 2, rnum = 3, type = uint64,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.Value.Ranges') ->
    [#field{name = range, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.Value.Range'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.Value.Scalar') ->
    [#field{name = value, fnum = 1, rnum = 2, type = double,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.Attribute') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 2, rnum = 3,
	    type = {enum, 'mesos.v1.Value.Type'},
	    occurrence = required, opts = []},
     #field{name = scalar, fnum = 3, rnum = 4,
	    type = {msg, 'mesos.v1.Value.Scalar'},
	    occurrence = optional, opts = []},
     #field{name = ranges, fnum = 4, rnum = 5,
	    type = {msg, 'mesos.v1.Value.Ranges'},
	    occurrence = optional, opts = []},
     #field{name = set, fnum = 6, rnum = 6,
	    type = {msg, 'mesos.v1.Value.Set'},
	    occurrence = optional, opts = []},
     #field{name = text, fnum = 5, rnum = 7,
	    type = {msg, 'mesos.v1.Value.Text'},
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.Resource.RevocableInfo') -> [];
find_msg_def('mesos.v1.Resource.DiskInfo.Persistence') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.Resource.DiskInfo') ->
    [#field{name = persistence, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.Resource.DiskInfo.Persistence'},
	    occurrence = optional, opts = []},
     #field{name = volume, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.Volume'}, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.Resource.ReservationInfo') ->
    [#field{name = principal, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def('mesos.v1.Resource') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 2, rnum = 3,
	    type = {enum, 'mesos.v1.Value.Type'},
	    occurrence = required, opts = []},
     #field{name = scalar, fnum = 3, rnum = 4,
	    type = {msg, 'mesos.v1.Value.Scalar'},
	    occurrence = optional, opts = []},
     #field{name = ranges, fnum = 4, rnum = 5,
	    type = {msg, 'mesos.v1.Value.Ranges'},
	    occurrence = optional, opts = []},
     #field{name = set, fnum = 5, rnum = 6,
	    type = {msg, 'mesos.v1.Value.Set'},
	    occurrence = optional, opts = []},
     #field{name = role, fnum = 6, rnum = 7, type = string,
	    occurrence = optional, opts = [{default, "*"}]},
     #field{name = reservation, fnum = 8, rnum = 8,
	    type = {msg, 'mesos.v1.Resource.ReservationInfo'},
	    occurrence = optional, opts = []},
     #field{name = disk, fnum = 7, rnum = 9,
	    type = {msg, 'mesos.v1.Resource.DiskInfo'},
	    occurrence = optional, opts = []},
     #field{name = revocable, fnum = 9, rnum = 10,
	    type = {msg, 'mesos.v1.Resource.RevocableInfo'},
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.AgentInfo') ->
    [#field{name = hostname, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = port, fnum = 8, rnum = 3, type = int32,
	    occurrence = optional, opts = [{default, 5051}]},
     #field{name = resources, fnum = 3, rnum = 4,
	    type = {msg, 'mesos.v1.Resource'},
	    occurrence = repeated, opts = []},
     #field{name = attributes, fnum = 5, rnum = 5,
	    type = {msg, 'mesos.v1.Attribute'},
	    occurrence = repeated, opts = []},
     #field{name = id, fnum = 6, rnum = 6,
	    type = {msg, 'mesos.v1.AgentID'}, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.Request') ->
    [#field{name = agent_id, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.AgentID'}, occurrence = optional,
	    opts = []},
     #field{name = resources, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.Resource'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.scheduler.Call.Request') ->
    [#field{name = requests, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.Request'}, occurrence = repeated,
	    opts = []}];
find_msg_def('mesos.v1.ExecutorID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.scheduler.Call.Message') ->
    [#field{name = agent_id, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.AgentID'}, occurrence = required,
	    opts = []},
     #field{name = executor_id, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.ExecutorID'},
	    occurrence = required, opts = []},
     #field{name = data, fnum = 3, rnum = 4, type = bytes,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.TaskID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.scheduler.Call.Reconcile.Task') ->
    [#field{name = task_id, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.TaskID'}, occurrence = required,
	    opts = []},
     #field{name = agent_id, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.AgentID'}, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.scheduler.Call.Reconcile') ->
    [#field{name = tasks, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.scheduler.Call.Reconcile.Task'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.scheduler.Call.Acknowledge') ->
    [#field{name = agent_id, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.AgentID'}, occurrence = required,
	    opts = []},
     #field{name = task_id, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.TaskID'}, occurrence = required,
	    opts = []},
     #field{name = uuid, fnum = 3, rnum = 4, type = bytes,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.scheduler.Call.Shutdown') ->
    [#field{name = executor_id, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.ExecutorID'},
	    occurrence = required, opts = []},
     #field{name = agent_id, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.AgentID'}, occurrence = required,
	    opts = []}];
find_msg_def('mesos.v1.scheduler.Call.Kill') ->
    [#field{name = task_id, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.TaskID'}, occurrence = required,
	    opts = []},
     #field{name = agent_id, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.AgentID'}, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.Filters') ->
    [#field{name = refuse_seconds, fnum = 1, rnum = 2,
	    type = double, occurrence = optional,
	    opts = [{default, 5.0}]}];
find_msg_def('mesos.v1.OfferID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.scheduler.Call.Decline') ->
    [#field{name = offer_ids, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.OfferID'}, occurrence = repeated,
	    opts = []},
     #field{name = filters, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.Filters'}, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.Offer.Operation.Destroy') ->
    [#field{name = volumes, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.Resource'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.Offer.Operation.Create') ->
    [#field{name = volumes, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.Resource'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.Offer.Operation.Unreserve') ->
    [#field{name = resources, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.Resource'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.Offer.Operation.Reserve') ->
    [#field{name = resources, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.Resource'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.Port') ->
    [#field{name = number, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = protocol, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('mesos.v1.Ports') ->
    [#field{name = ports, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.Port'}, occurrence = repeated,
	    opts = []}];
find_msg_def('mesos.v1.DiscoveryInfo') ->
    [#field{name = visibility, fnum = 1, rnum = 2,
	    type = {enum, 'mesos.v1.DiscoveryInfo.Visibility'},
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = environment, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = location, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = version, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = ports, fnum = 6, rnum = 7,
	    type = {msg, 'mesos.v1.Ports'}, occurrence = optional,
	    opts = []},
     #field{name = labels, fnum = 7, rnum = 8,
	    type = {msg, 'mesos.v1.Labels'}, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.Environment.Variable') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.Environment') ->
    [#field{name = variables, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.Environment.Variable'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.CommandInfo.URI') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = executable, fnum = 2, rnum = 3,
	    type = bool, occurrence = optional, opts = []},
     #field{name = extract, fnum = 3, rnum = 4, type = bool,
	    occurrence = optional, opts = [{default, true}]},
     #field{name = cache, fnum = 4, rnum = 5, type = bool,
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.CommandInfo.ContainerInfo') ->
    [#field{name = image, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = options, fnum = 2, rnum = 3,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.CommandInfo') ->
    [#field{name = container, fnum = 4, rnum = 2,
	    type = {msg, 'mesos.v1.CommandInfo.ContainerInfo'},
	    occurrence = optional, opts = []},
     #field{name = uris, fnum = 1, rnum = 3,
	    type = {msg, 'mesos.v1.CommandInfo.URI'},
	    occurrence = repeated, opts = []},
     #field{name = environment, fnum = 2, rnum = 4,
	    type = {msg, 'mesos.v1.Environment'},
	    occurrence = optional, opts = []},
     #field{name = shell, fnum = 6, rnum = 5, type = bool,
	    occurrence = optional, opts = [{default, true}]},
     #field{name = value, fnum = 3, rnum = 6, type = string,
	    occurrence = optional, opts = []},
     #field{name = arguments, fnum = 7, rnum = 7,
	    type = string, occurrence = repeated, opts = []},
     #field{name = user, fnum = 5, rnum = 8, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.HealthCheck.HTTP') ->
    [#field{name = port, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = path, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = [{default, "/"}]},
     #field{name = statuses, fnum = 4, rnum = 4,
	    type = uint32, occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.HealthCheck') ->
    [#field{name = http, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.HealthCheck.HTTP'},
	    occurrence = optional, opts = []},
     #field{name = delay_seconds, fnum = 2, rnum = 3,
	    type = double, occurrence = optional,
	    opts = [{default, 1.5e+1}]},
     #field{name = interval_seconds, fnum = 3, rnum = 4,
	    type = double, occurrence = optional,
	    opts = [{default, 1.0e+1}]},
     #field{name = timeout_seconds, fnum = 4, rnum = 5,
	    type = double, occurrence = optional,
	    opts = [{default, 2.0e+1}]},
     #field{name = consecutive_failures, fnum = 5, rnum = 6,
	    type = uint32, occurrence = optional,
	    opts = [{default, 3}]},
     #field{name = grace_period_seconds, fnum = 6, rnum = 7,
	    type = double, occurrence = optional,
	    opts = [{default, 1.0e+1}]},
     #field{name = command, fnum = 7, rnum = 8,
	    type = {msg, 'mesos.v1.CommandInfo'},
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.FrameworkID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.ExecutorInfo') ->
    [#field{name = executor_id, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.ExecutorID'},
	    occurrence = required, opts = []},
     #field{name = framework_id, fnum = 8, rnum = 3,
	    type = {msg, 'mesos.v1.FrameworkID'},
	    occurrence = optional, opts = []},
     #field{name = command, fnum = 7, rnum = 4,
	    type = {msg, 'mesos.v1.CommandInfo'},
	    occurrence = required, opts = []},
     #field{name = container, fnum = 11, rnum = 5,
	    type = {msg, 'mesos.v1.ContainerInfo'},
	    occurrence = optional, opts = []},
     #field{name = resources, fnum = 5, rnum = 6,
	    type = {msg, 'mesos.v1.Resource'},
	    occurrence = repeated, opts = []},
     #field{name = name, fnum = 9, rnum = 7, type = string,
	    occurrence = optional, opts = []},
     #field{name = source, fnum = 10, rnum = 8,
	    type = string, occurrence = optional, opts = []},
     #field{name = data, fnum = 4, rnum = 9, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = discovery, fnum = 12, rnum = 10,
	    type = {msg, 'mesos.v1.DiscoveryInfo'},
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.TaskInfo') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = task_id, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.TaskID'}, occurrence = required,
	    opts = []},
     #field{name = agent_id, fnum = 3, rnum = 4,
	    type = {msg, 'mesos.v1.AgentID'}, occurrence = required,
	    opts = []},
     #field{name = resources, fnum = 4, rnum = 5,
	    type = {msg, 'mesos.v1.Resource'},
	    occurrence = repeated, opts = []},
     #field{name = executor, fnum = 5, rnum = 6,
	    type = {msg, 'mesos.v1.ExecutorInfo'},
	    occurrence = optional, opts = []},
     #field{name = command, fnum = 7, rnum = 7,
	    type = {msg, 'mesos.v1.CommandInfo'},
	    occurrence = optional, opts = []},
     #field{name = container, fnum = 9, rnum = 8,
	    type = {msg, 'mesos.v1.ContainerInfo'},
	    occurrence = optional, opts = []},
     #field{name = data, fnum = 6, rnum = 9, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = health_check, fnum = 8, rnum = 10,
	    type = {msg, 'mesos.v1.HealthCheck'},
	    occurrence = optional, opts = []},
     #field{name = labels, fnum = 10, rnum = 11,
	    type = {msg, 'mesos.v1.Labels'}, occurrence = optional,
	    opts = []},
     #field{name = discovery, fnum = 11, rnum = 12,
	    type = {msg, 'mesos.v1.DiscoveryInfo'},
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.Offer.Operation.Launch') ->
    [#field{name = task_infos, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.TaskInfo'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.Offer.Operation') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'mesos.v1.Offer.Operation.Type'},
	    occurrence = required, opts = []},
     #field{name = launch, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.Offer.Operation.Launch'},
	    occurrence = optional, opts = []},
     #field{name = reserve, fnum = 3, rnum = 4,
	    type = {msg, 'mesos.v1.Offer.Operation.Reserve'},
	    occurrence = optional, opts = []},
     #field{name = unreserve, fnum = 4, rnum = 5,
	    type = {msg, 'mesos.v1.Offer.Operation.Unreserve'},
	    occurrence = optional, opts = []},
     #field{name = create, fnum = 5, rnum = 6,
	    type = {msg, 'mesos.v1.Offer.Operation.Create'},
	    occurrence = optional, opts = []},
     #field{name = destroy, fnum = 6, rnum = 7,
	    type = {msg, 'mesos.v1.Offer.Operation.Destroy'},
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.scheduler.Call.Accept') ->
    [#field{name = offer_ids, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.OfferID'}, occurrence = repeated,
	    opts = []},
     #field{name = operations, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.Offer.Operation'},
	    occurrence = repeated, opts = []},
     #field{name = filters, fnum = 3, rnum = 4,
	    type = {msg, 'mesos.v1.Filters'}, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.FrameworkInfo.Capability') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'mesos.v1.FrameworkInfo.Capability.Type'},
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.FrameworkInfo') ->
    [#field{name = user, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 3, rnum = 4,
	    type = {msg, 'mesos.v1.FrameworkID'},
	    occurrence = optional, opts = []},
     #field{name = failover_timeout, fnum = 4, rnum = 5,
	    type = double, occurrence = optional,
	    opts = [{default, 0.0}]},
     #field{name = checkpoint, fnum = 5, rnum = 6,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = role, fnum = 6, rnum = 7, type = string,
	    occurrence = optional, opts = [{default, "*"}]},
     #field{name = hostname, fnum = 7, rnum = 8,
	    type = string, occurrence = optional, opts = []},
     #field{name = principal, fnum = 8, rnum = 9,
	    type = string, occurrence = optional, opts = []},
     #field{name = webui_url, fnum = 9, rnum = 10,
	    type = string, occurrence = optional, opts = []},
     #field{name = capabilities, fnum = 10, rnum = 11,
	    type = {msg, 'mesos.v1.FrameworkInfo.Capability'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.scheduler.Call.Subscribe') ->
    [#field{name = framework_info, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.FrameworkInfo'},
	    occurrence = required, opts = []},
     #field{name = force, fnum = 2, rnum = 3, type = bool,
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.scheduler.Call') ->
    [#field{name = framework_id, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.FrameworkID'},
	    occurrence = optional, opts = []},
     #field{name = type, fnum = 2, rnum = 3,
	    type = {enum, 'mesos.v1.scheduler.Call.Type'},
	    occurrence = required, opts = []},
     #field{name = subscribe, fnum = 3, rnum = 4,
	    type = {msg, 'mesos.v1.scheduler.Call.Subscribe'},
	    occurrence = optional, opts = []},
     #field{name = accept, fnum = 4, rnum = 5,
	    type = {msg, 'mesos.v1.scheduler.Call.Accept'},
	    occurrence = optional, opts = []},
     #field{name = decline, fnum = 5, rnum = 6,
	    type = {msg, 'mesos.v1.scheduler.Call.Decline'},
	    occurrence = optional, opts = []},
     #field{name = kill, fnum = 6, rnum = 7,
	    type = {msg, 'mesos.v1.scheduler.Call.Kill'},
	    occurrence = optional, opts = []},
     #field{name = shutdown, fnum = 7, rnum = 8,
	    type = {msg, 'mesos.v1.scheduler.Call.Shutdown'},
	    occurrence = optional, opts = []},
     #field{name = acknowledge, fnum = 8, rnum = 9,
	    type = {msg, 'mesos.v1.scheduler.Call.Acknowledge'},
	    occurrence = optional, opts = []},
     #field{name = reconcile, fnum = 9, rnum = 10,
	    type = {msg, 'mesos.v1.scheduler.Call.Reconcile'},
	    occurrence = optional, opts = []},
     #field{name = message, fnum = 10, rnum = 11,
	    type = {msg, 'mesos.v1.scheduler.Call.Message'},
	    occurrence = optional, opts = []},
     #field{name = request, fnum = 11, rnum = 12,
	    type = {msg, 'mesos.v1.scheduler.Call.Request'},
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.RateLimit') ->
    [#field{name = qps, fnum = 1, rnum = 2, type = double,
	    occurrence = optional, opts = []},
     #field{name = principal, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = capacity, fnum = 3, rnum = 4,
	    type = uint64, occurrence = optional, opts = []}];
find_msg_def('mesos.v1.RateLimits') ->
    [#field{name = limits, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.RateLimit'},
	    occurrence = repeated, opts = []},
     #field{name = aggregate_default_qps, fnum = 2, rnum = 3,
	    type = double, occurrence = optional, opts = []},
     #field{name = aggregate_default_capacity, fnum = 3,
	    rnum = 4, type = uint64, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.Parameters') ->
    [#field{name = parameter, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.Parameter'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.Address') ->
    [#field{name = hostname, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = ip, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = port, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.URL') ->
    [#field{name = scheme, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = address, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.Address'}, occurrence = required,
	    opts = []},
     #field{name = path, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = query, fnum = 4, rnum = 5,
	    type = {msg, 'mesos.v1.Parameter'},
	    occurrence = repeated, opts = []},
     #field{name = fragment, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('mesos.v1.Offer') ->
    [#field{name = id, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.OfferID'}, occurrence = required,
	    opts = []},
     #field{name = framework_id, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.FrameworkID'},
	    occurrence = required, opts = []},
     #field{name = agent_id, fnum = 3, rnum = 4,
	    type = {msg, 'mesos.v1.AgentID'}, occurrence = required,
	    opts = []},
     #field{name = hostname, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []},
     #field{name = url, fnum = 8, rnum = 6,
	    type = {msg, 'mesos.v1.URL'}, occurrence = optional,
	    opts = []},
     #field{name = resources, fnum = 5, rnum = 7,
	    type = {msg, 'mesos.v1.Resource'},
	    occurrence = repeated, opts = []},
     #field{name = attributes, fnum = 7, rnum = 8,
	    type = {msg, 'mesos.v1.Attribute'},
	    occurrence = repeated, opts = []},
     #field{name = executor_ids, fnum = 6, rnum = 9,
	    type = {msg, 'mesos.v1.ExecutorID'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.Credential') ->
    [#field{name = principal, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = secret, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.ACL.Entity') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'mesos.v1.ACL.Entity.Type'},
	    occurrence = optional, opts = [{default, 'SOME'}]},
     #field{name = values, fnum = 2, rnum = 3, type = string,
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.TaskStatus') ->
    [#field{name = task_id, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.TaskID'}, occurrence = required,
	    opts = []},
     #field{name = state, fnum = 2, rnum = 3,
	    type = {enum, 'mesos.v1.TaskState'},
	    occurrence = required, opts = []},
     #field{name = message, fnum = 4, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = source, fnum = 9, rnum = 5,
	    type = {enum, 'mesos.v1.TaskStatus.Source'},
	    occurrence = optional, opts = []},
     #field{name = reason, fnum = 10, rnum = 6,
	    type = {enum, 'mesos.v1.TaskStatus.Reason'},
	    occurrence = optional, opts = []},
     #field{name = data, fnum = 3, rnum = 7, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = agent_id, fnum = 5, rnum = 8,
	    type = {msg, 'mesos.v1.AgentID'}, occurrence = optional,
	    opts = []},
     #field{name = executor_id, fnum = 7, rnum = 9,
	    type = {msg, 'mesos.v1.ExecutorID'},
	    occurrence = optional, opts = []},
     #field{name = timestamp, fnum = 6, rnum = 10,
	    type = double, occurrence = optional, opts = []},
     #field{name = uuid, fnum = 11, rnum = 11, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = healthy, fnum = 8, rnum = 12, type = bool,
	    occurrence = optional, opts = []},
     #field{name = labels, fnum = 12, rnum = 13,
	    type = {msg, 'mesos.v1.Labels'}, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.scheduler.Event.Update') ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.TaskStatus'},
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.scheduler.Event.Error') ->
    [#field{name = message, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def('mesos.v1.scheduler.Event.Failure') ->
    [#field{name = agent_id, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.AgentID'}, occurrence = optional,
	    opts = []},
     #field{name = executor_id, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.ExecutorID'},
	    occurrence = optional, opts = []},
     #field{name = status, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.scheduler.Event.Message') ->
    [#field{name = agent_id, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.AgentID'}, occurrence = required,
	    opts = []},
     #field{name = executor_id, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.ExecutorID'},
	    occurrence = required, opts = []},
     #field{name = data, fnum = 3, rnum = 4, type = bytes,
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.scheduler.Event.Rescind') ->
    [#field{name = offer_id, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.OfferID'}, occurrence = required,
	    opts = []}];
find_msg_def('mesos.v1.scheduler.Event.Offers') ->
    [#field{name = offers, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.Offer'}, occurrence = repeated,
	    opts = []}];
find_msg_def('mesos.v1.scheduler.Event.Subscribed') ->
    [#field{name = framework_id, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.FrameworkID'},
	    occurrence = required, opts = []},
     #field{name = heartbeat_interval_seconds, fnum = 2,
	    rnum = 3, type = double, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.scheduler.Event') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'mesos.v1.scheduler.Event.Type'},
	    occurrence = required, opts = []},
     #field{name = subscribed, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.scheduler.Event.Subscribed'},
	    occurrence = optional, opts = []},
     #field{name = offers, fnum = 3, rnum = 4,
	    type = {msg, 'mesos.v1.scheduler.Event.Offers'},
	    occurrence = optional, opts = []},
     #field{name = rescind, fnum = 4, rnum = 5,
	    type = {msg, 'mesos.v1.scheduler.Event.Rescind'},
	    occurrence = optional, opts = []},
     #field{name = update, fnum = 5, rnum = 6,
	    type = {msg, 'mesos.v1.scheduler.Event.Update'},
	    occurrence = optional, opts = []},
     #field{name = message, fnum = 6, rnum = 7,
	    type = {msg, 'mesos.v1.scheduler.Event.Message'},
	    occurrence = optional, opts = []},
     #field{name = failure, fnum = 7, rnum = 8,
	    type = {msg, 'mesos.v1.scheduler.Event.Failure'},
	    occurrence = optional, opts = []},
     #field{name = error, fnum = 8, rnum = 9,
	    type = {msg, 'mesos.v1.scheduler.Event.Error'},
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.TrafficControlStatistics') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = backlog, fnum = 2, rnum = 3,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = bytes, fnum = 3, rnum = 4, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = drops, fnum = 4, rnum = 5, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = overlimits, fnum = 5, rnum = 6,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = packets, fnum = 6, rnum = 7,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = qlen, fnum = 7, rnum = 8, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = ratebps, fnum = 8, rnum = 9,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = ratepps, fnum = 9, rnum = 10,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = requeues, fnum = 10, rnum = 11,
	    type = uint64, occurrence = optional, opts = []}];
find_msg_def('mesos.v1.PerfStatistics') ->
    [#field{name = timestamp, fnum = 1, rnum = 2,
	    type = double, occurrence = required, opts = []},
     #field{name = duration, fnum = 2, rnum = 3,
	    type = double, occurrence = required, opts = []},
     #field{name = cycles, fnum = 3, rnum = 4, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = stalled_cycles_frontend, fnum = 4,
	    rnum = 5, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = stalled_cycles_backend, fnum = 5,
	    rnum = 6, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = instructions, fnum = 6, rnum = 7,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = cache_references, fnum = 7, rnum = 8,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = cache_misses, fnum = 8, rnum = 9,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = branches, fnum = 9, rnum = 10,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = branch_misses, fnum = 10, rnum = 11,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = bus_cycles, fnum = 11, rnum = 12,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = ref_cycles, fnum = 12, rnum = 13,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = cpu_clock, fnum = 13, rnum = 14,
	    type = double, occurrence = optional, opts = []},
     #field{name = task_clock, fnum = 14, rnum = 15,
	    type = double, occurrence = optional, opts = []},
     #field{name = page_faults, fnum = 15, rnum = 16,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = minor_faults, fnum = 16, rnum = 17,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = major_faults, fnum = 17, rnum = 18,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = context_switches, fnum = 18, rnum = 19,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = cpu_migrations, fnum = 19, rnum = 20,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = alignment_faults, fnum = 20, rnum = 21,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = emulation_faults, fnum = 21, rnum = 22,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = l1_dcache_loads, fnum = 22, rnum = 23,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = l1_dcache_load_misses, fnum = 23,
	    rnum = 24, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = l1_dcache_stores, fnum = 24, rnum = 25,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = l1_dcache_store_misses, fnum = 25,
	    rnum = 26, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = l1_dcache_prefetches, fnum = 26,
	    rnum = 27, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = l1_dcache_prefetch_misses, fnum = 27,
	    rnum = 28, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = l1_icache_loads, fnum = 28, rnum = 29,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = l1_icache_load_misses, fnum = 29,
	    rnum = 30, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = l1_icache_prefetches, fnum = 30,
	    rnum = 31, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = l1_icache_prefetch_misses, fnum = 31,
	    rnum = 32, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = llc_loads, fnum = 32, rnum = 33,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = llc_load_misses, fnum = 33, rnum = 34,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = llc_stores, fnum = 34, rnum = 35,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = llc_store_misses, fnum = 35, rnum = 36,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = llc_prefetches, fnum = 36, rnum = 37,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = llc_prefetch_misses, fnum = 37, rnum = 38,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = dtlb_loads, fnum = 38, rnum = 39,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = dtlb_load_misses, fnum = 39, rnum = 40,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = dtlb_stores, fnum = 40, rnum = 41,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = dtlb_store_misses, fnum = 41, rnum = 42,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = dtlb_prefetches, fnum = 42, rnum = 43,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = dtlb_prefetch_misses, fnum = 43,
	    rnum = 44, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = itlb_loads, fnum = 44, rnum = 45,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = itlb_load_misses, fnum = 45, rnum = 46,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = branch_loads, fnum = 46, rnum = 47,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = branch_load_misses, fnum = 47, rnum = 48,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = node_loads, fnum = 48, rnum = 49,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = node_load_misses, fnum = 49, rnum = 50,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = node_stores, fnum = 50, rnum = 51,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = node_store_misses, fnum = 51, rnum = 52,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = node_prefetches, fnum = 52, rnum = 53,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = node_prefetch_misses, fnum = 53,
	    rnum = 54, type = uint64, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.ResourceStatistics') ->
    [#field{name = timestamp, fnum = 1, rnum = 2,
	    type = double, occurrence = required, opts = []},
     #field{name = processes, fnum = 30, rnum = 3,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = threads, fnum = 31, rnum = 4,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = cpus_user_time_secs, fnum = 2, rnum = 5,
	    type = double, occurrence = optional, opts = []},
     #field{name = cpus_system_time_secs, fnum = 3, rnum = 6,
	    type = double, occurrence = optional, opts = []},
     #field{name = cpus_limit, fnum = 4, rnum = 7,
	    type = double, occurrence = optional, opts = []},
     #field{name = cpus_nr_periods, fnum = 7, rnum = 8,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = cpus_nr_throttled, fnum = 8, rnum = 9,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = cpus_throttled_time_secs, fnum = 9,
	    rnum = 10, type = double, occurrence = optional,
	    opts = []},
     #field{name = mem_total_bytes, fnum = 36, rnum = 11,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_total_memsw_bytes, fnum = 37,
	    rnum = 12, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = mem_limit_bytes, fnum = 6, rnum = 13,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_soft_limit_bytes, fnum = 38,
	    rnum = 14, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = mem_file_bytes, fnum = 10, rnum = 15,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_anon_bytes, fnum = 11, rnum = 16,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_cache_bytes, fnum = 39, rnum = 17,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_rss_bytes, fnum = 5, rnum = 18,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_mapped_file_bytes, fnum = 12,
	    rnum = 19, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = mem_swap_bytes, fnum = 40, rnum = 20,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_low_pressure_counter, fnum = 32,
	    rnum = 21, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = mem_medium_pressure_counter, fnum = 33,
	    rnum = 22, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = mem_critical_pressure_counter, fnum = 34,
	    rnum = 23, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = disk_limit_bytes, fnum = 26, rnum = 24,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = disk_used_bytes, fnum = 27, rnum = 25,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = perf, fnum = 13, rnum = 26,
	    type = {msg, 'mesos.v1.PerfStatistics'},
	    occurrence = optional, opts = []},
     #field{name = net_rx_packets, fnum = 14, rnum = 27,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_rx_bytes, fnum = 15, rnum = 28,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_rx_errors, fnum = 16, rnum = 29,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_rx_dropped, fnum = 17, rnum = 30,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_tx_packets, fnum = 18, rnum = 31,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_tx_bytes, fnum = 19, rnum = 32,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_tx_errors, fnum = 20, rnum = 33,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_tx_dropped, fnum = 21, rnum = 34,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_tcp_rtt_microsecs_p50, fnum = 22,
	    rnum = 35, type = double, occurrence = optional,
	    opts = []},
     #field{name = net_tcp_rtt_microsecs_p90, fnum = 23,
	    rnum = 36, type = double, occurrence = optional,
	    opts = []},
     #field{name = net_tcp_rtt_microsecs_p95, fnum = 24,
	    rnum = 37, type = double, occurrence = optional,
	    opts = []},
     #field{name = net_tcp_rtt_microsecs_p99, fnum = 25,
	    rnum = 38, type = double, occurrence = optional,
	    opts = []},
     #field{name = net_tcp_active_connections, fnum = 28,
	    rnum = 39, type = double, occurrence = optional,
	    opts = []},
     #field{name = net_tcp_time_wait_connections, fnum = 29,
	    rnum = 40, type = double, occurrence = optional,
	    opts = []},
     #field{name = net_traffic_control_statistics, fnum = 35,
	    rnum = 41,
	    type = {msg, 'mesos.v1.TrafficControlStatistics'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.Credentials') ->
    [#field{name = credentials, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.Credential'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.ResourceUsage.Executor') ->
    [#field{name = executor_info, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.ExecutorInfo'},
	    occurrence = required, opts = []},
     #field{name = allocated, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.Resource'},
	    occurrence = repeated, opts = []},
     #field{name = statistics, fnum = 3, rnum = 4,
	    type = {msg, 'mesos.v1.ResourceStatistics'},
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.ACL') -> [];
find_msg_def('mesos.v1.ACL.RunTask') ->
    [#field{name = principals, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.ACL.Entity'},
	    occurrence = required, opts = []},
     #field{name = users, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.ACL.Entity'},
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.ACL.RegisterFramework') ->
    [#field{name = principals, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.ACL.Entity'},
	    occurrence = required, opts = []},
     #field{name = roles, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.ACL.Entity'},
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.ACL.ShutdownFramework') ->
    [#field{name = principals, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.ACL.Entity'},
	    occurrence = required, opts = []},
     #field{name = framework_principals, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.ACL.Entity'},
	    occurrence = required, opts = []}];
find_msg_def('mesos.v1.ACLs') ->
    [#field{name = permissive, fnum = 1, rnum = 2,
	    type = bool, occurrence = optional,
	    opts = [{default, true}]},
     #field{name = register_frameworks, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.ACL.RegisterFramework'},
	    occurrence = repeated, opts = []},
     #field{name = run_tasks, fnum = 3, rnum = 4,
	    type = {msg, 'mesos.v1.ACL.RunTask'},
	    occurrence = repeated, opts = []},
     #field{name = shutdown_frameworks, fnum = 4, rnum = 5,
	    type = {msg, 'mesos.v1.ACL.ShutdownFramework'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.MasterInfo') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = ip, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = port, fnum = 3, rnum = 4, type = uint32,
	    occurrence = required, opts = [{default, 5050}]},
     #field{name = pid, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = hostname, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = version, fnum = 6, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = address, fnum = 7, rnum = 8,
	    type = {msg, 'mesos.v1.Address'}, occurrence = optional,
	    opts = []}];
find_msg_def('mesos.v1.ResourceUsage') ->
    [#field{name = executors, fnum = 1, rnum = 2,
	    type = {msg, 'mesos.v1.ResourceUsage.Executor'},
	    occurrence = repeated, opts = []},
     #field{name = total, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.Resource'},
	    occurrence = repeated, opts = []}];
find_msg_def('mesos.v1.Value') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'mesos.v1.Value.Type'},
	    occurrence = required, opts = []},
     #field{name = scalar, fnum = 2, rnum = 3,
	    type = {msg, 'mesos.v1.Value.Scalar'},
	    occurrence = optional, opts = []},
     #field{name = ranges, fnum = 3, rnum = 4,
	    type = {msg, 'mesos.v1.Value.Ranges'},
	    occurrence = optional, opts = []},
     #field{name = set, fnum = 4, rnum = 5,
	    type = {msg, 'mesos.v1.Value.Set'},
	    occurrence = optional, opts = []},
     #field{name = text, fnum = 5, rnum = 6,
	    type = {msg, 'mesos.v1.Value.Text'},
	    occurrence = optional, opts = []}];
find_msg_def('mesos.v1.ContainerID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('mesos.v1.scheduler.Event.Type') ->
    [{'SUBSCRIBED', 1}, {'OFFERS', 2}, {'RESCIND', 3},
     {'UPDATE', 4}, {'MESSAGE', 5}, {'FAILURE', 6},
     {'ERROR', 7}, {'HEARTBEAT', 8}];
find_enum_def('mesos.v1.scheduler.Call.Type') ->
    [{'SUBSCRIBE', 1}, {'TEARDOWN', 2}, {'ACCEPT', 3},
     {'DECLINE', 4}, {'REVIVE', 5}, {'KILL', 6},
     {'SHUTDOWN', 7}, {'ACKNOWLEDGE', 8}, {'RECONCILE', 9},
     {'MESSAGE', 10}, {'REQUEST', 11}];
find_enum_def('mesos.v1.Status') ->
    [{'DRIVER_NOT_STARTED', 1}, {'DRIVER_RUNNING', 2},
     {'DRIVER_ABORTED', 3}, {'DRIVER_STOPPED', 4}];
find_enum_def('mesos.v1.FrameworkInfo.Capability.Type') ->
    [{'REVOCABLE_RESOURCES', 1}];
find_enum_def('mesos.v1.Value.Type') ->
    [{'SCALAR', 0}, {'RANGES', 1}, {'SET', 2}, {'TEXT', 3}];
find_enum_def('mesos.v1.Offer.Operation.Type') ->
    [{'LAUNCH', 1}, {'RESERVE', 2}, {'UNRESERVE', 3},
     {'CREATE', 4}, {'DESTROY', 5}];
find_enum_def('mesos.v1.TaskState') ->
    [{'TASK_STAGING', 6}, {'TASK_STARTING', 0},
     {'TASK_RUNNING', 1}, {'TASK_FINISHED', 2},
     {'TASK_FAILED', 3}, {'TASK_KILLED', 4},
     {'TASK_LOST', 5}, {'TASK_ERROR', 7}];
find_enum_def('mesos.v1.TaskStatus.Source') ->
    [{'SOURCE_MASTER', 0}, {'SOURCE_AGENT', 1},
     {'SOURCE_EXECUTOR', 2}];
find_enum_def('mesos.v1.TaskStatus.Reason') ->
    [{'REASON_COMMAND_EXECUTOR_FAILED', 0},
     {'REASON_EXECUTOR_PREEMPTED', 17},
     {'REASON_EXECUTOR_TERMINATED', 1},
     {'REASON_EXECUTOR_UNREGISTERED', 2},
     {'REASON_FRAMEWORK_REMOVED', 3}, {'REASON_GC_ERROR', 4},
     {'REASON_INVALID_FRAMEWORKID', 5},
     {'REASON_INVALID_OFFERS', 6},
     {'REASON_MASTER_DISCONNECTED', 7},
     {'REASON_MEMORY_LIMIT', 8},
     {'REASON_RECONCILIATION', 9},
     {'REASON_RESOURCES_UNKNOWN', 18},
     {'REASON_AGENT_DISCONNECTED', 10},
     {'REASON_AGENT_REMOVED', 11},
     {'REASON_AGENT_RESTARTED', 12},
     {'REASON_AGENT_UNKNOWN', 13},
     {'REASON_TASK_INVALID', 14},
     {'REASON_TASK_UNAUTHORIZED', 15},
     {'REASON_TASK_UNKNOWN', 16}];
find_enum_def('mesos.v1.ACL.Entity.Type') ->
    [{'SOME', 0}, {'ANY', 1}, {'NONE', 2}];
find_enum_def('mesos.v1.Image.Type') -> [{'APPC', 1}];
find_enum_def('mesos.v1.Volume.Mode') ->
    [{'RW', 1}, {'RO', 2}];
find_enum_def('mesos.v1.ContainerInfo.Type') ->
    [{'DOCKER', 1}, {'MESOS', 2}];
find_enum_def('mesos.v1.ContainerInfo.DockerInfo.Network') ->
    [{'HOST', 1}, {'BRIDGE', 2}, {'NONE', 3}];
find_enum_def('mesos.v1.DiscoveryInfo.Visibility') ->
    [{'FRAMEWORK', 0}, {'CLUSTER', 1}, {'EXTERNAL', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('mesos.v1.scheduler.Event.Type',
		     Value) ->
    'enum_symbol_by_value_mesos.v1.scheduler.Event.Type'(Value);
enum_symbol_by_value('mesos.v1.scheduler.Call.Type',
		     Value) ->
    'enum_symbol_by_value_mesos.v1.scheduler.Call.Type'(Value);
enum_symbol_by_value('mesos.v1.Status', Value) ->
    'enum_symbol_by_value_mesos.v1.Status'(Value);
enum_symbol_by_value('mesos.v1.FrameworkInfo.Capability.Type',
		     Value) ->
    'enum_symbol_by_value_mesos.v1.FrameworkInfo.Capability.Type'(Value);
enum_symbol_by_value('mesos.v1.Value.Type', Value) ->
    'enum_symbol_by_value_mesos.v1.Value.Type'(Value);
enum_symbol_by_value('mesos.v1.Offer.Operation.Type',
		     Value) ->
    'enum_symbol_by_value_mesos.v1.Offer.Operation.Type'(Value);
enum_symbol_by_value('mesos.v1.TaskState', Value) ->
    'enum_symbol_by_value_mesos.v1.TaskState'(Value);
enum_symbol_by_value('mesos.v1.TaskStatus.Source',
		     Value) ->
    'enum_symbol_by_value_mesos.v1.TaskStatus.Source'(Value);
enum_symbol_by_value('mesos.v1.TaskStatus.Reason',
		     Value) ->
    'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(Value);
enum_symbol_by_value('mesos.v1.ACL.Entity.Type',
		     Value) ->
    'enum_symbol_by_value_mesos.v1.ACL.Entity.Type'(Value);
enum_symbol_by_value('mesos.v1.Image.Type', Value) ->
    'enum_symbol_by_value_mesos.v1.Image.Type'(Value);
enum_symbol_by_value('mesos.v1.Volume.Mode', Value) ->
    'enum_symbol_by_value_mesos.v1.Volume.Mode'(Value);
enum_symbol_by_value('mesos.v1.ContainerInfo.Type',
		     Value) ->
    'enum_symbol_by_value_mesos.v1.ContainerInfo.Type'(Value);
enum_symbol_by_value('mesos.v1.ContainerInfo.DockerInfo.Network',
		     Value) ->
    'enum_symbol_by_value_mesos.v1.ContainerInfo.DockerInfo.Network'(Value);
enum_symbol_by_value('mesos.v1.DiscoveryInfo.Visibility',
		     Value) ->
    'enum_symbol_by_value_mesos.v1.DiscoveryInfo.Visibility'(Value).


enum_value_by_symbol('mesos.v1.scheduler.Event.Type',
		     Sym) ->
    'enum_value_by_symbol_mesos.v1.scheduler.Event.Type'(Sym);
enum_value_by_symbol('mesos.v1.scheduler.Call.Type',
		     Sym) ->
    'enum_value_by_symbol_mesos.v1.scheduler.Call.Type'(Sym);
enum_value_by_symbol('mesos.v1.Status', Sym) ->
    'enum_value_by_symbol_mesos.v1.Status'(Sym);
enum_value_by_symbol('mesos.v1.FrameworkInfo.Capability.Type',
		     Sym) ->
    'enum_value_by_symbol_mesos.v1.FrameworkInfo.Capability.Type'(Sym);
enum_value_by_symbol('mesos.v1.Value.Type', Sym) ->
    'enum_value_by_symbol_mesos.v1.Value.Type'(Sym);
enum_value_by_symbol('mesos.v1.Offer.Operation.Type',
		     Sym) ->
    'enum_value_by_symbol_mesos.v1.Offer.Operation.Type'(Sym);
enum_value_by_symbol('mesos.v1.TaskState', Sym) ->
    'enum_value_by_symbol_mesos.v1.TaskState'(Sym);
enum_value_by_symbol('mesos.v1.TaskStatus.Source',
		     Sym) ->
    'enum_value_by_symbol_mesos.v1.TaskStatus.Source'(Sym);
enum_value_by_symbol('mesos.v1.TaskStatus.Reason',
		     Sym) ->
    'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'(Sym);
enum_value_by_symbol('mesos.v1.ACL.Entity.Type', Sym) ->
    'enum_value_by_symbol_mesos.v1.ACL.Entity.Type'(Sym);
enum_value_by_symbol('mesos.v1.Image.Type', Sym) ->
    'enum_value_by_symbol_mesos.v1.Image.Type'(Sym);
enum_value_by_symbol('mesos.v1.Volume.Mode', Sym) ->
    'enum_value_by_symbol_mesos.v1.Volume.Mode'(Sym);
enum_value_by_symbol('mesos.v1.ContainerInfo.Type',
		     Sym) ->
    'enum_value_by_symbol_mesos.v1.ContainerInfo.Type'(Sym);
enum_value_by_symbol('mesos.v1.ContainerInfo.DockerInfo.Network',
		     Sym) ->
    'enum_value_by_symbol_mesos.v1.ContainerInfo.DockerInfo.Network'(Sym);
enum_value_by_symbol('mesos.v1.DiscoveryInfo.Visibility',
		     Sym) ->
    'enum_value_by_symbol_mesos.v1.DiscoveryInfo.Visibility'(Sym).


'enum_symbol_by_value_mesos.v1.scheduler.Event.Type'(1) ->
    'SUBSCRIBED';
'enum_symbol_by_value_mesos.v1.scheduler.Event.Type'(2) ->
    'OFFERS';
'enum_symbol_by_value_mesos.v1.scheduler.Event.Type'(3) ->
    'RESCIND';
'enum_symbol_by_value_mesos.v1.scheduler.Event.Type'(4) ->
    'UPDATE';
'enum_symbol_by_value_mesos.v1.scheduler.Event.Type'(5) ->
    'MESSAGE';
'enum_symbol_by_value_mesos.v1.scheduler.Event.Type'(6) ->
    'FAILURE';
'enum_symbol_by_value_mesos.v1.scheduler.Event.Type'(7) ->
    'ERROR';
'enum_symbol_by_value_mesos.v1.scheduler.Event.Type'(8) ->
    'HEARTBEAT'.


'enum_value_by_symbol_mesos.v1.scheduler.Event.Type'('SUBSCRIBED') ->
    1;
'enum_value_by_symbol_mesos.v1.scheduler.Event.Type'('OFFERS') ->
    2;
'enum_value_by_symbol_mesos.v1.scheduler.Event.Type'('RESCIND') ->
    3;
'enum_value_by_symbol_mesos.v1.scheduler.Event.Type'('UPDATE') ->
    4;
'enum_value_by_symbol_mesos.v1.scheduler.Event.Type'('MESSAGE') ->
    5;
'enum_value_by_symbol_mesos.v1.scheduler.Event.Type'('FAILURE') ->
    6;
'enum_value_by_symbol_mesos.v1.scheduler.Event.Type'('ERROR') ->
    7;
'enum_value_by_symbol_mesos.v1.scheduler.Event.Type'('HEARTBEAT') ->
    8.

'enum_symbol_by_value_mesos.v1.scheduler.Call.Type'(1) ->
    'SUBSCRIBE';
'enum_symbol_by_value_mesos.v1.scheduler.Call.Type'(2) ->
    'TEARDOWN';
'enum_symbol_by_value_mesos.v1.scheduler.Call.Type'(3) ->
    'ACCEPT';
'enum_symbol_by_value_mesos.v1.scheduler.Call.Type'(4) ->
    'DECLINE';
'enum_symbol_by_value_mesos.v1.scheduler.Call.Type'(5) ->
    'REVIVE';
'enum_symbol_by_value_mesos.v1.scheduler.Call.Type'(6) ->
    'KILL';
'enum_symbol_by_value_mesos.v1.scheduler.Call.Type'(7) ->
    'SHUTDOWN';
'enum_symbol_by_value_mesos.v1.scheduler.Call.Type'(8) ->
    'ACKNOWLEDGE';
'enum_symbol_by_value_mesos.v1.scheduler.Call.Type'(9) ->
    'RECONCILE';
'enum_symbol_by_value_mesos.v1.scheduler.Call.Type'(10) ->
    'MESSAGE';
'enum_symbol_by_value_mesos.v1.scheduler.Call.Type'(11) ->
    'REQUEST'.


'enum_value_by_symbol_mesos.v1.scheduler.Call.Type'('SUBSCRIBE') ->
    1;
'enum_value_by_symbol_mesos.v1.scheduler.Call.Type'('TEARDOWN') ->
    2;
'enum_value_by_symbol_mesos.v1.scheduler.Call.Type'('ACCEPT') ->
    3;
'enum_value_by_symbol_mesos.v1.scheduler.Call.Type'('DECLINE') ->
    4;
'enum_value_by_symbol_mesos.v1.scheduler.Call.Type'('REVIVE') ->
    5;
'enum_value_by_symbol_mesos.v1.scheduler.Call.Type'('KILL') ->
    6;
'enum_value_by_symbol_mesos.v1.scheduler.Call.Type'('SHUTDOWN') ->
    7;
'enum_value_by_symbol_mesos.v1.scheduler.Call.Type'('ACKNOWLEDGE') ->
    8;
'enum_value_by_symbol_mesos.v1.scheduler.Call.Type'('RECONCILE') ->
    9;
'enum_value_by_symbol_mesos.v1.scheduler.Call.Type'('MESSAGE') ->
    10;
'enum_value_by_symbol_mesos.v1.scheduler.Call.Type'('REQUEST') ->
    11.

'enum_symbol_by_value_mesos.v1.Status'(1) ->
    'DRIVER_NOT_STARTED';
'enum_symbol_by_value_mesos.v1.Status'(2) ->
    'DRIVER_RUNNING';
'enum_symbol_by_value_mesos.v1.Status'(3) ->
    'DRIVER_ABORTED';
'enum_symbol_by_value_mesos.v1.Status'(4) ->
    'DRIVER_STOPPED'.


'enum_value_by_symbol_mesos.v1.Status'('DRIVER_NOT_STARTED') ->
    1;
'enum_value_by_symbol_mesos.v1.Status'('DRIVER_RUNNING') ->
    2;
'enum_value_by_symbol_mesos.v1.Status'('DRIVER_ABORTED') ->
    3;
'enum_value_by_symbol_mesos.v1.Status'('DRIVER_STOPPED') ->
    4.

'enum_symbol_by_value_mesos.v1.FrameworkInfo.Capability.Type'(1) ->
    'REVOCABLE_RESOURCES'.


'enum_value_by_symbol_mesos.v1.FrameworkInfo.Capability.Type'('REVOCABLE_RESOURCES') ->
    1.

'enum_symbol_by_value_mesos.v1.Value.Type'(0) ->
    'SCALAR';
'enum_symbol_by_value_mesos.v1.Value.Type'(1) ->
    'RANGES';
'enum_symbol_by_value_mesos.v1.Value.Type'(2) -> 'SET';
'enum_symbol_by_value_mesos.v1.Value.Type'(3) -> 'TEXT'.


'enum_value_by_symbol_mesos.v1.Value.Type'('SCALAR') ->
    0;
'enum_value_by_symbol_mesos.v1.Value.Type'('RANGES') ->
    1;
'enum_value_by_symbol_mesos.v1.Value.Type'('SET') -> 2;
'enum_value_by_symbol_mesos.v1.Value.Type'('TEXT') -> 3.

'enum_symbol_by_value_mesos.v1.Offer.Operation.Type'(1) ->
    'LAUNCH';
'enum_symbol_by_value_mesos.v1.Offer.Operation.Type'(2) ->
    'RESERVE';
'enum_symbol_by_value_mesos.v1.Offer.Operation.Type'(3) ->
    'UNRESERVE';
'enum_symbol_by_value_mesos.v1.Offer.Operation.Type'(4) ->
    'CREATE';
'enum_symbol_by_value_mesos.v1.Offer.Operation.Type'(5) ->
    'DESTROY'.


'enum_value_by_symbol_mesos.v1.Offer.Operation.Type'('LAUNCH') ->
    1;
'enum_value_by_symbol_mesos.v1.Offer.Operation.Type'('RESERVE') ->
    2;
'enum_value_by_symbol_mesos.v1.Offer.Operation.Type'('UNRESERVE') ->
    3;
'enum_value_by_symbol_mesos.v1.Offer.Operation.Type'('CREATE') ->
    4;
'enum_value_by_symbol_mesos.v1.Offer.Operation.Type'('DESTROY') ->
    5.

'enum_symbol_by_value_mesos.v1.TaskState'(6) ->
    'TASK_STAGING';
'enum_symbol_by_value_mesos.v1.TaskState'(0) ->
    'TASK_STARTING';
'enum_symbol_by_value_mesos.v1.TaskState'(1) ->
    'TASK_RUNNING';
'enum_symbol_by_value_mesos.v1.TaskState'(2) ->
    'TASK_FINISHED';
'enum_symbol_by_value_mesos.v1.TaskState'(3) ->
    'TASK_FAILED';
'enum_symbol_by_value_mesos.v1.TaskState'(4) ->
    'TASK_KILLED';
'enum_symbol_by_value_mesos.v1.TaskState'(5) ->
    'TASK_LOST';
'enum_symbol_by_value_mesos.v1.TaskState'(7) ->
    'TASK_ERROR'.


'enum_value_by_symbol_mesos.v1.TaskState'('TASK_STAGING') ->
    6;
'enum_value_by_symbol_mesos.v1.TaskState'('TASK_STARTING') ->
    0;
'enum_value_by_symbol_mesos.v1.TaskState'('TASK_RUNNING') ->
    1;
'enum_value_by_symbol_mesos.v1.TaskState'('TASK_FINISHED') ->
    2;
'enum_value_by_symbol_mesos.v1.TaskState'('TASK_FAILED') ->
    3;
'enum_value_by_symbol_mesos.v1.TaskState'('TASK_KILLED') ->
    4;
'enum_value_by_symbol_mesos.v1.TaskState'('TASK_LOST') ->
    5;
'enum_value_by_symbol_mesos.v1.TaskState'('TASK_ERROR') ->
    7.

'enum_symbol_by_value_mesos.v1.TaskStatus.Source'(0) ->
    'SOURCE_MASTER';
'enum_symbol_by_value_mesos.v1.TaskStatus.Source'(1) ->
    'SOURCE_AGENT';
'enum_symbol_by_value_mesos.v1.TaskStatus.Source'(2) ->
    'SOURCE_EXECUTOR'.


'enum_value_by_symbol_mesos.v1.TaskStatus.Source'('SOURCE_MASTER') ->
    0;
'enum_value_by_symbol_mesos.v1.TaskStatus.Source'('SOURCE_AGENT') ->
    1;
'enum_value_by_symbol_mesos.v1.TaskStatus.Source'('SOURCE_EXECUTOR') ->
    2.

'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(0) ->
    'REASON_COMMAND_EXECUTOR_FAILED';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(17) ->
    'REASON_EXECUTOR_PREEMPTED';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(1) ->
    'REASON_EXECUTOR_TERMINATED';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(2) ->
    'REASON_EXECUTOR_UNREGISTERED';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(3) ->
    'REASON_FRAMEWORK_REMOVED';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(4) ->
    'REASON_GC_ERROR';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(5) ->
    'REASON_INVALID_FRAMEWORKID';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(6) ->
    'REASON_INVALID_OFFERS';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(7) ->
    'REASON_MASTER_DISCONNECTED';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(8) ->
    'REASON_MEMORY_LIMIT';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(9) ->
    'REASON_RECONCILIATION';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(18) ->
    'REASON_RESOURCES_UNKNOWN';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(10) ->
    'REASON_AGENT_DISCONNECTED';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(11) ->
    'REASON_AGENT_REMOVED';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(12) ->
    'REASON_AGENT_RESTARTED';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(13) ->
    'REASON_AGENT_UNKNOWN';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(14) ->
    'REASON_TASK_INVALID';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(15) ->
    'REASON_TASK_UNAUTHORIZED';
'enum_symbol_by_value_mesos.v1.TaskStatus.Reason'(16) ->
    'REASON_TASK_UNKNOWN'.


'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_COMMAND_EXECUTOR_FAILED') ->
    0;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_EXECUTOR_PREEMPTED') ->
    17;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_EXECUTOR_TERMINATED') ->
    1;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_EXECUTOR_UNREGISTERED') ->
    2;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_FRAMEWORK_REMOVED') ->
    3;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_GC_ERROR') ->
    4;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_INVALID_FRAMEWORKID') ->
    5;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_INVALID_OFFERS') ->
    6;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_MASTER_DISCONNECTED') ->
    7;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_MEMORY_LIMIT') ->
    8;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_RECONCILIATION') ->
    9;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_RESOURCES_UNKNOWN') ->
    18;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_AGENT_DISCONNECTED') ->
    10;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_AGENT_REMOVED') ->
    11;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_AGENT_RESTARTED') ->
    12;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_AGENT_UNKNOWN') ->
    13;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_TASK_INVALID') ->
    14;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_TASK_UNAUTHORIZED') ->
    15;
'enum_value_by_symbol_mesos.v1.TaskStatus.Reason'('REASON_TASK_UNKNOWN') ->
    16.

'enum_symbol_by_value_mesos.v1.ACL.Entity.Type'(0) ->
    'SOME';
'enum_symbol_by_value_mesos.v1.ACL.Entity.Type'(1) ->
    'ANY';
'enum_symbol_by_value_mesos.v1.ACL.Entity.Type'(2) ->
    'NONE'.


'enum_value_by_symbol_mesos.v1.ACL.Entity.Type'('SOME') ->
    0;
'enum_value_by_symbol_mesos.v1.ACL.Entity.Type'('ANY') ->
    1;
'enum_value_by_symbol_mesos.v1.ACL.Entity.Type'('NONE') ->
    2.

'enum_symbol_by_value_mesos.v1.Image.Type'(1) -> 'APPC'.


'enum_value_by_symbol_mesos.v1.Image.Type'('APPC') -> 1.

'enum_symbol_by_value_mesos.v1.Volume.Mode'(1) -> 'RW';
'enum_symbol_by_value_mesos.v1.Volume.Mode'(2) -> 'RO'.


'enum_value_by_symbol_mesos.v1.Volume.Mode'('RW') -> 1;
'enum_value_by_symbol_mesos.v1.Volume.Mode'('RO') -> 2.

'enum_symbol_by_value_mesos.v1.ContainerInfo.Type'(1) ->
    'DOCKER';
'enum_symbol_by_value_mesos.v1.ContainerInfo.Type'(2) ->
    'MESOS'.


'enum_value_by_symbol_mesos.v1.ContainerInfo.Type'('DOCKER') ->
    1;
'enum_value_by_symbol_mesos.v1.ContainerInfo.Type'('MESOS') ->
    2.

'enum_symbol_by_value_mesos.v1.ContainerInfo.DockerInfo.Network'(1) ->
    'HOST';
'enum_symbol_by_value_mesos.v1.ContainerInfo.DockerInfo.Network'(2) ->
    'BRIDGE';
'enum_symbol_by_value_mesos.v1.ContainerInfo.DockerInfo.Network'(3) ->
    'NONE'.


'enum_value_by_symbol_mesos.v1.ContainerInfo.DockerInfo.Network'('HOST') ->
    1;
'enum_value_by_symbol_mesos.v1.ContainerInfo.DockerInfo.Network'('BRIDGE') ->
    2;
'enum_value_by_symbol_mesos.v1.ContainerInfo.DockerInfo.Network'('NONE') ->
    3.

'enum_symbol_by_value_mesos.v1.DiscoveryInfo.Visibility'(0) ->
    'FRAMEWORK';
'enum_symbol_by_value_mesos.v1.DiscoveryInfo.Visibility'(1) ->
    'CLUSTER';
'enum_symbol_by_value_mesos.v1.DiscoveryInfo.Visibility'(2) ->
    'EXTERNAL'.


'enum_value_by_symbol_mesos.v1.DiscoveryInfo.Visibility'('FRAMEWORK') ->
    0;
'enum_value_by_symbol_mesos.v1.DiscoveryInfo.Visibility'('CLUSTER') ->
    1;
'enum_value_by_symbol_mesos.v1.DiscoveryInfo.Visibility'('EXTERNAL') ->
    2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'mesos.v1.scheduler'.



gpb_version_as_string() ->
    "3.18.8".

gpb_version_as_list() ->
    [3,18,8].
